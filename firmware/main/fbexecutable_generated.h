// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBEXECUTABLE_LABATHOME_H_
#define FLATBUFFERS_GENERATED_FBEXECUTABLE_LABATHOME_H_

#include "flatbuffers/flatbuffers.h"

namespace labathome {

struct FbExecutable;
struct FbExecutableBuilder;

struct FbAnd2Configuration;
struct FbAnd2ConfigurationBuilder;

struct FbOr2Configuration;
struct FbOr2ConfigurationBuilder;

struct FbAnd3Configuration;
struct FbAnd3ConfigurationBuilder;

struct FbNotConfiguration;
struct FbNotConfigurationBuilder;

struct FbTonConfiguration;
struct FbTonConfigurationBuilder;

struct FbRSConfiguration;
struct FbRSConfigurationBuilder;

enum FbConfiguration {
  FbConfiguration_NONE = 0,
  FbConfiguration_FbAnd2Configuration = 1,
  FbConfiguration_FbOr2Configuration = 2,
  FbConfiguration_FbAnd3Configuration = 3,
  FbConfiguration_FbNotConfiguration = 4,
  FbConfiguration_FbTonConfiguration = 5,
  FbConfiguration_FbRSConfiguration = 6,
  FbConfiguration_MIN = FbConfiguration_NONE,
  FbConfiguration_MAX = FbConfiguration_FbRSConfiguration
};

inline const FbConfiguration (&EnumValuesFbConfiguration())[7] {
  static const FbConfiguration values[] = {
    FbConfiguration_NONE,
    FbConfiguration_FbAnd2Configuration,
    FbConfiguration_FbOr2Configuration,
    FbConfiguration_FbAnd3Configuration,
    FbConfiguration_FbNotConfiguration,
    FbConfiguration_FbTonConfiguration,
    FbConfiguration_FbRSConfiguration
  };
  return values;
}

inline const char * const *EnumNamesFbConfiguration() {
  static const char * const names[8] = {
    "NONE",
    "FbAnd2Configuration",
    "FbOr2Configuration",
    "FbAnd3Configuration",
    "FbNotConfiguration",
    "FbTonConfiguration",
    "FbRSConfiguration",
    nullptr
  };
  return names;
}

inline const char *EnumNameFbConfiguration(FbConfiguration e) {
  if (flatbuffers::IsOutRange(e, FbConfiguration_NONE, FbConfiguration_FbRSConfiguration)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFbConfiguration()[index];
}

template<typename T> struct FbConfigurationTraits {
  static const FbConfiguration enum_value = FbConfiguration_NONE;
};

template<> struct FbConfigurationTraits<labathome::FbAnd2Configuration> {
  static const FbConfiguration enum_value = FbConfiguration_FbAnd2Configuration;
};

template<> struct FbConfigurationTraits<labathome::FbOr2Configuration> {
  static const FbConfiguration enum_value = FbConfiguration_FbOr2Configuration;
};

template<> struct FbConfigurationTraits<labathome::FbAnd3Configuration> {
  static const FbConfiguration enum_value = FbConfiguration_FbAnd3Configuration;
};

template<> struct FbConfigurationTraits<labathome::FbNotConfiguration> {
  static const FbConfiguration enum_value = FbConfiguration_FbNotConfiguration;
};

template<> struct FbConfigurationTraits<labathome::FbTonConfiguration> {
  static const FbConfiguration enum_value = FbConfiguration_FbTonConfiguration;
};

template<> struct FbConfigurationTraits<labathome::FbRSConfiguration> {
  static const FbConfiguration enum_value = FbConfiguration_FbRSConfiguration;
};

bool VerifyFbConfiguration(flatbuffers::Verifier &verifier, const void *obj, FbConfiguration type);
bool VerifyFbConfigurationVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FbExecutable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbExecutableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TIMESTAMP = 6,
    VT_FBCONFIG_TYPE = 8,
    VT_FBCONFIG = 10,
    VT_MAXBINARYINDEX = 12,
    VT_MAXINTEGERINDEX = 14,
    VT_MAXDOUBLEINDEX = 16
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::Vector<uint8_t> *fbConfig_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FBCONFIG_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *fbConfig() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_FBCONFIG);
  }
  uint16_t maxBinaryIndex() const {
    return GetField<uint16_t>(VT_MAXBINARYINDEX, 0);
  }
  uint16_t maxIntegerIndex() const {
    return GetField<uint16_t>(VT_MAXINTEGERINDEX, 0);
  }
  uint16_t maxDoubleIndex() const {
    return GetField<uint16_t>(VT_MAXDOUBLEINDEX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_FBCONFIG_TYPE) &&
           verifier.VerifyVector(fbConfig_type()) &&
           VerifyOffset(verifier, VT_FBCONFIG) &&
           verifier.VerifyVector(fbConfig()) &&
           VerifyFbConfigurationVector(verifier, fbConfig(), fbConfig_type()) &&
           VerifyField<uint16_t>(verifier, VT_MAXBINARYINDEX) &&
           VerifyField<uint16_t>(verifier, VT_MAXINTEGERINDEX) &&
           VerifyField<uint16_t>(verifier, VT_MAXDOUBLEINDEX) &&
           verifier.EndTable();
  }
};

struct FbExecutableBuilder {
  typedef FbExecutable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(FbExecutable::VT_ID, id, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(FbExecutable::VT_TIMESTAMP, timestamp, 0);
  }
  void add_fbConfig_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fbConfig_type) {
    fbb_.AddOffset(FbExecutable::VT_FBCONFIG_TYPE, fbConfig_type);
  }
  void add_fbConfig(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> fbConfig) {
    fbb_.AddOffset(FbExecutable::VT_FBCONFIG, fbConfig);
  }
  void add_maxBinaryIndex(uint16_t maxBinaryIndex) {
    fbb_.AddElement<uint16_t>(FbExecutable::VT_MAXBINARYINDEX, maxBinaryIndex, 0);
  }
  void add_maxIntegerIndex(uint16_t maxIntegerIndex) {
    fbb_.AddElement<uint16_t>(FbExecutable::VT_MAXINTEGERINDEX, maxIntegerIndex, 0);
  }
  void add_maxDoubleIndex(uint16_t maxDoubleIndex) {
    fbb_.AddElement<uint16_t>(FbExecutable::VT_MAXDOUBLEINDEX, maxDoubleIndex, 0);
  }
  explicit FbExecutableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbExecutableBuilder &operator=(const FbExecutableBuilder &);
  flatbuffers::Offset<FbExecutable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbExecutable>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbExecutable> CreateFbExecutable(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> fbConfig_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> fbConfig = 0,
    uint16_t maxBinaryIndex = 0,
    uint16_t maxIntegerIndex = 0,
    uint16_t maxDoubleIndex = 0) {
  FbExecutableBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_id(id);
  builder_.add_fbConfig(fbConfig);
  builder_.add_fbConfig_type(fbConfig_type);
  builder_.add_maxDoubleIndex(maxDoubleIndex);
  builder_.add_maxIntegerIndex(maxIntegerIndex);
  builder_.add_maxBinaryIndex(maxBinaryIndex);
  return builder_.Finish();
}

inline flatbuffers::Offset<FbExecutable> CreateFbExecutableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t timestamp = 0,
    const std::vector<uint8_t> *fbConfig_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *fbConfig = nullptr,
    uint16_t maxBinaryIndex = 0,
    uint16_t maxIntegerIndex = 0,
    uint16_t maxDoubleIndex = 0) {
  auto fbConfig_type__ = fbConfig_type ? _fbb.CreateVector<uint8_t>(*fbConfig_type) : 0;
  auto fbConfig__ = fbConfig ? _fbb.CreateVector<flatbuffers::Offset<void>>(*fbConfig) : 0;
  return labathome::CreateFbExecutable(
      _fbb,
      id,
      timestamp,
      fbConfig_type__,
      fbConfig__,
      maxBinaryIndex,
      maxIntegerIndex,
      maxDoubleIndex);
}

struct FbAnd2Configuration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbAnd2ConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTA = 4,
    VT_INPUTB = 6,
    VT_OUTPUT = 8
  };
  uint16_t inputA() const {
    return GetField<uint16_t>(VT_INPUTA, 0);
  }
  uint16_t inputB() const {
    return GetField<uint16_t>(VT_INPUTB, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUTA) &&
           VerifyField<uint16_t>(verifier, VT_INPUTB) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           verifier.EndTable();
  }
};

struct FbAnd2ConfigurationBuilder {
  typedef FbAnd2Configuration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputA(uint16_t inputA) {
    fbb_.AddElement<uint16_t>(FbAnd2Configuration::VT_INPUTA, inputA, 0);
  }
  void add_inputB(uint16_t inputB) {
    fbb_.AddElement<uint16_t>(FbAnd2Configuration::VT_INPUTB, inputB, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbAnd2Configuration::VT_OUTPUT, output, 0);
  }
  explicit FbAnd2ConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbAnd2ConfigurationBuilder &operator=(const FbAnd2ConfigurationBuilder &);
  flatbuffers::Offset<FbAnd2Configuration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbAnd2Configuration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbAnd2Configuration> CreateFbAnd2Configuration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t inputA = 0,
    uint16_t inputB = 0,
    uint16_t output = 0) {
  FbAnd2ConfigurationBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_inputB(inputB);
  builder_.add_inputA(inputA);
  return builder_.Finish();
}

struct FbOr2Configuration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbOr2ConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTA = 4,
    VT_INPUTB = 6,
    VT_OUTPUT = 8
  };
  uint16_t inputA() const {
    return GetField<uint16_t>(VT_INPUTA, 0);
  }
  uint16_t inputB() const {
    return GetField<uint16_t>(VT_INPUTB, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUTA) &&
           VerifyField<uint16_t>(verifier, VT_INPUTB) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           verifier.EndTable();
  }
};

struct FbOr2ConfigurationBuilder {
  typedef FbOr2Configuration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputA(uint16_t inputA) {
    fbb_.AddElement<uint16_t>(FbOr2Configuration::VT_INPUTA, inputA, 0);
  }
  void add_inputB(uint16_t inputB) {
    fbb_.AddElement<uint16_t>(FbOr2Configuration::VT_INPUTB, inputB, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbOr2Configuration::VT_OUTPUT, output, 0);
  }
  explicit FbOr2ConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbOr2ConfigurationBuilder &operator=(const FbOr2ConfigurationBuilder &);
  flatbuffers::Offset<FbOr2Configuration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbOr2Configuration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbOr2Configuration> CreateFbOr2Configuration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t inputA = 0,
    uint16_t inputB = 0,
    uint16_t output = 0) {
  FbOr2ConfigurationBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_inputB(inputB);
  builder_.add_inputA(inputA);
  return builder_.Finish();
}

struct FbAnd3Configuration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbAnd3ConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTA = 4,
    VT_INPUTB = 6,
    VT_INPUTC = 8,
    VT_OUTPUT = 10
  };
  uint16_t inputA() const {
    return GetField<uint16_t>(VT_INPUTA, 0);
  }
  uint16_t inputB() const {
    return GetField<uint16_t>(VT_INPUTB, 0);
  }
  uint16_t inputC() const {
    return GetField<uint16_t>(VT_INPUTC, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUTA) &&
           VerifyField<uint16_t>(verifier, VT_INPUTB) &&
           VerifyField<uint16_t>(verifier, VT_INPUTC) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           verifier.EndTable();
  }
};

struct FbAnd3ConfigurationBuilder {
  typedef FbAnd3Configuration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputA(uint16_t inputA) {
    fbb_.AddElement<uint16_t>(FbAnd3Configuration::VT_INPUTA, inputA, 0);
  }
  void add_inputB(uint16_t inputB) {
    fbb_.AddElement<uint16_t>(FbAnd3Configuration::VT_INPUTB, inputB, 0);
  }
  void add_inputC(uint16_t inputC) {
    fbb_.AddElement<uint16_t>(FbAnd3Configuration::VT_INPUTC, inputC, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbAnd3Configuration::VT_OUTPUT, output, 0);
  }
  explicit FbAnd3ConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbAnd3ConfigurationBuilder &operator=(const FbAnd3ConfigurationBuilder &);
  flatbuffers::Offset<FbAnd3Configuration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbAnd3Configuration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbAnd3Configuration> CreateFbAnd3Configuration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t inputA = 0,
    uint16_t inputB = 0,
    uint16_t inputC = 0,
    uint16_t output = 0) {
  FbAnd3ConfigurationBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_inputC(inputC);
  builder_.add_inputB(inputB);
  builder_.add_inputA(inputA);
  return builder_.Finish();
}

struct FbNotConfiguration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbNotConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6
  };
  uint16_t input() const {
    return GetField<uint16_t>(VT_INPUT, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUT) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           verifier.EndTable();
  }
};

struct FbNotConfigurationBuilder {
  typedef FbNotConfiguration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(uint16_t input) {
    fbb_.AddElement<uint16_t>(FbNotConfiguration::VT_INPUT, input, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbNotConfiguration::VT_OUTPUT, output, 0);
  }
  explicit FbNotConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbNotConfigurationBuilder &operator=(const FbNotConfigurationBuilder &);
  flatbuffers::Offset<FbNotConfiguration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbNotConfiguration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbNotConfiguration> CreateFbNotConfiguration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t input = 0,
    uint16_t output = 0) {
  FbNotConfigurationBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

struct FbTonConfiguration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbTonConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_PRESETTIME_SECS = 8,
    VT_ELAPSEDTIME_SECS = 10
  };
  uint16_t input() const {
    return GetField<uint16_t>(VT_INPUT, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  uint32_t presetTime_secs() const {
    return GetField<uint32_t>(VT_PRESETTIME_SECS, 0);
  }
  uint32_t elapsedTime_secs() const {
    return GetField<uint32_t>(VT_ELAPSEDTIME_SECS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUT) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           VerifyField<uint32_t>(verifier, VT_PRESETTIME_SECS) &&
           VerifyField<uint32_t>(verifier, VT_ELAPSEDTIME_SECS) &&
           verifier.EndTable();
  }
};

struct FbTonConfigurationBuilder {
  typedef FbTonConfiguration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(uint16_t input) {
    fbb_.AddElement<uint16_t>(FbTonConfiguration::VT_INPUT, input, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbTonConfiguration::VT_OUTPUT, output, 0);
  }
  void add_presetTime_secs(uint32_t presetTime_secs) {
    fbb_.AddElement<uint32_t>(FbTonConfiguration::VT_PRESETTIME_SECS, presetTime_secs, 0);
  }
  void add_elapsedTime_secs(uint32_t elapsedTime_secs) {
    fbb_.AddElement<uint32_t>(FbTonConfiguration::VT_ELAPSEDTIME_SECS, elapsedTime_secs, 0);
  }
  explicit FbTonConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbTonConfigurationBuilder &operator=(const FbTonConfigurationBuilder &);
  flatbuffers::Offset<FbTonConfiguration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbTonConfiguration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbTonConfiguration> CreateFbTonConfiguration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t input = 0,
    uint16_t output = 0,
    uint32_t presetTime_secs = 0,
    uint32_t elapsedTime_secs = 0) {
  FbTonConfigurationBuilder builder_(_fbb);
  builder_.add_elapsedTime_secs(elapsedTime_secs);
  builder_.add_presetTime_secs(presetTime_secs);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

struct FbRSConfiguration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FbRSConfigurationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTR = 4,
    VT_INPUTS = 6,
    VT_OUTPUT = 8
  };
  uint16_t inputR() const {
    return GetField<uint16_t>(VT_INPUTR, 0);
  }
  uint16_t inputS() const {
    return GetField<uint16_t>(VT_INPUTS, 0);
  }
  uint16_t output() const {
    return GetField<uint16_t>(VT_OUTPUT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INPUTR) &&
           VerifyField<uint16_t>(verifier, VT_INPUTS) &&
           VerifyField<uint16_t>(verifier, VT_OUTPUT) &&
           verifier.EndTable();
  }
};

struct FbRSConfigurationBuilder {
  typedef FbRSConfiguration Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inputR(uint16_t inputR) {
    fbb_.AddElement<uint16_t>(FbRSConfiguration::VT_INPUTR, inputR, 0);
  }
  void add_inputS(uint16_t inputS) {
    fbb_.AddElement<uint16_t>(FbRSConfiguration::VT_INPUTS, inputS, 0);
  }
  void add_output(uint16_t output) {
    fbb_.AddElement<uint16_t>(FbRSConfiguration::VT_OUTPUT, output, 0);
  }
  explicit FbRSConfigurationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbRSConfigurationBuilder &operator=(const FbRSConfigurationBuilder &);
  flatbuffers::Offset<FbRSConfiguration> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbRSConfiguration>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbRSConfiguration> CreateFbRSConfiguration(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t inputR = 0,
    uint16_t inputS = 0,
    uint16_t output = 0) {
  FbRSConfigurationBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_inputS(inputS);
  builder_.add_inputR(inputR);
  return builder_.Finish();
}

inline bool VerifyFbConfiguration(flatbuffers::Verifier &verifier, const void *obj, FbConfiguration type) {
  switch (type) {
    case FbConfiguration_NONE: {
      return true;
    }
    case FbConfiguration_FbAnd2Configuration: {
      auto ptr = reinterpret_cast<const labathome::FbAnd2Configuration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FbConfiguration_FbOr2Configuration: {
      auto ptr = reinterpret_cast<const labathome::FbOr2Configuration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FbConfiguration_FbAnd3Configuration: {
      auto ptr = reinterpret_cast<const labathome::FbAnd3Configuration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FbConfiguration_FbNotConfiguration: {
      auto ptr = reinterpret_cast<const labathome::FbNotConfiguration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FbConfiguration_FbTonConfiguration: {
      auto ptr = reinterpret_cast<const labathome::FbTonConfiguration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FbConfiguration_FbRSConfiguration: {
      auto ptr = reinterpret_cast<const labathome::FbRSConfiguration *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFbConfigurationVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFbConfiguration(
        verifier,  values->Get(i), types->GetEnum<FbConfiguration>(i))) {
      return false;
    }
  }
  return true;
}

inline const labathome::FbExecutable *GetFbExecutable(const void *buf) {
  return flatbuffers::GetRoot<labathome::FbExecutable>(buf);
}

inline const labathome::FbExecutable *GetSizePrefixedFbExecutable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<labathome::FbExecutable>(buf);
}

inline bool VerifyFbExecutableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<labathome::FbExecutable>(nullptr);
}

inline bool VerifySizePrefixedFbExecutableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<labathome::FbExecutable>(nullptr);
}

inline void FinishFbExecutableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<labathome::FbExecutable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFbExecutableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<labathome::FbExecutable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace labathome

#endif  // FLATBUFFERS_GENERATED_FBEXECUTABLE_LABATHOME_H_
