{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/chart.js/dist/chart.js","src/ADCExperimentController.ts","src/AirspeedExperimentController.ts","src/App.ts","src/DevelopCFCController.ts","src/DialogController.ts","src/FFTExperimentController.ts","src/HeaterExperimentController.ts","src/ScreenController.ts","src/flowchart/Flowchart.ts","src/flowchart/FlowchartCompiler.ts","src/flowchart/FlowchartConnector.ts","src/flowchart/FlowchartLink.ts","src/flowchart/FlowchartOperator.ts","src/flowchart/FlowchartOperatorImpl.ts","src/flowchart/SerializeContext.ts","src/flowchart/SimulationManager.ts","src/flowchart/Songs.ts","src/flowchart/TopologicalSorfDFS.ts","src/utils.ts"],"names":[],"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * Chart.js v3.7.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Chart = factory());\n})(this, (function () { 'use strict';\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function(...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\n/*!\n * @kurkle/color v0.1.9\n * https://github.com/kurkle/color#readme\n * (c) 2020 Jukka Kurkela\n * Released under the MIT License\n */\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = '0123456789ABCDEF';\nconst h1 = (b) => hex[b & 0xF];\nconst h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));\nfunction isShort(v) {\n\treturn eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n}\nfunction hexParse(str) {\n\tvar len = str.length;\n\tvar ret;\n\tif (str[0] === '#') {\n\t\tif (len === 4 || len === 5) {\n\t\t\tret = {\n\t\t\t\tr: 255 & map$1[str[1]] * 17,\n\t\t\t\tg: 255 & map$1[str[2]] * 17,\n\t\t\t\tb: 255 & map$1[str[3]] * 17,\n\t\t\t\ta: len === 5 ? map$1[str[4]] * 17 : 255\n\t\t\t};\n\t\t} else if (len === 7 || len === 9) {\n\t\t\tret = {\n\t\t\t\tr: map$1[str[1]] << 4 | map$1[str[2]],\n\t\t\t\tg: map$1[str[3]] << 4 | map$1[str[4]],\n\t\t\t\tb: map$1[str[5]] << 4 | map$1[str[6]],\n\t\t\t\ta: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n\t\t\t};\n\t\t}\n\t}\n\treturn ret;\n}\nfunction hexString(v) {\n\tvar f = isShort(v) ? h1 : h2;\n\treturn v\n\t\t? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')\n\t\t: v;\n}\nfunction round(v) {\n\treturn v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n\treturn lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n\treturn lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n\treturn lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n\treturn lim(round(v * 100), 0, 100);\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n\tconst m = RGB_RE.exec(str);\n\tlet a = 255;\n\tlet r, g, b;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[7] !== r) {\n\t\tconst v = +m[7];\n\t\ta = 255 & (m[8] ? p2b(v) : v * 255);\n\t}\n\tr = +m[1];\n\tg = +m[3];\n\tb = +m[5];\n\tr = 255 & (m[2] ? p2b(r) : r);\n\tg = 255 & (m[4] ? p2b(g) : g);\n\tb = 255 & (m[6] ? p2b(b) : b);\n\treturn {\n\t\tr: r,\n\t\tg: g,\n\t\tb: b,\n\t\ta: a\n\t};\n}\nfunction rgbString(v) {\n\treturn v && (\n\t\tv.a < 255\n\t\t\t? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n\t\t\t: `rgb(${v.r}, ${v.g}, ${v.b})`\n\t);\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n\tconst a = s * Math.min(l, 1 - l);\n\tconst f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\treturn [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n\tconst f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n\treturn [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n\tconst rgb = hsl2rgbn(h, 1, 0.5);\n\tlet i;\n\tif (w + b > 1) {\n\t\ti = 1 / (w + b);\n\t\tw *= i;\n\t\tb *= i;\n\t}\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] *= 1 - w - b;\n\t\trgb[i] += w;\n\t}\n\treturn rgb;\n}\nfunction rgb2hsl(v) {\n\tconst range = 255;\n\tconst r = v.r / range;\n\tconst g = v.g / range;\n\tconst b = v.b / range;\n\tconst max = Math.max(r, g, b);\n\tconst min = Math.min(r, g, b);\n\tconst l = (max + min) / 2;\n\tlet h, s, d;\n\tif (max !== min) {\n\t\td = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\th = max === r\n\t\t\t? ((g - b) / d) + (g < b ? 6 : 0)\n\t\t\t: max === g\n\t\t\t\t? (b - r) / d + 2\n\t\t\t\t: (r - g) / d + 4;\n\t\th = h * 60 + 0.5;\n\t}\n\treturn [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n\treturn (\n\t\tArray.isArray(a)\n\t\t\t? f(a[0], a[1], a[2])\n\t\t\t: f(a, b, c)\n\t).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n\treturn calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n\treturn calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n\treturn calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n\treturn (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n\tconst m = HUE_RE.exec(str);\n\tlet a = 255;\n\tlet v;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[5] !== v) {\n\t\ta = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n\t}\n\tconst h = hue(+m[2]);\n\tconst p1 = +m[3] / 100;\n\tconst p2 = +m[4] / 100;\n\tif (m[1] === 'hwb') {\n\t\tv = hwb2rgb(h, p1, p2);\n\t} else if (m[1] === 'hsv') {\n\t\tv = hsv2rgb(h, p1, p2);\n\t} else {\n\t\tv = hsl2rgb(h, p1, p2);\n\t}\n\treturn {\n\t\tr: v[0],\n\t\tg: v[1],\n\t\tb: v[2],\n\t\ta: a\n\t};\n}\nfunction rotate(v, deg) {\n\tvar h = rgb2hsl(v);\n\th[0] = hue(h[0] + deg);\n\th = hsl2rgb(h);\n\tv.r = h[0];\n\tv.g = h[1];\n\tv.b = h[2];\n}\nfunction hslString(v) {\n\tif (!v) {\n\t\treturn;\n\t}\n\tconst a = rgb2hsl(v);\n\tconst h = a[0];\n\tconst s = n2p(a[1]);\n\tconst l = n2p(a[2]);\n\treturn v.a < 255\n\t\t? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n\t\t: `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map$1$1 = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n\tconst unpacked = {};\n\tconst keys = Object.keys(names);\n\tconst tkeys = Object.keys(map$1$1);\n\tlet i, j, k, ok, nk;\n\tfor (i = 0; i < keys.length; i++) {\n\t\tok = nk = keys[i];\n\t\tfor (j = 0; j < tkeys.length; j++) {\n\t\t\tk = tkeys[j];\n\t\t\tnk = nk.replace(k, map$1$1[k]);\n\t\t}\n\t\tk = parseInt(names[ok], 16);\n\t\tunpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n\t}\n\treturn unpacked;\n}\nlet names$1;\nfunction nameParse(str) {\n\tif (!names$1) {\n\t\tnames$1 = unpack();\n\t\tnames$1.transparent = [0, 0, 0, 0];\n\t}\n\tconst a = names$1[str.toLowerCase()];\n\treturn a && {\n\t\tr: a[0],\n\t\tg: a[1],\n\t\tb: a[2],\n\t\ta: a.length === 4 ? a[3] : 255\n\t};\n}\nfunction modHSL(v, i, ratio) {\n\tif (v) {\n\t\tlet tmp = rgb2hsl(v);\n\t\ttmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n\t\ttmp = hsl2rgb(tmp);\n\t\tv.r = tmp[0];\n\t\tv.g = tmp[1];\n\t\tv.b = tmp[2];\n\t}\n}\nfunction clone$1(v, proto) {\n\treturn v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n\tvar v = {r: 0, g: 0, b: 0, a: 255};\n\tif (Array.isArray(input)) {\n\t\tif (input.length >= 3) {\n\t\t\tv = {r: input[0], g: input[1], b: input[2], a: 255};\n\t\t\tif (input.length > 3) {\n\t\t\t\tv.a = n2b(input[3]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tv = clone$1(input, {r: 0, g: 0, b: 0, a: 1});\n\t\tv.a = n2b(v.a);\n\t}\n\treturn v;\n}\nfunction functionParse(str) {\n\tif (str.charAt(0) === 'r') {\n\t\treturn rgbParse(str);\n\t}\n\treturn hueParse(str);\n}\nclass Color {\n\tconstructor(input) {\n\t\tif (input instanceof Color) {\n\t\t\treturn input;\n\t\t}\n\t\tconst type = typeof input;\n\t\tlet v;\n\t\tif (type === 'object') {\n\t\t\tv = fromObject(input);\n\t\t} else if (type === 'string') {\n\t\t\tv = hexParse(input) || nameParse(input) || functionParse(input);\n\t\t}\n\t\tthis._rgb = v;\n\t\tthis._valid = !!v;\n\t}\n\tget valid() {\n\t\treturn this._valid;\n\t}\n\tget rgb() {\n\t\tvar v = clone$1(this._rgb);\n\t\tif (v) {\n\t\t\tv.a = b2n(v.a);\n\t\t}\n\t\treturn v;\n\t}\n\tset rgb(obj) {\n\t\tthis._rgb = fromObject(obj);\n\t}\n\trgbString() {\n\t\treturn this._valid ? rgbString(this._rgb) : this._rgb;\n\t}\n\thexString() {\n\t\treturn this._valid ? hexString(this._rgb) : this._rgb;\n\t}\n\thslString() {\n\t\treturn this._valid ? hslString(this._rgb) : this._rgb;\n\t}\n\tmix(color, weight) {\n\t\tconst me = this;\n\t\tif (color) {\n\t\t\tconst c1 = me.rgb;\n\t\t\tconst c2 = color.rgb;\n\t\t\tlet w2;\n\t\t\tconst p = weight === w2 ? 0.5 : weight;\n\t\t\tconst w = 2 * p - 1;\n\t\t\tconst a = c1.a - c2.a;\n\t\t\tconst w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\t\tw2 = 1 - w1;\n\t\t\tc1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n\t\t\tc1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n\t\t\tc1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n\t\t\tc1.a = p * c1.a + (1 - p) * c2.a;\n\t\t\tme.rgb = c1;\n\t\t}\n\t\treturn me;\n\t}\n\tclone() {\n\t\treturn new Color(this.rgb);\n\t}\n\talpha(a) {\n\t\tthis._rgb.a = n2b(a);\n\t\treturn this;\n\t}\n\tclearer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 - ratio;\n\t\treturn this;\n\t}\n\tgreyscale() {\n\t\tconst rgb = this._rgb;\n\t\tconst val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n\t\trgb.r = rgb.g = rgb.b = val;\n\t\treturn this;\n\t}\n\topaquer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 + ratio;\n\t\treturn this;\n\t}\n\tnegate() {\n\t\tconst v = this._rgb;\n\t\tv.r = 255 - v.r;\n\t\tv.g = 255 - v.g;\n\t\tv.b = 255 - v.b;\n\t\treturn this;\n\t}\n\tlighten(ratio) {\n\t\tmodHSL(this._rgb, 2, ratio);\n\t\treturn this;\n\t}\n\tdarken(ratio) {\n\t\tmodHSL(this._rgb, 2, -ratio);\n\t\treturn this;\n\t}\n\tsaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, ratio);\n\t\treturn this;\n\t}\n\tdesaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, -ratio);\n\t\treturn this;\n\t}\n\trotate(deg) {\n\t\trotate(this._rgb, deg);\n\t\treturn this;\n\t}\n}\nfunction index_esm(input) {\n\treturn new Color(input);\n}\n\nconst isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone(source) {\n  if (isArray(source)) {\n    return source.map(clone);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst emptyString = '';\nconst dot = '.';\nfunction indexOfDotOrLength(key, start) {\n  const idx = key.indexOf(dot, start);\n  return idx === -1 ? key.length : idx;\n}\nfunction resolveObjectKey(obj, key) {\n  if (key === emptyString) {\n    return obj;\n  }\n  let pos = 0;\n  let idx = indexOfDotOrLength(key, pos);\n  while (obj && idx > pos) {\n    obj = obj[key.substr(pos, idx - pos)];\n    pos = idx + 1;\n    idx = indexOfDotOrLength(key, pos);\n  }\n  return obj;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\nfunction _isClickEvent(e) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  let type, xOffset, yOffset, size, cornerRadius;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    ctx.arc(x, y, radius, 0, TAU);\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      ctx.rect(x - size, y - size, 2 * size, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(evt, canvas) {\n  const e = evt.native || evt;\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition$1(evt, chart) {\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction getRelativePosition(e, chart) {\n  if ('native' in e) {\n    return {\n      x: e.x,\n      y: e.y\n    };\n  }\n  return getRelativePosition$1(e, chart);\n}\nfunction evaluateAllVisibleItems(chart, handler) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  let index, data, element;\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    ({index, data} = metasets[i]);\n    for (let j = 0, jlen = data.length; j < jlen; ++j) {\n      element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction optimizedEvaluateItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition) {\n  const items = [];\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = _isPointInArea(center, chart.chartArea, chart._minPadding);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition) {\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return [];\n  }\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition);\n}\nfunction getAxisItems(chart, e, options, useFinalPosition) {\n  const position = getRelativePosition(e, chart);\n  const items = [];\n  const axis = options.axis;\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      intersectsItem = true;\n    }\n  });\n  if (options.intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition)\n        : getNearestItems(chart, position, axis, false, useFinalPosition);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition) :\n        getNearestItems(chart, position, axis, false, useFinalPosition);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getIntersectItems(chart, position, axis, useFinalPosition);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);\n    },\n    x(chart, e, options, useFinalPosition) {\n      return getAxisItems(chart, e, {axis: 'x', intersect: options.intersect}, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      return getAxisItems(chart, e, {axis: 'y', intersect: options.intersect}, useFinalPosition);\n    }\n  }\n};\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\nvar helpers = /*#__PURE__*/Object.freeze({\n__proto__: null,\neasingEffects: effects,\ncolor: color,\ngetHoverColor: getHoverColor,\nnoop: noop,\nuid: uid,\nisNullOrUndef: isNullOrUndef,\nisArray: isArray,\nisObject: isObject,\nisFinite: isNumberFinite,\nfiniteOrDefault: finiteOrDefault,\nvalueOrDefault: valueOrDefault,\ntoPercentage: toPercentage,\ntoDimension: toDimension,\ncallback: callback,\neach: each,\n_elementsEqual: _elementsEqual,\nclone: clone,\n_merger: _merger,\nmerge: merge,\nmergeIf: mergeIf,\n_mergerIf: _mergerIf,\n_deprecated: _deprecated,\nresolveObjectKey: resolveObjectKey,\n_capitalize: _capitalize,\ndefined: defined,\nisFunction: isFunction,\nsetsEqual: setsEqual,\n_isClickEvent: _isClickEvent,\ntoFontString: toFontString,\n_measureText: _measureText,\n_longestText: _longestText,\n_alignPixel: _alignPixel,\nclearCanvas: clearCanvas,\ndrawPoint: drawPoint,\n_isPointInArea: _isPointInArea,\nclipArea: clipArea,\nunclipArea: unclipArea,\n_steppedLineTo: _steppedLineTo,\n_bezierCurveTo: _bezierCurveTo,\nrenderText: renderText,\naddRoundedRectPath: addRoundedRectPath,\n_lookup: _lookup,\n_lookupByKey: _lookupByKey,\n_rlookupByKey: _rlookupByKey,\n_filterBetween: _filterBetween,\nlistenArrayEvents: listenArrayEvents,\nunlistenArrayEvents: unlistenArrayEvents,\n_arrayUnique: _arrayUnique,\n_createResolver: _createResolver,\n_attachContext: _attachContext,\n_descriptors: _descriptors,\nsplineCurve: splineCurve,\nsplineCurveMonotone: splineCurveMonotone,\n_updateBezierControlPoints: _updateBezierControlPoints,\n_isDomSupported: _isDomSupported,\n_getParentNode: _getParentNode,\ngetStyle: getStyle,\ngetRelativePosition: getRelativePosition$1,\ngetMaximumSize: getMaximumSize,\nretinaScale: retinaScale,\nsupportsEventListenerOptions: supportsEventListenerOptions,\nreadUsedSize: readUsedSize,\nfontString: fontString,\nrequestAnimFrame: requestAnimFrame,\nthrottled: throttled,\ndebounce: debounce,\n_toLeftRightCenter: _toLeftRightCenter,\n_alignStartEnd: _alignStartEnd,\n_textX: _textX,\n_pointInLine: _pointInLine,\n_steppedInterpolation: _steppedInterpolation,\n_bezierInterpolation: _bezierInterpolation,\nformatNumber: formatNumber,\ntoLineHeight: toLineHeight,\n_readValueToProps: _readValueToProps,\ntoTRBL: toTRBL,\ntoTRBLCorners: toTRBLCorners,\ntoPadding: toPadding,\ntoFont: toFont,\nresolve: resolve,\n_addGrace: _addGrace,\ncreateContext: createContext,\nPI: PI,\nTAU: TAU,\nPITAU: PITAU,\nINFINITY: INFINITY,\nRAD_PER_DEG: RAD_PER_DEG,\nHALF_PI: HALF_PI,\nQUARTER_PI: QUARTER_PI,\nTWO_THIRDS_PI: TWO_THIRDS_PI,\nlog10: log10,\nsign: sign,\nniceNum: niceNum,\n_factorize: _factorize,\nisNumber: isNumber,\nalmostEquals: almostEquals,\nalmostWhole: almostWhole,\n_setMinAndMaxByKey: _setMinAndMaxByKey,\ntoRadians: toRadians,\ntoDegrees: toDegrees,\n_decimalPlaces: _decimalPlaces,\ngetAngleFromPoint: getAngleFromPoint,\ndistanceBetweenPoints: distanceBetweenPoints,\n_angleDiff: _angleDiff,\n_normalizeAngle: _normalizeAngle,\n_angleBetween: _angleBetween,\n_limitValue: _limitValue,\n_int16Range: _int16Range,\n_isBetween: _isBetween,\ngetRtlAdapter: getRtlAdapter,\noverrideTextDirection: overrideTextDirection,\nrestoreTextDirection: restoreTextDirection,\n_boundSegment: _boundSegment,\n_boundSegments: _boundSegments,\n_computeSegments: _computeSegments\n});\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition$1(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nvar platforms = /*#__PURE__*/Object.freeze({\n__proto__: null,\n_detectPlatform: _detectPlatform,\nBasePlatform: BasePlatform,\nBasicPlatform: BasicPlatform,\nDomPlatform: DomPlatform\n});\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = grid.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      if (isHorizontal) {\n        x = pixel;\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n    }\n  }\n  return plugins;\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, plugins, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (let i = 0; i < plugins.length; i++) {\n    const plugin = plugins[i];\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, plugin, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, plugin, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.7.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: _isPointInArea(e, this.chartArea, this._minPadding)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar _adapters = {\n  _date: DateAdapter\n};\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const metasets = iScale.getMatchingVisibleMetas(this._type);\n    const stacked = iScale.options.stacked;\n    const ilen = metasets.length;\n    const stacks = [];\n    let i, item;\n    for (i = 0; i < ilen; ++i) {\n      item = metasets[i];\n      if (!item.controller.options.grouped) {\n        continue;\n      }\n      if (typeof dataIndex !== 'undefined') {\n        const val = item.controller.getParsed(dataIndex)[\n          item.controller._cachedMeta.vScale.axis\n        ];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          continue;\n        }\n      }\n      if (stacked === false || stacks.indexOf(item.stack) === -1 ||\n\t\t\t\t(stacked === undefined && item.stack === undefined)) {\n        stacks.push(item.stack);\n      }\n      if (item.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\nfunction getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const dataset = this.getDataset();\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const dataset = this.getDataset();\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const dataset = this.getDataset();\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass ScatterController extends LineController {\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n  if (outerEnd > 0) {\n    const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n  }\n  const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n  ctx.lineTo(p4.x, p4.y);\n  if (innerEnd > 0) {\n    const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n  }\n  ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n  if (innerStart > 0) {\n    const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n  }\n  const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n  ctx.lineTo(p8.x, p8.y);\n  if (outerStart > 0) {\n    const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle) {\n  const {options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (meta.type !== 'line') {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    if (fill[0] === '-' || fill[0] === '+') {\n      target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n      return false;\n    }\n    return target;\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  let target = null;\n  let horizontal;\n  if (fill === 'start') {\n    target = scale.bottom;\n  } else if (fill === 'end') {\n    target = scale.top;\n  } else if (isObject(fill)) {\n    target = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    target = scale.getBasePixel();\n  }\n  if (isNumberFinite(target)) {\n    horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? target : null,\n      y: horizontal ? null : target\n    };\n  }\n  return null;\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const target = [];\n  const start = options.reverse ? scale.max : scale.min;\n  const end = options.reverse ? scale.min : scale.max;\n  let i, center, value;\n  if (fill === 'start') {\n    value = start;\n  } else if (fill === 'end') {\n    value = end;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  if (options.grid.circular) {\n    center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\nfunction getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return createBoundaryLine(boundary, line);\n}\nfunction createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _clip(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = findSegmentEnd(start, end, points);\n    const bounds = getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nfunction _fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    _clip(ctx, target, area.top);\n    _fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    _clip(ctx, target, area.bottom);\n  }\n  _fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction drawfill(ctx, source, area) {\n  const target = getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nvar plugin_filler = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw) {\n        drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (source) {\n        drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxWidth * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    const args = {\n      tooltip\n    };\n    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n      return;\n    }\n    if (tooltip) {\n      tooltip.draw(chart.ctx);\n    }\n    chart.notifyPlugins('afterTooltipDraw', args);\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: plugin_filler,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new _adapters._date(scaleOpts.adapters.date);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nChart.register(controllers, scales, elements, plugins);\nChart.helpers = {...helpers};\nChart._adapters = _adapters;\nChart.Animation = Animation;\nChart.Animations = Animations;\nChart.animator = animator;\nChart.controllers = registry.controllers.items;\nChart.DatasetController = DatasetController;\nChart.Element = Element;\nChart.elements = elements;\nChart.Interaction = Interaction;\nChart.layouts = layouts;\nChart.platforms = platforms;\nChart.Scale = Scale;\nChart.Ticks = Ticks;\nObject.assign(Chart, controllers, scales, elements, plugins, platforms);\nChart.Chart = Chart;\nif (typeof window !== 'undefined') {\n  window.Chart = Chart;\n}\n\nreturn Chart;\n\n}));\n","import { $ } from \"./utils\";\r\nimport { Chart} from 'chart.js';\r\nimport { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement } from \"./AppManagement\";\r\nimport { SerializeContext } from \"./flowchart/SerializeContext\";\r\n\r\nexport let DE_de = new Intl.NumberFormat('de-DE');\r\nexport const CHART_EACH_INTERVAL = 2;\r\n\r\nexport class ADCExperimentController extends ScreenController {\r\n    private butRecord: HTMLButtonElement;\r\n    private butStop: HTMLButtonElement;\r\n    private butDelete: HTMLButtonElement;\r\n    private tbody: HTMLTableSectionElement;\r\n    private tfirstRow: HTMLTableRowElement;\r\n    private timer: number | undefined;\r\n    private chart: Chart;\r\n    private counter = 10 ^ 6;\r\n    private seconds = 0;\r\n\r\n    private recording = false;\r\n\r\n    public onFirstStart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onRestart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onStop(): void {\r\n        window.clearInterval(this.timer);\r\n        this.butStop.hidden = true;\r\n        this.butRecord.hidden = false;\r\n        this.counter = 10 ^ 6;\r\n    }\r\n    public onCreate() {\r\n        this.resetData();\r\n    }\r\n\r\n    private resetData() {\r\n        this.chart.data!.labels = [];\r\n        this.chart.data!.datasets!.forEach((dataset) => {\r\n            dataset!.data = [];\r\n        });\r\n        this.chart.update();\r\n        this.tbody.innerText = \"\";\r\n        this.seconds = 0;\r\n    }\r\n\r\n    private sendAndReceive() {\r\n\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n        xhr.open(\"GET\", \"/adcexperiment\", true);\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onload = (e) => {\r\n            let Values: number[]=[0,0,0,0];\r\n            let arrayBuffer = xhr.response; // Note: not oReq.responseText\r\n            if (arrayBuffer || arrayBuffer.byteLength == 4 + 4 + 4 + 4) {\r\n                let ctx = new SerializeContext(arrayBuffer);\r\n                Values[0] = ctx.readF32();\r\n                Values[1] = ctx.readF32();\r\n                Values[2] = ctx.readF32();\r\n                Values[3] = ctx.readF32();\r\n            }\r\n            let now = new Date(Date.now());\r\n\r\n            if (this.recording) {\r\n                let tr = $.HtmlAsFirstChild(this.tbody, \"tr\", []);\r\n                for (let i = 0; i < 6; i++) {\r\n                    $.Html(tr, \"td\", [], [], this.tfirstRow.children[i].textContent!);\r\n                }\r\n                if (this.counter >= CHART_EACH_INTERVAL) {\r\n                    if (this.chart.data!.labels!.length > 100) {\r\n                        this.chart.data!.labels?.shift();\r\n                        this.chart.data!.datasets!.forEach((dataset) => {\r\n                            dataset!.data!.shift();\r\n                        });\r\n                    }\r\n                    this.chart.data!.labels!.push(now.toLocaleTimeString(\"de-DE\"));\r\n                    this.chart.data?.datasets![0].data?.push(Values[0]);\r\n                    this.chart.data?.datasets![1].data?.push(Values[1]);\r\n                    this.chart.data?.datasets![2].data?.push(Values[2]);\r\n                    this.chart.data?.datasets![3].data?.push(Values[3]);\r\n                    this.chart.update();\r\n                    this.counter = 0;\r\n                }\r\n                this.counter++;\r\n                this.seconds++;\r\n            }\r\n            this.tfirstRow.children[0].textContent = now.toLocaleTimeString(\"de-DE\");\r\n            this.tfirstRow.children[1].textContent = DE_de.format(this.seconds);\r\n            this.tfirstRow.children[2].textContent = DE_de.format(Values[0]);\r\n            this.tfirstRow.children[3].textContent = DE_de.format(Values[1]);\r\n            this.tfirstRow.children[4].textContent = DE_de.format(Values[2]);\r\n            this.tfirstRow.children[5].textContent = DE_de.format(Values[3]);\r\n        };\r\n        xhr.send();\r\n    }\r\n\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n        this.butRecord = <HTMLButtonElement>document.getElementById(\"adcexperiment_butRecord\")!;\r\n        this.butStop = <HTMLButtonElement>document.getElementById(\"adcexperiment_butStop\")!;\r\n        this.butStop.hidden = true;\r\n        this.butDelete = <HTMLButtonElement>document.getElementById(\"adcexperiment_butDelete\")!;\r\n        this.tbody = <HTMLTableSectionElement>document.getElementById(\"adcexperiment_tabBody\")!;\r\n        this.tfirstRow = <HTMLTableRowElement>document.getElementById(\"adcexperiment_tabFirstRow\")!;\r\n\r\n        let ctx = <HTMLCanvasElement>document.getElementById('adcexperiment_chart')!;\r\n        this.chart = new Chart(ctx,{\r\n            type: 'line',\r\n            data: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: \"Input 0 [V]\",\r\n                        data: [],\r\n                        backgroundColor: \"red\",\r\n                        borderColor: \"red\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Input 1 [V]\",\r\n                        data: [],\r\n                        backgroundColor: \"green\",\r\n                        borderColor: \"green\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Input 2 [V]\",\r\n                        data: [],\r\n                        backgroundColor: \"blue\",\r\n                        borderColor: \"blue\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Input 3 [V]\",\r\n                        data: [],\r\n                        backgroundColor: \"grey\",\r\n                        borderColor: \"grey\",\r\n                        fill: false,\r\n                    },\r\n                ]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: true\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    } \r\n                }\r\n            }\r\n        });\r\n\r\n        this.butStop.onclick = (e) => {\r\n            this.butStop.hidden = true;\r\n            this.butRecord.hidden = false;\r\n            this.recording = false;\r\n        };\r\n\r\n        this.butRecord.onclick = (e) => {\r\n            this.butRecord.hidden = true;\r\n            this.butStop.hidden = false;\r\n            this.recording = true;\r\n        };\r\n\r\n        this.butDelete.onclick = (e) => {\r\n            this.resetData();\r\n        };\r\n    }\r\n}\r\n","import { $ } from \"./utils\";\r\nimport { Chart} from 'chart.js';\r\nimport { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement } from \"./AppManagement\";\r\nimport { SerializeContext } from \"./flowchart/SerializeContext\";\r\n\r\nconst DE_de = new Intl.NumberFormat('de-DE');\r\nconst CHART_EACH_INTERVAL = 2;\r\n\r\nexport class AirspeedExperimentController extends ScreenController {\r\n    private butRecord: HTMLButtonElement;\r\n    private butStop: HTMLButtonElement;\r\n    private butDelete: HTMLButtonElement;\r\n    private tbody: HTMLTableSectionElement;\r\n    private tfirstRow: HTMLTableRowElement;\r\n    private inputSetpointFan: HTMLInputElement;\r\n    private inputSetpointAirspeed: HTMLInputElement;\r\n    private inputServoCL: HTMLInputElement;\r\n    private inputServoOL: HTMLInputElement;\r\n    private inputKP: HTMLInputElement;\r\n    private inputKI: HTMLInputElement;\r\n    private inputKD: HTMLInputElement;\r\n    private timer: number | undefined;\r\n    private chart: Chart;\r\n    private counter = 10 ^ 6;\r\n    private mode: number = 0;\r\n    private seconds = 0;\r\n\r\n    private recording = false;\r\n\r\n    public onFirstStart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onRestart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onStop(): void {\r\n        window.clearInterval(this.timer);\r\n        this.butStop.hidden = true;\r\n        this.butRecord.hidden = false;\r\n        this.counter = 10 ^ 6;\r\n    }\r\n    public onCreate() {\r\n        this.resetData();\r\n\r\n    }\r\n\r\n    private resetData() {\r\n        this.chart.data!.labels = [];\r\n        this.chart.data!.datasets!.forEach((dataset) => {\r\n            dataset!.data = [];\r\n        });\r\n        this.chart.update();\r\n        this.tbody.innerText = \"\";\r\n        this.seconds = 0;\r\n    }\r\n\r\n\r\n    private onModeChange(newMode: number) {\r\n        switch (newMode) {\r\n            case 0:\r\n                document.querySelectorAll('.airspeedexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                document.querySelectorAll('.airspeedexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                break;\r\n            case 1:\r\n                document.querySelectorAll('.airspeedexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                document.querySelectorAll('.airspeedexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"inline-block\";\r\n                });\r\n                break;\r\n            case 2:\r\n                document.querySelectorAll('.airspeedexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"inline-block\";\r\n                });\r\n                document.querySelectorAll('.airspeedexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                break;\r\n        }\r\n        this.mode = newMode;\r\n    }\r\n\r\n    private sendAndReceive() {\r\n        let buffer = new ArrayBuffer(256);\r\n        let ctx = new SerializeContext(buffer);\r\n        ctx.writeU32(this.mode);\r\n        if (this.mode == 0) {\r\n            ctx.writeF32(0);\r\n            ctx.writeF32(0);\r\n        } else if (this.mode == 1) {\r\n            ctx.writeF32(this.inputSetpointFan.valueAsNumber);\r\n            ctx.writeF32(this.inputServoOL.valueAsNumber);\r\n        }\r\n        else {\r\n            ctx.writeF32(this.inputSetpointAirspeed.valueAsNumber);\r\n            ctx.writeF32(this.inputServoCL.valueAsNumber);\r\n        }\r\n        ctx.writeF32(this.inputKP.valueAsNumber);\r\n        ctx.writeF32(this.inputKI.valueAsNumber);\r\n        ctx.writeF32(this.inputKD.valueAsNumber);\r\n\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n        xhr.open(\"PUT\", \"/airspeedexperiment\", true);\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onload = (e) => {\r\n            let SetpointAirspeed: number, Fan: number, Servo: number, ActualAirspeed: number;\r\n            let arrayBuffer = xhr.response; // Note: not oReq.responseText\r\n            if (!arrayBuffer || arrayBuffer.byteLength != 4 + 4 + 4 + 4) {\r\n                console.error(\"! arrayBuffer || arrayBuffer.byteLength!=4+4+4+4\");\r\n                SetpointAirspeed = 0;\r\n                Fan = 0;\r\n                Servo = 0;\r\n                ActualAirspeed = 20 + (-5 + 10 * Math.random());\r\n            }\r\n            else {\r\n                let ctx = new SerializeContext(arrayBuffer);\r\n                SetpointAirspeed = ctx.readF32();\r\n                Fan = ctx.readF32();\r\n                Servo = ctx.readF32();\r\n                ActualAirspeed = ctx.readF32();\r\n            }\r\n            let now = new Date(Date.now());\r\n\r\n            if (this.recording) {\r\n                let tr = $.HtmlAsFirstChild(this.tbody, \"tr\", []);\r\n                for (let i = 0; i < 6; i++) {\r\n                    $.Html(tr, \"td\", [], [], this.tfirstRow.children[i].textContent!);\r\n                }\r\n                if (this.counter >= CHART_EACH_INTERVAL) {\r\n                    if (this.chart.data!.labels!.length > 100) {\r\n                        this.chart.data!.labels?.shift();\r\n                        this.chart.data!.datasets!.forEach((dataset) => {\r\n                            dataset!.data!.shift();\r\n                        });\r\n                    }\r\n                    this.chart.data!.labels!.push(now.toLocaleTimeString(\"de-DE\"));\r\n                    this.chart.data?.datasets![0].data?.push(SetpointAirspeed);\r\n                    this.chart.data?.datasets![1].data?.push(ActualAirspeed);\r\n                    this.chart.data?.datasets![2].data?.push(Fan);\r\n                    this.chart.data?.datasets![3].data?.push(Servo);\r\n                    this.chart.update();\r\n                    this.counter = 0;\r\n                }\r\n                this.counter++;\r\n                this.seconds++;\r\n            }\r\n            this.tfirstRow.children[0].textContent = now.toLocaleTimeString(\"de-DE\");\r\n            this.tfirstRow.children[1].textContent = DE_de.format(this.seconds);\r\n            this.tfirstRow.children[2].textContent = DE_de.format(SetpointAirspeed);\r\n            this.tfirstRow.children[3].textContent = DE_de.format(ActualAirspeed);\r\n            this.tfirstRow.children[4].textContent = DE_de.format(Fan);\r\n            this.tfirstRow.children[5].textContent = DE_de.format(Servo);\r\n        };\r\n        xhr.send(ctx.getResult());\r\n    }\r\n\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n        this.butRecord = <HTMLButtonElement>document.getElementById(\"airspeedexperiment_butRecord\")!;\r\n        this.butStop = <HTMLButtonElement>document.getElementById(\"airspeedexperiment_butStop\")!;\r\n        this.butStop.hidden = true;\r\n        this.butDelete = <HTMLButtonElement>document.getElementById(\"airspeedexperiment_butDelete\")!;\r\n        this.tbody = <HTMLTableSectionElement>document.getElementById(\"airspeedexperiment_tabBody\")!;\r\n        this.tfirstRow = <HTMLTableRowElement>document.getElementById(\"airspeedexperiment_tabFirstRow\")!;\r\n        this.inputSetpointFan = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpSetpointFan\");\r\n        this.inputServoOL = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpFanOL\")!;\r\n        this.inputSetpointAirspeed = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpSetpointAirspeed\");\r\n        this.inputServoCL = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpFanCL\")!;\r\n\r\n        this.inputKP = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpKP\")!;\r\n        this.inputKI = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpKI\")!;\r\n        this.inputKD = <HTMLInputElement>document.getElementById(\"airspeedexperiment_inpKD\")!;\r\n\r\n        this.onModeChange(0);\r\n\r\n        let ctx = <HTMLCanvasElement>document.getElementById('airspeedexperiment_chart')!;\r\n        this.chart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: \"Setpoint Airspeed [m/s]\",\r\n                        data: [],\r\n                        backgroundColor: \"red\",\r\n                        borderColor: \"red\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Actual Airspeed [m/s]\",\r\n                        data: [],\r\n                        backgroundColor: \"green\",\r\n                        borderColor: \"green\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Fan Power [%]\",\r\n                        data: [],\r\n                        backgroundColor: \"blue\",\r\n                        borderColor: \"blue\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Servo Position [deg]\",\r\n                        data: [],\r\n                        backgroundColor: \"grey\",\r\n                        borderColor: \"grey\",\r\n                        fill: false,\r\n                    },\r\n                ]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: true\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    } \r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        document.querySelectorAll('input[name=\"airspeedexperiment_mode\"]').forEach((v, k) => {\r\n            let inp = <HTMLInputElement>v;\r\n            inp.onclick = (e) => {\r\n                let num = parseInt(inp.value);\r\n                if (this.mode != num)\r\n                    this.onModeChange(num);\r\n            };\r\n        });\r\n\r\n        let setBubble = (range: HTMLInputElement, bubble: HTMLOutputElement) => {\r\n            let val = range.valueAsNumber;\r\n            let min = range.min ? parseInt(range.min) : 0;\r\n            let max = range.max ? parseInt(range.max) : 100;\r\n            let newVal = ((val - min) * 100) / (max - min);\r\n            bubble.innerHTML = \"\" + val;\r\n\r\n            // Sorta magic numbers based on size of the native UI thumb\r\n            bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\r\n        };\r\n\r\n        document.querySelectorAll(\".range-wrap.airspeedexperiment\").forEach(wrap => {\r\n            let range = <HTMLInputElement>wrap.querySelector(\"input[type='range']\")!;\r\n            let bubble = <HTMLOutputElement>wrap.querySelector(\"output.bubble\")!;\r\n            range.oninput = (e) => setBubble(range, bubble);\r\n            setBubble(range, bubble);\r\n        });\r\n\r\n\r\n        this.butStop.onclick = (e) => {\r\n            this.butStop.hidden = true;\r\n            this.butRecord.hidden = false;\r\n            this.recording = false;\r\n        };\r\n\r\n        this.butRecord.onclick = (e) => {\r\n            this.butRecord.hidden = true;\r\n            this.butStop.hidden = false;\r\n            this.recording = true;\r\n        };\r\n\r\n        this.butDelete.onclick = (e) => {\r\n            this.resetData();\r\n        };\r\n    }\r\n}\r\n","import { HeaterExperimentController } from \"./HeaterExperimentController\";\r\nimport { ScreenController, ControllerState } from \"./ScreenController\";\r\nimport { DevelopCFCController } from \"./DevelopCFCController\";\r\nimport { DialogController } from \"./DialogController\";\r\nimport { AppManagement } from \"./AppManagement\";\r\nimport { ADCExperimentController } from \"./ADCExperimentController\";\r\nimport { AirspeedExperimentController } from \"./AirspeedExperimentController\";\r\nimport {FFTExperimentController} from \"./FFTExperimentController\";\r\n\r\nclass DashboardController extends ScreenController {\r\n    public onFirstStart(): void { }\r\n    public onRestart(): void { }\r\n    public onStop(): void { }\r\n    public onCreate() { }\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n    }\r\n\r\n}\r\n\r\nclass ReportsController extends ScreenController {\r\n    public onFirstStart(): void { }\r\n    public onRestart(): void { }\r\n    public onStop(): void { }\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n    }\r\n    public onCreate() {\r\n        return;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nclass AppController implements AppManagement {\r\n\r\n    private stateDiv: HTMLDivElement;\r\n    private activeControllerIndex: number;\r\n    private screenControllers: ScreenController[];\r\n    private dialogController:DialogController;\r\n\r\n    public DialogController() { return this.dialogController; };\r\n\r\n\r\n\r\n    constructor() {\r\n        this.stateDiv = <HTMLDivElement>document.getElementById(\"spnConnectionState\")!;\r\n        this.screenControllers = [];\r\n        this.activeControllerIndex = 0;\r\n        this.dialogController=new DialogController(this);\r\n    }\r\n\r\n    private SetApplicationState(state: string) {\r\n        this.stateDiv.innerHTML = state;\r\n\r\n    }\r\n\r\n    private setActiveScreen(newIndex: number) {\r\n        this.screenControllers.forEach((controller, i) => {\r\n            if (i == newIndex) {\r\n                controller.showDIV();\r\n                if (controller.State == ControllerState.CREATED) {\r\n                    controller.onFirstStart();\r\n                    controller.State = ControllerState.STARTED;\r\n                }\r\n                else {\r\n                    controller.onRestart();\r\n                    controller.State = ControllerState.STARTED;\r\n                }\r\n            } else {\r\n                controller.hideDIV();\r\n                if (controller.State == ControllerState.STARTED) {\r\n                    controller.onStop();\r\n                    controller.State = ControllerState.STOPPED;\r\n                }\r\n            }\r\n        });\r\n        this.activeControllerIndex = newIndex;\r\n    }\r\n\r\n    public startup() {\r\n        this.dialogController.init();\r\n        this.screenControllers.push(new DashboardController(this, <HTMLDivElement>document.getElementById(\"screen_dashboard\")));\r\n        this.screenControllers.push(new DevelopCFCController(this, <HTMLDivElement>document.getElementById(\"screen_develop\")));\r\n        this.screenControllers.push(new ReportsController(this, <HTMLDivElement>document.getElementById(\"screen_reports\")));\r\n        this.screenControllers.push(new HeaterExperimentController(this, <HTMLDivElement>document.getElementById(\"screen_heaterexperiment\")));\r\n        this.screenControllers.push(new AirspeedExperimentController(this, <HTMLDivElement>document.getElementById(\"screen_airspeedexperiment\")));\r\n        this.screenControllers.push(new ADCExperimentController(this, <HTMLDivElement>document.getElementById(\"screen_adcexperiment\")));\r\n        this.screenControllers.push(new FFTExperimentController(this, <HTMLDivElement>document.getElementById(\"screen_fftexperiment\")));\r\n        this.screenControllers.forEach((sc) => sc.onCreate());\r\n\r\n        this.setActiveScreen(1);\r\n        let id2index = new Map<string, number>();\r\n        this.screenControllers.forEach((value, index) => { id2index.set(\"show_\" + value.ElementId, index) })\r\n        document.querySelectorAll<HTMLAnchorElement>(\"nav a\").forEach((a: HTMLAnchorElement) => {\r\n            let id = a.id;\r\n            let index = id2index.get(a.id) || 0;\r\n            a.onclick = (e) => this.setActiveScreen(index);\r\n        });\r\n\r\n        /*\r\n        this.SetApplicationState(\"WebSocket is not connected\");\r\n        let websocket = new WebSocket('ws://' + location.hostname + '/w');\r\n        websocket.onopen = e => {\r\n            this.SetApplicationState('WebSocket connection opened');\r\n            document.getElementById(\"test\")!.innerHTML = \"WebSocket is connected!\";\r\n        }\r\n        websocket.onmessage = (evt) => {\r\n            var msg = evt.data;\r\n            let value: string;\r\n            switch (msg.charAt(0)) {\r\n                case 'L':\r\n                    console.log(msg);\r\n                    value = msg.replace(/[^0-9\\.]/g, '');\r\n                    switch (value) {\r\n                        case \"0\": document.getElementById(\"led1\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"1\": document.getElementById(\"led1\")!.style.backgroundColor = \"green\"; break;\r\n                        case \"2\": document.getElementById(\"led2\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"3\": document.getElementById(\"led2\")!.style.backgroundColor = \"green\"; break;\r\n                    }\r\n                    console.log(\"Led = \" + value);\r\n                    break;\r\n                default:\r\n                    let p = JSON.parse(evt.data);\r\n                    document.getElementById(\"td_myName\")!.innerText = p.d.myName;\r\n                    document.getElementById(\"td_temperature\")!.innerText = p.d.temperature;\r\n                    document.getElementById(\"td_humidity\")!.innerText = p.d.humidity;\r\n                    document.getElementById(\"td_heap\")!.innerText = p.info.heap;\r\n                    document.getElementById(\"td_time\")!.innerText = p.info.time;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        websocket.onclose = (e) => {\r\n            console.log('Websocket connection closed due to '+e.reason);\r\n            this.SetApplicationState('Websocket connection closed due to '+e.reason);\r\n        }\r\n\r\n        websocket.onerror = (evt) => {\r\n            console.log('Websocket error: ' + evt.returnValue);\r\n            this.SetApplicationState(\"WebSocket error!\" + evt.returnValue);\r\n        }\r\n\r\n        document.querySelectorAll<HTMLButtonElement>(\"#pButtons button\").forEach((b: HTMLButtonElement) => {\r\n            b.onclick = (e: MouseEvent) => {\r\n                websocket.send(\"L\" + b.dataset.rel);\r\n            };\r\n        });\r\n*/\r\n    }\r\n}\r\n\r\nlet app: AppController;\r\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\r\n    app = new AppController();\r\n    app.startup();\r\n});\r\n\r\n\r\n","import { AppManagement } from \"./AppManagement\";\r\nimport { Flowchart, FlowchartData, FlowchartOptions } from \"./flowchart/Flowchart\";\r\nimport { ScreenController } from \"./ScreenController\";\r\n\r\n\r\nexport class DevelopCFCController extends ScreenController {\r\n    private fc: Flowchart;\r\n    private timer: number | undefined;\r\n    onFirstStart(): void {\r\n        this.timer = window.setInterval(() => { this.fc.triggerDebug(); }, 1000);\r\n        this.fc.onFirstStart();\r\n    }\r\n    public onRestart(): void {\r\n        this.timer = window.setInterval(() => { this.fc.triggerDebug(); }, 1000);\r\n    }\r\n    public onStop(): void {\r\n        window.clearInterval(this.timer);\r\n    }\r\n    public onCreate() { }\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n        let data: FlowchartData = {\r\n            operators: [\r\n                {\r\n                    index: 0,\r\n                    caption: \"RedButton\",\r\n                    globalTypeIndex: 30,\r\n                    posX: 10,\r\n                    posY: 10,\r\n                    configurationData: null,\r\n                },\r\n                {\r\n                    index: 1,\r\n                    caption: \"GreenButton\",\r\n                    globalTypeIndex: 33,\r\n                    posX: 10,\r\n                    posY: 150,\r\n                    configurationData: null,\r\n                },\r\n                {\r\n                    index: 2,\r\n                    caption: \"AND\",\r\n                    globalTypeIndex: 1,\r\n                    posX: 250,\r\n                    posY: 10,\r\n                    configurationData: null,\r\n                },\r\n                {\r\n                    index: 3,\r\n                    caption: \"RedLed\",\r\n                    globalTypeIndex: 46,\r\n                    posX: 500,\r\n                    posY: 10,\r\n                    configurationData: null,\r\n                },\r\n            ],\r\n            links: [\r\n                {\r\n                    color: \"black\",\r\n                    fromOperatorIndex: 0,\r\n                    fromOutput: 0,\r\n                    toOperatorIndex: 2,\r\n                    toInput: 0\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromOperatorIndex: 1,\r\n                    fromOutput: 0,\r\n                    toOperatorIndex: 2,\r\n                    toInput: 1\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromOperatorIndex: 2,\r\n                    fromOutput: 0,\r\n                    toOperatorIndex: 3,\r\n                    toInput: 0\r\n                },\r\n            ]\r\n        };\r\n        let options = new FlowchartOptions();\r\n        options.data = data;\r\n        this.fc = new Flowchart(this.appManagement, this.div, options);\r\n    }\r\n\r\n\r\n}\r\n","import { AppManagement } from \"./AppManagement\";\r\nimport {$} from \"./utils\"\r\nexport class DialogController {\r\n    \r\n\r\n    private dialog = <HTMLDialogElement>document.getElementById('dialog')!;\r\n    private dialogHeading = <HTMLHeadingElement>document.getElementById('dialog-heading')!;\r\n    private dialogBody = <HTMLDivElement>document.getElementById('dialog-body')!;\r\n    private dialogFooter = <HTMLElement>document.getElementById('dialog-footer')!;\r\n\r\n    constructor(private appManagement:AppManagement) {\r\n        \r\n    }\r\n    \r\n    public init() {\r\n\r\n        document.getElementById('dialog-close')!.onclick = (e) => {\r\n            //this.dialog.close(\"cancelled\");\r\n        }\r\n        //this.dialog.oncancel = (e) => {\r\n            //this.dialog.close(\"cancelled\");\r\n        //}\r\n\r\n        // close when clicking on backdrop\r\n        this.dialog.onclick = (event) => {\r\n            if (event.target === this.dialog) {\r\n                //this.dialog.close('cancelled');\r\n            }\r\n        }\r\n    }\r\n\r\n    public showEnterFilenameDialog(priority: number, messageText: string, handler: (filename: string) => void) {\r\n        this.prepareDialog();\r\n        this.dialogHeading.innerText=\"Enter Filename\";\r\n        $.Html(this.dialogBody, \"p\", [], [], messageText);\r\n        let fileInput= <HTMLInputElement>$.Html(this.dialogBody, \"input\", [\"pattern\", \"^[A-Za-z0-9]{1,10}$\"], []);\r\n        this.dialogFooter.innerText=\"\";\r\n        $.Html(this.dialogFooter, \"button\", [], [], \"OK\").onclick=(e)=>{\r\n            //this.dialog.close('OK');\r\n            if(handler!=null) handler(fileInput.value);\r\n        };\r\n       // this.dialog.showModal();\r\n    }\r\n\r\n    public showOKDialog(priority: number, messageText:string, handler: ((a:string)=>any)|null) {\r\n        this.prepareDialog();\r\n        this.dialogHeading.innerText=\"Message\";\r\n        this.dialogBody.innerText=messageText;\r\n        this.dialogFooter.innerText=\"\";\r\n        $.Html(this.dialogFooter, \"button\", [\"type\", \"button\"], [], \"OK\").onclick=(e)=>{\r\n            //this.dialog.close('cancelled');\r\n            if(handler!=null) handler(\"OK\");\r\n        };\r\n        //this.dialog.showModal();\r\n    }\r\n\r\n    private prepareDialog()\r\n    {\r\n        this.dialogHeading.innerText=\"\";\r\n        this.dialogBody.innerText=\"\";\r\n        this.dialogFooter.innerText=\"\";\r\n    }\r\n\r\n    public showFilelist(priority: number, files:string[], openhandler: (filename:string)=>any, deletehandler: (filename:string)=>any) {\r\n\r\n        this.prepareDialog();\r\n        this.dialogHeading.innerText=\"Please select a file to load\"\r\n        $.Html(this.dialogFooter, \"button\", [\"type\", \"button\"], [], \"Cancel\").onclick=(e)=>{\r\n            //this.dialog.close(\"cancelled\");\r\n        };\r\n        let table = <HTMLTableElement>$.Html(this.dialogBody, \"table\", [], []);\r\n        let thead = <HTMLTableSectionElement>$.Html(table, \"thead\", [],[]);\r\n        let tr_head = $.Html(thead, \"tr\", [], []);\r\n        $.Html(tr_head, \"th\", [], [], \"File Name\");\r\n        $.Html(tr_head, \"th\", [], [], \"File Operation\");\r\n        let tbody= <HTMLTableSectionElement>$.Html(table, \"tbody\", [],[]);\r\n        for(let filename of files){\r\n            if(!filename.endsWith(\".json\")) continue;\r\n            filename=filename.substring(0, filename.length-5);\r\n            let tr = $.Html(tbody, \"tr\", [], []);\r\n            $.Html(tr, \"td\", [], [], filename);\r\n            let operationTd= $.Html(tr, \"td\", [], []);\r\n            let openButton = $.Html(operationTd, \"button\", [\"type\", \"button\"], []);\r\n            $.SvgIcon(openButton, \"folder-open\");\r\n            openButton.onclick=(e)=>{\r\n                //this.dialog.close(\"opened\");\r\n                openhandler(filename);\r\n                \r\n            };\r\n            let deleteButton=$.Html(operationTd, \"button\", [\"type\", \"button\"], [], );\r\n            $.SvgIcon(deleteButton, \"bin2\");\r\n            deleteButton.onclick=(e)=>{\r\n                //this.dialog.close(\"deleted\");\r\n                deletehandler(filename);\r\n            }\r\n        };\r\n        //this.dialog.showModal();\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}","import { $ } from \"./utils\";\r\nimport { Chart, ChartDataset} from 'chart.js';\r\nimport { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement } from \"./AppManagement\";\r\nimport { SerializeContext } from \"./flowchart/SerializeContext\";\r\n//!!!Applied some adoptions on lower numbers to avoid strange rounding effects\r\nconst  FREQUENCIES:number[]=[11,21,31,42,53,64,75,97,118,139,161,183,205,227,258,291,323,355,388,431,474,517,560,614,668,721,786,851,915,991,1066,1152,1238,1335,1443,1550,1669,1798,1938,2089,2239,2401,2584,2778,2982,3198,3435,3682,3951,4231,4533,4856,5200,5566,5965,6385,6837,7321,7838,8398,8990,9625,10304,11025];\r\nconst INTERVAL=2000;\r\nconst ZEROS = Array.from(Array(64).keys());\r\n\r\nexport class FFTExperimentController extends ScreenController {\r\n    private butRecord: HTMLButtonElement;\r\n    private butStop: HTMLButtonElement;\r\n    private butSave: HTMLButtonElement;\r\n    private butDelete: HTMLButtonElement;\r\n    private inputFan: HTMLInputElement;\r\n    private tbody: HTMLTableSectionElement;\r\n    private timer: number | undefined;\r\n    private chart: Chart;\r\n    private COLORS = [\r\n        '#4dc9f6',\r\n        '#f67019',\r\n        '#f53794',\r\n        '#537bc4',\r\n        '#acc236',\r\n        '#166a8f',\r\n        '#00a950',\r\n        '#58595b',\r\n        '#8549ba'\r\n      ];\r\n\r\n    private recording = false;\r\n   \r\n\r\n    public onFirstStart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, INTERVAL);\r\n    }\r\n    public onRestart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, INTERVAL);\r\n    }\r\n    public onStop(): void {\r\n        window.clearInterval(this.timer);\r\n        this.butStop.hidden = true;\r\n        this.butRecord.hidden = false;\r\n    }\r\n    public onCreate() {\r\n        //this.resetData();\r\n    }\r\n\r\n    private resetData() {\r\n        this.chart.data!.labels = [];\r\n        this.chart.data!.datasets!.forEach((dataset) => {\r\n            dataset!.data = [];\r\n        });\r\n        this.chart.update();\r\n        this.tbody.innerText = \"\";\r\n    }\r\n\r\n    private color(index:number) {\r\n        return this.COLORS[index % this.COLORS.length];\r\n    }\r\n      \r\n\r\n    private sendAndReceive() {\r\n        let buffer = new ArrayBuffer(256);\r\n        let ctx = new SerializeContext(buffer);\r\n        ctx.writeF32(this.inputFan.valueAsNumber);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n        ctx.writeF32(0);\r\n\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n        xhr.open(\"PUT\", \"/fftexperiment\", true);\r\n        xhr.responseType = \"arraybuffer\";\r\n        \r\n        xhr.onload = (e) => {\r\n            let data:number[] = [];\r\n            let arrayBuffer = xhr.response; // Note: not oReq.responseText\r\n            if (!arrayBuffer || arrayBuffer.byteLength != 256) {\r\n                console.error(\"!arrayBuffer || arrayBuffer.byteLength != 256 -->providing fake data\");\r\n                for(let i =0;i<64;i++){\r\n                    data.push(5 + 5 * Math.random());\r\n                }\r\n\r\n            }\r\n            else {\r\n                let ctx = new SerializeContext(arrayBuffer);\r\n                for(let i =0;i<64;i++){\r\n                    data.push(Math.log10(ctx.readF32()));\r\n                }\r\n            }\r\n            if (this.recording) {\r\n                this.chart.data.datasets[0].data=data;\r\n                this.chart.update();\r\n            }\r\n        };\r\n        xhr.send(ctx.getResult());\r\n    }\r\n\r\n\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n        this.butRecord = <HTMLButtonElement>document.getElementById(\"fftexperiment_butRecord\")!;\r\n        this.butStop = <HTMLButtonElement>document.getElementById(\"fftexperiment_butStop\")!;\r\n        this.butSave = <HTMLButtonElement>document.getElementById(\"fftexperiment_butSave\")!;\r\n        this.butDelete = <HTMLButtonElement>document.getElementById(\"fftexperiment_butDelete\")!;\r\n        this.inputFan = <HTMLInputElement>document.getElementById(\"fftexperiment_inpFan\")!;\r\n        this.butStop.hidden = true;\r\n        this.tbody = <HTMLTableSectionElement>document.getElementById(\"adcexperiment_tabBody\")!;\r\n       \r\n\r\n        let ctx = <HTMLCanvasElement>document.getElementById('fftexperiment_chart')!;\r\n        this.chart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: FREQUENCIES,\r\n                datasets: []\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: true\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        max:10\r\n                    } \r\n                }\r\n            }\r\n        });\r\n        this.chart.update();\r\n        let setBubble = (range: HTMLInputElement, bubble: HTMLOutputElement) => {\r\n            let val = range.valueAsNumber;\r\n            let min = range.min ? parseInt(range.min) : 0;\r\n            let max = range.max ? parseInt(range.max) : 100;\r\n            let newVal = ((val - min) * 100) / (max - min);\r\n            bubble.innerHTML = \"\" + val;\r\n\r\n            // Sorta magic numbers based on size of the native UI thumb\r\n            bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\r\n        };\r\n\r\n        document.querySelectorAll(\".range-wrap.fftexperiment\").forEach(wrap => {\r\n            let range = <HTMLInputElement>wrap.querySelector(\"input[type='range']\")!;\r\n            let bubble = <HTMLOutputElement>wrap.querySelector(\"output.bubble\")!;\r\n            range.oninput = (e) => setBubble(range, bubble);\r\n            setBubble(range, bubble);\r\n        });\r\n\r\n        this.butStop.onclick = () => {\r\n            this.butStop.hidden = true;\r\n            this.butRecord.hidden = false;\r\n            this.recording = false;\r\n            this.chart.data.datasets.shift();\r\n            this.chart.update();\r\n        };\r\n\r\n        this.butRecord.onclick = () => {\r\n            this.butRecord.hidden = true;\r\n            this.butStop.hidden = false;\r\n            this.chart.data.datasets.unshift({\r\n                label: \"Magnitudes\",\r\n                data: ZEROS,\r\n                borderColor: this.color(0),\r\n                backgroundColor: this.color(0),\r\n            });\r\n            this.recording = true;\r\n            this.chart.update();\r\n        };\r\n        this.butSave.onclick = ()=>{\r\n            let now = new Date(Date.now());\r\n            let newDataset:ChartDataset={\r\n                label: \"Magnitudes saved \"+now.toLocaleTimeString(\"de-DE\"),\r\n                data: this.chart.data.datasets[0].data,\r\n                borderColor: this.color(this.chart.data.datasets.length),\r\n                backgroundColor: this.color(this.chart.data.datasets.length),\r\n            };\r\n            this.chart.data.datasets.splice(1,0,newDataset);\r\n            this.chart.update();\r\n        }\r\n        this.butDelete.onclick=()=>{\r\n            if(this.chart.data.datasets.length<2) return;\r\n            this.chart.data.datasets.pop();\r\n            this.chart.update();\r\n        }\r\n    }\r\n}\r\n","import { $ } from \"./utils\";\r\nimport { Chart} from 'chart.js';\r\nimport { ScreenController } from \"./ScreenController\";\r\nimport { AppManagement } from \"./AppManagement\";\r\nimport { SerializeContext } from \"./flowchart/SerializeContext\";\r\n\r\nexport let DE_de = new Intl.NumberFormat('de-DE');\r\nexport const CHART_EACH_INTERVAL = 2;\r\n\r\nexport class HeaterExperimentController extends ScreenController {\r\n    private butRecord: HTMLButtonElement;\r\n    private butStop: HTMLButtonElement;\r\n    private butDelete: HTMLButtonElement;\r\n    private tbody: HTMLTableSectionElement;\r\n    private tfirstRow: HTMLTableRowElement;\r\n    private inputSetpointHeater: HTMLInputElement;\r\n    private inputSetpointTemperature: HTMLInputElement;\r\n    private inputFanCL: HTMLInputElement;\r\n    private inputFanOL: HTMLInputElement;\r\n    private inputKP: HTMLInputElement;\r\n    private inputTN: HTMLInputElement;\r\n    private inputTV: HTMLInputElement;\r\n    private timer: number | undefined;\r\n    private chart: Chart;\r\n\r\n    private counter = 10 ^ 6;\r\n    private mode: number = 0;\r\n    private seconds = 0;\r\n\r\n    private recording = false;\r\n\r\n    public onFirstStart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onRestart(): void {\r\n        this.timer = window.setInterval(() => { this.sendAndReceive(); }, 1000);\r\n    }\r\n    public onStop(): void {\r\n        window.clearInterval(this.timer);\r\n        this.butStop.hidden = true;\r\n        this.butRecord.hidden = false;\r\n        this.counter = 10 ^ 6;\r\n    }\r\n    public onCreate() {\r\n        this.resetData();\r\n\r\n    }\r\n\r\n    private resetData() {\r\n        this.chart.data!.labels = [];\r\n        this.chart.data!.datasets!.forEach((dataset) => {\r\n            dataset!.data = [];\r\n        });\r\n        this.chart.update();\r\n        this.tbody.innerText = \"\";\r\n        this.seconds = 0;\r\n    }\r\n\r\n\r\n    private onModeChange(newMode: number) {\r\n        switch (newMode) {\r\n            case 0:\r\n                document.querySelectorAll('.heaterexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                document.querySelectorAll('.heaterexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                break;\r\n            case 1:\r\n                document.querySelectorAll('.heaterexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                document.querySelectorAll('.heaterexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"inline-block\";\r\n                });\r\n                break;\r\n            case 2:\r\n                document.querySelectorAll('.heaterexperiment_closedloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"inline-block\";\r\n                });\r\n                document.querySelectorAll('.heaterexperiment_openloopctrl').forEach((v, k) => {\r\n                    (<HTMLElement>v).style.display = \"none\";\r\n                });\r\n                break;\r\n        }\r\n        this.mode = newMode;\r\n    }\r\n\r\n    private sendAndReceive() {\r\n        let buffer = new ArrayBuffer(256);\r\n        let ctx = new SerializeContext(buffer);\r\n        ctx.writeU32(this.mode);\r\n        if (this.mode == 0) {\r\n            ctx.writeF32(0);\r\n            ctx.writeF32(0);\r\n        } else if (this.mode == 1) {\r\n            ctx.writeF32(this.inputSetpointHeater.valueAsNumber);\r\n            ctx.writeF32(this.inputFanOL.valueAsNumber);\r\n        }\r\n        else {\r\n            ctx.writeF32(this.inputSetpointTemperature.valueAsNumber);\r\n            ctx.writeF32(this.inputFanCL.valueAsNumber);\r\n        }\r\n        ctx.writeF32(this.inputKP.valueAsNumber);\r\n        ctx.writeF32(this.inputTN.valueAsNumber);\r\n        ctx.writeF32(this.inputTV.valueAsNumber);\r\n\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n        xhr.open(\"PUT\", \"/heaterexperiment\", true);\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onload = (e) => {\r\n            let SetpointTemperature: number, Heater: number, Fan: number, ActualTemperature: number;\r\n            let arrayBuffer = xhr.response; // Note: not oReq.responseText\r\n            if (!arrayBuffer || arrayBuffer.byteLength != 4 + 4 + 4 + 4) {\r\n                console.error(\"! arrayBuffer || arrayBuffer.byteLength!=4+4+4+4\");\r\n                SetpointTemperature = 0;\r\n                Heater = 0;\r\n                Fan = 0;\r\n                ActualTemperature = 20 + (-5 + 10 * Math.random());\r\n            }\r\n            else {\r\n                let ctx = new SerializeContext(arrayBuffer);\r\n                SetpointTemperature = ctx.readF32();\r\n                Heater = ctx.readF32();\r\n                Fan = ctx.readF32();\r\n                ActualTemperature = ctx.readF32();\r\n            }\r\n            let now = new Date(Date.now());\r\n\r\n            if (this.recording) {\r\n                let tr = $.HtmlAsFirstChild(this.tbody, \"tr\", []);\r\n                for (let i = 0; i < 6; i++) {\r\n                    $.Html(tr, \"td\", [], [], this.tfirstRow.children[i].textContent!);\r\n                }\r\n                if (this.counter >= CHART_EACH_INTERVAL) {\r\n                    if (this.chart.data!.labels!.length > 100) {\r\n                        this.chart.data!.labels?.shift();\r\n                        this.chart.data!.datasets!.forEach((dataset) => {\r\n                            dataset!.data!.shift();\r\n                        });\r\n                    }\r\n                    this.chart.data!.labels!.push(now.toLocaleTimeString(\"de-DE\"));\r\n                    this.chart.data?.datasets![0].data?.push(SetpointTemperature);\r\n                    this.chart.data?.datasets![1].data?.push(ActualTemperature);\r\n                    this.chart.data?.datasets![2].data?.push(Heater);\r\n                    this.chart.data?.datasets![3].data?.push(Fan);\r\n                    //this.setpointTemperatureValues.push(SetpointTemperature)\r\n                    //this.heaterValues.push(Heater);\r\n                    //this.fanValues.push(Fan);\r\n                    //this.actualTemperatureValues.push(ActualTemperature);\r\n                    this.chart.update();\r\n                    //FIXME this.chartData = {labels:this.dateValues, series: [this.setpointTemperatureValues, this.actualTemperatureValues, this.heaterValues, this.fanValues,],};\r\n                    //FIXME this.chart.update(this.chartData);\r\n                    this.counter = 0;\r\n                }\r\n                this.counter++;\r\n                this.seconds++;\r\n            }\r\n\r\n\r\n            this.tfirstRow.children[0].textContent = now.toLocaleTimeString(\"de-DE\");\r\n            this.tfirstRow.children[1].textContent = DE_de.format(this.seconds);\r\n            this.tfirstRow.children[2].textContent = DE_de.format(SetpointTemperature);\r\n            this.tfirstRow.children[3].textContent = DE_de.format(ActualTemperature);\r\n            this.tfirstRow.children[4].textContent = DE_de.format(Heater);\r\n            this.tfirstRow.children[5].textContent = DE_de.format(Fan);\r\n\r\n\r\n\r\n        };\r\n        xhr.send(ctx.getResult());\r\n    }\r\n\r\n    constructor(appManagement:AppManagement, div: HTMLDivElement) {\r\n        super(appManagement, div);\r\n        this.butRecord = <HTMLButtonElement>document.getElementById(\"heaterexperiment_butRecord\")!;\r\n        this.butStop = <HTMLButtonElement>document.getElementById(\"heaterexperiment_butStop\")!;\r\n        this.butStop.hidden = true;\r\n        this.butDelete = <HTMLButtonElement>document.getElementById(\"heaterexperiment_butDelete\")!;\r\n        this.tbody = <HTMLTableSectionElement>document.getElementById(\"heaterexperiment_tabBody\")!;\r\n        this.tfirstRow = <HTMLTableRowElement>document.getElementById(\"heaterexperiment_tabFirstRow\")!;\r\n        this.inputSetpointHeater = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpSetpointHeater\");\r\n        this.inputFanOL = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpFanOL\")!;\r\n        this.inputSetpointTemperature = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpSetpointTemperature\");\r\n        this.inputFanCL = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpFanCL\")!;\r\n\r\n        this.inputKP = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpKP\")!;\r\n        this.inputTN = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpTN\")!;\r\n        this.inputTV = <HTMLInputElement>document.getElementById(\"heaterexperiment_inpTV\")!;\r\n\r\n        this.onModeChange(0);\r\n\r\n        let ctx = <HTMLCanvasElement>document.getElementById('heaterexperiment_chart')!;\r\n        this.chart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: \"Setpoint Temperature [°C]\",\r\n                        data: [],\r\n                        backgroundColor: \"red\",\r\n                        borderColor: \"red\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Actual Temperature [°C]\",\r\n                        data: [],\r\n                        backgroundColor: \"green\",\r\n                        borderColor: \"green\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Heater Power [%]\",\r\n                        data: [],\r\n                        backgroundColor: \"blue\",\r\n                        borderColor: \"blue\",\r\n                        fill: false,\r\n                    },\r\n                    {\r\n                        label: \"Fan Power [%]\",\r\n                        data: [],\r\n                        backgroundColor: \"grey\",\r\n                        borderColor: \"grey\",\r\n                        fill: false,\r\n                    },\r\n                ]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'nearest',\r\n                    intersect: true\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    } \r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        document.querySelectorAll('input[name=\"heaterexperiment_mode\"]').forEach((v, k) => {\r\n            let inp = <HTMLInputElement>v;\r\n            inp.onclick = (e) => {\r\n                let num = parseInt(inp.value);\r\n                if (this.mode != num)\r\n                    this.onModeChange(num);\r\n            };\r\n        });\r\n\r\n        let setBubble = (range: HTMLInputElement, bubble: HTMLOutputElement) => {\r\n            let val = range.valueAsNumber;\r\n            let min = range.min ? parseInt(range.min) : 0;\r\n            let max = range.max ? parseInt(range.max) : 100;\r\n            let newVal = ((val - min) * 100) / (max - min);\r\n            bubble.innerHTML = \"\" + val;\r\n\r\n            // Sorta magic numbers based on size of the native UI thumb\r\n            bubble.style.left = `calc(${newVal}% + (${8 - newVal * 0.15}px))`;\r\n        };\r\n\r\n        document.querySelectorAll(\".range-wrap.heaterexperiment\").forEach(wrap => {\r\n            let range = <HTMLInputElement>wrap.querySelector(\"input[type='range']\")!;\r\n            let bubble = <HTMLOutputElement>wrap.querySelector(\"output.bubble\")!;\r\n            range.oninput = (e) => setBubble(range, bubble);\r\n            setBubble(range, bubble);\r\n        });\r\n\r\n\r\n        this.butStop.onclick = (e) => {\r\n            this.butStop.hidden = true;\r\n            this.butRecord.hidden = false;\r\n            this.recording = false;\r\n        };\r\n\r\n        this.butRecord.onclick = (e) => {\r\n            this.butRecord.hidden = true;\r\n            this.butStop.hidden = false;\r\n            this.recording = true;\r\n        };\r\n\r\n        this.butDelete.onclick = (e) => {\r\n            this.resetData();\r\n        };\r\n    }\r\n}\r\n","import { AppManagement } from \"./AppManagement\";\r\n\r\nexport enum ControllerState {\r\n    CREATED,\r\n    STARTED,\r\n    STOPPED,\r\n}\r\n\r\nexport abstract class ScreenController {\r\n    private state: ControllerState;\r\n    constructor(protected appManagement:AppManagement, protected div: HTMLDivElement) {\r\n        this.hideDIV();\r\n        this.state = ControllerState.CREATED;\r\n    }\r\n    get ElementId() { return this.div.id; }\r\n    get State() { return this.state; }\r\n    set State(value: ControllerState) { this.state = value; }\r\n    abstract onCreate(): void;\r\n    abstract onFirstStart(): void;\r\n    abstract onRestart(): void;\r\n    abstract onStop(): void;\r\n    public showDIV() {\r\n        this.div.style.display = \"block\";\r\n    }\r\n    public hideDIV() {\r\n        this.div.style.display = \"none\";\r\n    }\r\n}\r\n","import { ConnectorType, FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { FlowchartCompiler, HashAndBufAndMaps, SortedOperatorsAndMaps } from \"./FlowchartCompiler\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport { FlowchartOperator, PositionType, TypeInfo } from \"./FlowchartOperator\";\r\nimport * as operatorimpl from \"./FlowchartOperatorImpl\";\r\nimport { NodeWrapper, TopologicalSortDFS } from \"./TopologicalSorfDFS\";\r\nimport { Utils, $, KeyValueTuple } from \"../utils\";\r\nimport { AppManagement } from \"../AppManagement\";\r\nimport { SerializeContext } from \"./SerializeContext\";\r\nimport { SimulationManager } from \"./SimulationManager\";\r\n\r\nexport class FlowchartOptions {\r\n    canUserEditLinks: boolean = true;\r\n    canUserMoveOperators: boolean = true;\r\n    data?: FlowchartData = undefined;\r\n    distanceFromArrow: number = 3;\r\n    defaultOperatorClass: string = 'flowchart-default-operator';\r\n    defaultLinkColor: string = '#3366ff';\r\n    defaultSelectedLinkColor: string = 'black';\r\n    linkWidth: number = 10;\r\n    grid: number = 10;\r\n    multipleLinksOnOutput: boolean = true;\r\n    multipleLinksOnInput: boolean = false;\r\n    linkVerticalDecal: number = 0;\r\n    onOperatorSelect?: (operatorId: string) => boolean;\r\n    onOperatorUnselect?: () => boolean;\r\n    onOperatorMouseOver?: (operatorId: string) => boolean;\r\n    onOperatorMouseOut?: (operatorId: string) => boolean;\r\n    onLinkSelect?: (link: FlowchartLink) => boolean;\r\n    onLinkUnselect?: (link: FlowchartLink) => boolean;\r\n    onOperatorCreate?: (operatorId: string, operatorData: any, fullElement: boolean) => boolean;\r\n    onLinkCreate?: (linkId: string, linkData: any) => boolean;\r\n    onOperatorDelete?: (operatorId: string) => boolean;\r\n    onLinkDelete?: (linkId: string, forced: boolean) => boolean;\r\n    onOperatorMoved?: (operatorId: string, position: number) => void;\r\n    onAfterChange?: (changeType: any) => void;\r\n}\r\n\r\nexport interface FlowchartData {\r\n    operators: OperatorData[];\r\n    links: LinkData[];\r\n}\r\n\r\nexport interface OperatorData {\r\n    globalTypeIndex: number;\r\n    caption: string;\r\n    index: number;\r\n    posX: number;\r\n    posY: number;\r\n    configurationData: KeyValueTuple[] | null;\r\n}\r\n\r\n\r\n\r\nexport interface LinkData {\r\n    color: string;\r\n    fromOperatorIndex: number;\r\n    fromOutput: number;\r\n    toOperatorIndex: number;\r\n    toInput: number;\r\n}\r\n\r\nexport class Flowchart {\r\n    \r\n    private operatorRegistry:operatorimpl.OperatorRegistry;\r\n    private simulationManager?:SimulationManager|null;\r\n    private operators = new Map<number, FlowchartOperator>();\r\n    private links = new Map<number, FlowchartLink>();\r\n    public static readonly DATATYPE2COLOR = new Map([[ConnectorType.BOOLEAN, \"RED\"], [ConnectorType.COLOR, \"GREEN\"], [ConnectorType.FLOAT, \"BLUE\"], [ConnectorType.INTEGER, \"YELLOW\"], [ConnectorType.COLOR, \"PURPLE\"]]);\r\n    //Muss beim Löschen+Erzeugen von Operatoren+Links und bei Speichern von Properties zurückgesetzt werden\r\n    private currentDebugInfo:HashAndBufAndMaps|null=null;\r\n    private lastOutputConnectorClicked: FlowchartOutputConnector | null = null;\r\n    private selectedOperator: FlowchartOperator | null = null;\r\n    private selectedLink: FlowchartLink | null = null;\r\n    get SelectedLink() { return this.selectedLink };\r\n    get Options() { return this.options; }\r\n    \r\n    private positionRatio: number = 1;\r\n    get PositionRatio() { return this.positionRatio; }\r\n\r\n    private flowchartContainerSvgSvg: SVGSVGElement;\r\n    get Element() { return this.flowchartContainerSvgSvg; }\r\n    private linksLayer: SVGGElement;\r\n    get LinkLayer() { return this.linksLayer; }\r\n    private operatorsLayer: SVGGElement;\r\n    get OperatorsLayer() { return this.operatorsLayer; }\r\n    private operatorLibDiv: HTMLDivElement;\r\n    get ToolsLayer() { return this.operatorLibDiv; }\r\n    private tempLayer: SVGGElement;\r\n    private temporaryLink: SVGLineElement;\r\n    private temporaryLinkSnapped = false;\r\n    private propertyGridHtmlDiv: HTMLDivElement;\r\n\r\n    private markerArrow: SVGPathElement;\r\n    private markerCircle: SVGCircleElement;\r\n\r\n    public triggerDebug() {\r\n        if(this.currentDebugInfo==null) return;\r\n\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.onerror = (e) => { console.log(\"Fehler beim XMLHttpRequest!\"); };\r\n        xhr.open(\"GET\", \"/fbd\", true);\r\n        xhr.responseType = \"arraybuffer\";\r\n        xhr.onload = (e) => {\r\n            if(this.currentDebugInfo==null) return;\r\n            \r\n            let arrayBuffer = xhr.response; // Note: not oReq.responseText\r\n            if (!arrayBuffer || arrayBuffer.byteLength <=16) {\r\n                console.info(\"! arrayBuffer || arrayBuffer.byteLength<16\");\r\n                this.currentDebugInfo=null;\r\n                return;\r\n            }\r\n            let ctx = new SerializeContext(arrayBuffer);\r\n            let hash = ctx.readU32();\r\n            if(hash!=this.currentDebugInfo.hash){\r\n                console.info(\"hash!=this.currentDebugInfo.hash\");\r\n                this.currentDebugInfo=null;\r\n                return;\r\n            }\r\n            let binaryCount = ctx.readU32();\r\n            for(let adressOffset=0;adressOffset<binaryCount;adressOffset++)\r\n            {\r\n                let value = ctx.readU32();\r\n                if(adressOffset<2) continue;\r\n                let connectorType=ConnectorType.BOOLEAN\r\n                let map = this.currentDebugInfo.typeIndex2adressOffset2ListOfLinks.get(connectorType)!;\r\n                let linksToChange = map.get(adressOffset);\r\n                if(linksToChange===undefined){\r\n                    console.error(`linksToColorize===undefined for connectorType ${connectorType} addressOffset ${adressOffset} and value ${value}`);\r\n                    continue;\r\n                }\r\n                linksToChange.forEach((e)=>{\r\n                    e.SetColor(value==1?\"red\":\"grey\");\r\n                    e.SetCaption(\"\"+value);\r\n                });\r\n            }\r\n\r\n            let integerCount = ctx.readU32();\r\n            for(let adressOffset=0;adressOffset<integerCount;adressOffset++)\r\n            {\r\n                let value = ctx.readS32();\r\n                if(adressOffset<2) continue;\r\n                let connectorType=ConnectorType.INTEGER\r\n                let map = this.currentDebugInfo.typeIndex2adressOffset2ListOfLinks.get(connectorType)!;\r\n                let linksToChange = map.get(adressOffset);\r\n                if(linksToChange===undefined){\r\n                    console.error(`linksToColorize===undefined for connectorType ${connectorType} addressOffset ${adressOffset} and value ${value}`);\r\n                    continue;\r\n                }\r\n                linksToChange.forEach((e)=>{\r\n                    e.SetCaption(\"\"+value);\r\n                });\r\n            }\r\n\r\n            let floatsCount = ctx.readU32();\r\n            for(let adressOffset=0;adressOffset<floatsCount;adressOffset++)\r\n            {\r\n                let value = ctx.readF32();\r\n                if(adressOffset<2) continue;\r\n                let connectorType=ConnectorType.FLOAT\r\n                let map = this.currentDebugInfo.typeIndex2adressOffset2ListOfLinks.get(connectorType)!;\r\n                let linksToChange = map.get(adressOffset);\r\n                if(linksToChange===undefined){\r\n                    console.error(`linksToColorize===undefined for connectorType ${connectorType} addressOffset ${adressOffset} and value ${value}`);\r\n                    continue;\r\n                }\r\n                linksToChange.forEach((e)=>{\r\n                    e.SetCaption(\"\"+value);\r\n                });\r\n            }\r\n\r\n            let colorsCount = ctx.readU32();\r\n            for(let adressOffset=0;adressOffset<colorsCount;adressOffset++)\r\n            {\r\n                let value = ctx.readU32();\r\n                if(adressOffset<2) continue;\r\n                let connectorType=ConnectorType.COLOR\r\n                let map = this.currentDebugInfo.typeIndex2adressOffset2ListOfLinks.get(connectorType)!;\r\n                let linksToChange = map.get(adressOffset);\r\n                if(linksToChange===undefined){\r\n                    console.error(`linksToColorize===undefined for connectorType ${connectorType} addressOffset ${adressOffset} and value ${value}`);\r\n                    continue;\r\n                }\r\n                linksToChange.forEach((e)=>{\r\n                    e.SetCaption(\"\"+value);\r\n                    e.SetColor($.ColorNumColor2ColorDomString(value));\r\n                });\r\n            }\r\n        }\r\n        xhr.send();\r\n    }\r\n\r\n    public _notifyGlobalMousemoveWithLink(e: MouseEvent) {\r\n        if (this.lastOutputConnectorClicked != null && !this.temporaryLinkSnapped) {\r\n            let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n            this.temporaryLink.setAttribute('x2', \"\" + end.x);\r\n            this.temporaryLink.setAttribute('y2', \"\" + end.y);\r\n        }\r\n    }\r\n\r\n    public _notifyGlobalMouseupWithLink(e: MouseEvent) {\r\n        this.unsetTemporaryLink();\r\n    }\r\n\r\n    public _notifyOutputConnectorMousedown(c: FlowchartOutputConnector, e: MouseEvent) {\r\n        this.temporaryLinkSnapped = false;\r\n        let start = c.GetLinkpoint();\r\n        let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n        this.temporaryLink.setAttribute('x1', \"\" + start.x);\r\n        this.temporaryLink.setAttribute('y1', \"\" + start.y);\r\n        this.temporaryLink.setAttribute('x2', \"\" + end.x);\r\n        this.temporaryLink.setAttribute('y2', \"\" + end.y);\r\n        this.setTemporaryLink(c);\r\n        document.onmouseup = (e) => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n            this._notifyGlobalMouseupWithLink(e);\r\n        };\r\n        document.onmousemove = (e) => {\r\n            this._notifyGlobalMousemoveWithLink(e);\r\n        };\r\n    }\r\n\r\n    public _notifyInputConnectorMouseup(c: FlowchartInputConnector, e: MouseEvent) {\r\n        if (this.lastOutputConnectorClicked == null) return;\r\n        if (!this.options.multipleLinksOnInput && c.LinksLength > 0) return;\r\n        if (this.lastOutputConnectorClicked.Type == c.Type) {\r\n            this.createLink(null, this.lastOutputConnectorClicked, c);\r\n        }\r\n        this.unsetTemporaryLink();\r\n\r\n    }\r\n\r\n    public _notifyOperatorClicked(o: FlowchartOperator, e: MouseEvent) {\r\n        this.SelectOperator(o);\r\n    }\r\n\r\n    public _notifyLinkClicked(link: FlowchartLink, e: MouseEvent) {\r\n        this.selectLink(link);\r\n    }\r\n\r\n    public _notifyInputConnectorMouseenter(c: FlowchartInputConnector, e: MouseEvent) {\r\n        if (this.lastOutputConnectorClicked == null || this.lastOutputConnectorClicked.Type != c.Type) return;\r\n        if (!this.options.multipleLinksOnInput && c.LinksLength > 0) return;\r\n\r\n        this.temporaryLinkSnapped = true;\r\n        let end = c.GetLinkpoint();\r\n        this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-circle)\");\r\n        this.temporaryLink.setAttribute('x2', \"\" + end.x);\r\n        this.temporaryLink.setAttribute('y2', \"\" + end.y);\r\n    }\r\n\r\n    public _notifyInputConnectorMouseleave(c: FlowchartInputConnector, e: MouseEvent) {\r\n        this.temporaryLinkSnapped = false;\r\n        this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-arrow)\");\r\n    }\r\n\r\n    public unselectLink() {\r\n        if (this.selectedLink != null) {\r\n            if (this.options.onLinkUnselect && !this.options.onLinkUnselect(this.selectedLink)) {\r\n                return;\r\n            }\r\n            this.selectedLink.UnsetColor();\r\n            this.selectedLink = null;\r\n        }\r\n    }\r\n\r\n    public selectLink(link: FlowchartLink) {\r\n        this.unselectLink();\r\n        if (this.options.onLinkSelect && !this.options.onLinkSelect(link)) {\r\n            return;\r\n        }\r\n        this.unselectOperator();\r\n        this.selectedLink = link;\r\n        link.SetColor(this.options.defaultSelectedLinkColor);\r\n    }\r\n \r\n\r\n    private deleteSelectedThing(): void {\r\n        if (this.selectedOperator) {\r\n            this.DeleteOperator(this.selectedOperator.GlobalOperatorIndex);\r\n        }\r\n        else if (this.selectedLink) {\r\n            this.DeleteLink(this.selectedLink.GlobalLinkIndex);\r\n        }\r\n    }\r\n\r\n    private fbd2json():string{\r\n        let operators: OperatorData[] = [];\r\n        let links: LinkData[] = [];\r\n        for (const op of this.operators.values()) {\r\n            operators.push({ globalTypeIndex: op.TypeInfo.GlobalTypeIndex, caption: op.Caption, index: op.GlobalOperatorIndex, posX: op.Xpos, posY: op.Ypos, configurationData: op.Config_Copy });\r\n        }\r\n        for (const link of this.links.values()) {\r\n            links.push({\r\n                color: \"blue\",\r\n                fromOperatorIndex: link.From.Parent.GlobalOperatorIndex,\r\n                fromOutput: link.From.LocalConnectorIndex,\r\n                toOperatorIndex: link.To.Parent.GlobalOperatorIndex,\r\n                toInput: link.To.LocalConnectorIndex,\r\n            });\r\n        }\r\n        let data: FlowchartData = { operators: operators, links: links };\r\n        return JSON.stringify(data);\r\n    }\r\n\r\n    \r\n\r\n    private saveJSONToLocalFile() {\r\n        \r\n        let text = this.fbd2json();\r\n        let filename = \"functionBlockDiagram.json\";\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n        element.setAttribute('download', filename);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    private saveBinToLocalFile() {\r\n        \r\n        let text = this.fbd2json();\r\n        let compilerInstance = new FlowchartCompiler(this.operators);\r\n        let binFile =compilerInstance.Compile();  \r\n        let blob = new Blob([new Uint8Array(binFile.buf, 0, binFile.buf.byteLength)], {type: \"octet/stream\"});\r\n        let url = window.URL.createObjectURL(blob);\r\n        let filename = \"functionBlockDiagram.bin\";\r\n        var element = document.createElement('a');\r\n        element.style.display = 'none';\r\n        element.href=url;\r\n        element.download=filename;\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    private openFromLocalFile(files: FileList | null) {\r\n        if (files == null || files.length != 1) return;\r\n        const reader = new FileReader();\r\n        reader.onloadend = (e) => {\r\n            let s: string = <string>e.target!.result;\r\n            let data = <FlowchartData>JSON.parse(s);\r\n            this.setData(data);\r\n        }\r\n        reader.readAsText(files[0]);\r\n    }\r\n\r\n    private put2fbd(buf:ArrayBuffer)\r\n    {\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.open(\"PUT\", \"/fbd\", true);\r\n        xhr.onloadend = (e) => {\r\n            if(xhr.status!=200){\r\n                this.appManagement.DialogController().showOKDialog(16, `HTTP Error ${xhr.status}`, null);\r\n                return;\r\n            }\r\n            this.appManagement.DialogController().showOKDialog(16, `Successfully saved`, null);\r\n        }\r\n        xhr.onerror = (e) => { \r\n            this.appManagement.DialogController().showOKDialog(16, `Generic Error`, null);\r\n        }\r\n        xhr.send(buf);\r\n    }\r\n\r\n    private saveJSONToLabathomeFile(){\r\n        \r\n        this.appManagement.DialogController().showEnterFilenameDialog(10, \"Enter filename (without Extension\", (filename:string)=>{\r\n            let xhr_json = new XMLHttpRequest;\r\n            xhr_json.open(\"POST\", \"/fbdstorejson/\"+filename, true);\r\n            xhr_json.onloadend = (e) => {\r\n                if(xhr_json.status!=200){\r\n                    this.appManagement.DialogController().showOKDialog(16, `HTTP Error ${xhr_json.status}`, null);\r\n                    return;\r\n                }\r\n                this.appManagement.DialogController().showOKDialog(16, `Successfully saved`, null);\r\n            }\r\n            xhr_json.onerror = (e) => { this.appManagement.DialogController().showOKDialog(16, `Generic Error`, null);}\r\n            xhr_json.send(this.fbd2json());\r\n        });\r\n\r\n    }\r\n\r\n    private saveJSONandBINToLabathomeDefaultFile(buf:ArrayBuffer)\r\n    {\r\n        let xhr_bin = new XMLHttpRequest();\r\n        xhr_bin.open(\"POST\", \"/fbddefaultbin\", true);\r\n        xhr_bin.onloadend = (e) => {\r\n            if(xhr_bin.status!=200){\r\n                this.appManagement.DialogController().showOKDialog(16, `HTTP Error ${xhr_bin.status}`, null);\r\n                return;\r\n            }\r\n            let xhr_json  = new XMLHttpRequest();\r\n            xhr_json.open(\"POST\", \"/fbddefaultjson\", true);\r\n            xhr_json.onloadend =(e)=>{\r\n                if(xhr_json.status!=200){\r\n                    this.appManagement.DialogController().showOKDialog(16, `HTTP Error ${xhr_json.status}`, null);\r\n                    return;\r\n                }\r\n                this.appManagement.DialogController().showOKDialog(16, `Successfully set a new default FBD`, null);\r\n            }\r\n            xhr_json.onerror = (e) => { this.appManagement.DialogController().showOKDialog(16, `Generic Error`, null);}\r\n            xhr_json.send(this.fbd2json())\r\n        }\r\n        xhr_bin.onerror = (e) => { this.appManagement.DialogController().showOKDialog(16, `Generic Error`, null);}\r\n        xhr_bin.send(buf);\r\n    }\r\n\r\n    private openJSONFromLabathome()\r\n    {\r\n        let filename:string = \"\";\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.open(\"GET\", \"/fbdstorejson/\", true);//GET without filename, but with \"/\" at the end!!!\r\n        xhr.onload = (e) => {\r\n            let s = xhr.responseText;\r\n            let data = <string[]>JSON.parse(s);\r\n            this.appManagement.DialogController().showFilelist(1000, data, \r\n                (filename:string)=>{\r\n                    let xhr = new XMLHttpRequest;\r\n                    xhr.open(\"GET\", \"/fbdstorejson/\"+filename, true); //GET with the filename selected in the dialog\r\n                    xhr.onload = (e) => {\r\n                        let s = xhr.responseText;\r\n                        let data = <FlowchartData>JSON.parse(s);\r\n                        this.setData(data);\r\n                    }\r\n                    xhr.send();\r\n                },\r\n                (filename:string)=>{\r\n                    let xhr = new XMLHttpRequest;\r\n                    xhr.open(\"DELETE\", \"/fbdstorejson/\"+filename, true); //GET with the filename selected in the dialog\r\n                    xhr.onloadend = (e) => {\r\n                        this.appManagement.DialogController().showOKDialog(1, `File ${filename} deleted successfully`, null);\r\n                    }\r\n                    xhr.send();\r\n                }\r\n            );\r\n        }\r\n        xhr.send();\r\n    }\r\n\r\n\r\n    private openDefaultJSONFromLabathome()\r\n    {\r\n        let xhr = new XMLHttpRequest;\r\n        xhr.open(\"GET\", \"/fbddefaultjson\", true);\r\n        xhr.onload = (e) => {\r\n            let s = xhr.responseText;\r\n            let data = <FlowchartData>JSON.parse(s);\r\n            this.setData(data);\r\n        }\r\n        xhr.send();\r\n    }\r\n\r\n    \r\n\r\n    private buildMenu(subcontainer: HTMLDivElement) {\r\n        let fileInput = <HTMLInputElement>$.Html(subcontainer, \"input\", [\"type\", \"file\", \"id\", \"fileInput\", \"accept\", \".json\"]);\r\n        fileInput.style.display = \"none\";\r\n        fileInput.onchange = (e) => {\r\n            this.openFromLocalFile(fileInput.files);\r\n        }\r\n\r\n        let toolbar = $.Html(subcontainer, \"div\", [], [\"develop-toolbar\"]);\r\n        let menuFile = $.Html(toolbar, \"div\", [], [\"dropdown\"]);\r\n        let menuFileDropBtn = <HTMLButtonElement>$.Html(menuFile, \"button\", [], [\"dropbtn\"], \"File ▼\");\r\n        let menuFileDropContent = $.Html(menuFile, \"div\", [], [\"dropdown-content\"]);\r\n        menuFileDropBtn.onclick = (e) => { menuFileDropContent.classList.toggle(\"show\"); };\r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"📂 Open (Local)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            fileInput.click();\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"📂 Open (labathome)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.openJSONFromLabathome()\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"📂 Open Default (labathome)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.openDefaultJSONFromLabathome()\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"💾 Save (Local)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.saveJSONToLocalFile();\r\n            e.preventDefault();\r\n        }\r\n        \r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"💾 Save (labathome)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.saveJSONToLabathomeFile();\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuFileDropContent, \"a\", [\"href\", \"#\"], [], \"💾 Save Bin (Local)\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.saveBinToLocalFile();\r\n            e.preventDefault();\r\n        }\r\n        //let runbutton = $.Html(toolbar, \"a\", [\"href\", \"#\"], [\"develop-toolbar\"], \"Run\");\r\n\r\n        let menuDebug = $.Html(toolbar, \"div\", [], [\"dropdown\"]);\r\n        let menuDebugDropBtn = <HTMLButtonElement>$.Html(menuDebug, \"button\", [], [\"dropbtn\"], \"Debug ▼\");\r\n\r\n        let menuDebugDropContent = $.Html(menuDebug, \"div\", [], [\"dropdown-content\"]);\r\n        menuDebugDropBtn.onclick = (e) => {\r\n            menuDebugDropContent.classList.toggle(\"show\");\r\n        };\r\n        $.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"☭ Run Now\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            let compilerInstance = new FlowchartCompiler(this.operators);\r\n            let guidAndBufAndMap: HashAndBufAndMaps=compilerInstance.Compile();  \r\n            this.currentDebugInfo=guidAndBufAndMap;\r\n            this.put2fbd(guidAndBufAndMap.buf);\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"👣 Set as Startup-App\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            let compilerInstance = new FlowchartCompiler(this.operators);\r\n            let guidAndBufAndMap: HashAndBufAndMaps=compilerInstance.Compile();  \r\n            this.saveJSONandBINToLabathomeDefaultFile(guidAndBufAndMap.buf);\r\n            e.preventDefault();\r\n        }\r\n        let menuSimulation = $.Html(toolbar, \"div\", [], [\"dropdown\"]);\r\n        let menuSimulationDropBtn = <HTMLButtonElement>$.Html(menuSimulation, \"button\", [], [\"dropbtn\"], \"Simulation ▼\");\r\n\r\n        let menuSimulationDropContent = $.Html(menuSimulation, \"div\", [], [\"dropdown-content\"]);\r\n        menuSimulationDropBtn.onclick = (e) => {\r\n            menuSimulationDropContent.classList.toggle(\"show\");\r\n        };\r\n        $.Html(menuSimulationDropContent, \"a\", [\"href\", \"#\"], [], \"➤ Start Simulation\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            let compilerInstance = new FlowchartCompiler(this.operators);\r\n            this.simulationManager=new SimulationManager(compilerInstance.CompileForSimulation());\r\n            this.simulationManager.Start(false);\r\n            e.preventDefault();\r\n        }\r\n        $.Html(menuSimulationDropContent, \"a\", [\"href\", \"#\"], [], \"× Stop Simulation\").onclick = (e) => {\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n            this.simulationManager?.Stop();\r\n            e.preventDefault();\r\n        }\r\n        //let menuDebugLink2 = $.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◉ Stop\");\r\n        //let menuDebugLink3 = $.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◯ Erase\");\r\n    }\r\n\r\n    constructor(private appManagement:AppManagement, private container: HTMLDivElement, private options: FlowchartOptions) {\r\n        if (!this.container) throw new Error(\"container is null\");\r\n        this.operatorRegistry=operatorimpl.OperatorRegistry.Build();\r\n        let subcontainer = <HTMLDivElement>$.Html(this.container, \"div\", [], [\"develop-ui\"]);\r\n        subcontainer.onclick = (e) => {\r\n            if ((<HTMLElement>e.target).classList.contains(\"dropbtn\")) return;\r\n            Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem: HTMLDivElement) => { elem.classList.remove(\"show\"); });\r\n        }\r\n\r\n        this.buildMenu(subcontainer);\r\n\r\n\r\n        let workspace = <HTMLDivElement>$.Html(subcontainer, \"div\", [\"tabindex\", \"0\"], [\"develop-workspace\"]);//tabindex, damit keypress-Events abgefangen werden können\r\n        this.propertyGridHtmlDiv = <HTMLDivElement>$.Html(subcontainer, \"div\", [], [\"develop-properties\"]);\r\n\r\n\r\n\r\n        this.flowchartContainerSvgSvg = <SVGSVGElement>$.Svg(workspace, \"svg\", [\"width\", \"100%\", \"height\", \"100%\"], [\"flowchart-container\"]);\r\n\r\n\r\n        this.linksLayer = <SVGGElement>$.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-links-layer\"]);\r\n        this.operatorsLayer = <SVGGElement>$.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-operators-layer\", \"unselectable\"]);\r\n        this.tempLayer = <SVGSVGElement>$.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-temporary-link-layer\"]);\r\n        this.tempLayer.style.visibility = \"hidden\";//visible\r\n        let defs = $.Svg(this.tempLayer, \"defs\", []);\r\n        let markerArrow = $.Svg(defs, \"marker\", [\"id\", \"marker-arrow\", \"markerWidth\", \"4\", \"markerHeight\", \"4\", \"refX\", \"1\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n        this.markerArrow = <SVGPathElement>$.Svg(markerArrow, \"path\", [\"d\", \"M0,0 L0,4 L2,2 z\", \"fill\", \"red\", \"stroke\", \"black\", \"stroke-width\", \"0.5\"]);\r\n        let markerCircle = $.Svg(defs, \"marker\", [\"id\", \"marker-circle\", \"markerWidth\", \"4\", \"markerHeight\", \"4\", \"refX\", \"2\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n        this.markerCircle = <SVGCircleElement>$.Svg(markerCircle, \"circle\", [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\", \"fill\", \"red\", \"stroke-width\", \"1px\", \"stroke\", \"black\"]);\r\n        this.temporaryLink = <SVGLineElement>$.Svg(this.tempLayer, \"line\", [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"0\", \"stroke-dasharray\", \"6,6\", \"stroke-width\", \"4\", \"stroke\", \"black\", \"fill\", \"none\", \"marker-end\", \"url(#marker-arrow)\"]);\r\n\r\n        let operatorLibActivator = <SVGRectElement>$.Svg(this.flowchartContainerSvgSvg, \"rect\", [\"width\", \"40\", \"height\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"0\"]);\r\n\r\n        this.operatorLibDiv = <HTMLDivElement>$.Html(workspace, \"div\", [], [\"flowchart-operatorlibdiv\", \"unselectable\"]);\r\n        this.operatorLibDiv.style.display = \"none\";\r\n\r\n\r\n        //let toolsRect= <SVGRectElement>$.Svg(this.operatorLibDiv, \"rect\", [\"width\",\"140\", \"height\", \"100%\", \"rx\", \"10\", \"ry\", \"10\"], [\"tools-container\"]);\r\n\r\n        //The onmousemove event occurs every time the mouse pointer is moved over the div element.\r\n        //The mouseenter event only occurs when the mouse pointer enters the div element.\r\n        //The onmouseover event occurs when the mouse pointer enters the div element, and its child elements (p and span).\r\n\r\n        //The mouseout event triggers when the mouse pointer leaves any child elements as well the selected element.\r\n        //The mouseleave event is only triggered when the mouse pointer leaves the selected element.\r\n        operatorLibActivator.onmouseenter = (e) => {\r\n            this.operatorLibDiv.style.display = \"inline\";\r\n        }\r\n        this.operatorLibDiv.onmouseleave = (e) => {\r\n            this.operatorLibDiv.style.display = \"none\";\r\n        }\r\n\r\n        this.flowchartContainerSvgSvg.onclick = (e) => {\r\n            if (e.target == this.Element)//if the click is in a \"free\" area, then the target is the uppermost layer; the linkLayer!\r\n            {\r\n                this.unselectOperator();\r\n                this.unselectLink();\r\n            }\r\n        }\r\n\r\n        workspace.onkeyup = (e) => {\r\n            if (e.key == \"Delete\") {\r\n                console.log(\"Flowchart workspace.onkeyup with e.target=\" + e.target + \" und Delete-Key\");\r\n                this.deleteSelectedThing();\r\n            }\r\n            else {\r\n                console.log(\"Flowchart workspace.onkeyup with e.target=\" + e.target + \" und key \" + e.key);\r\n            }\r\n        }\r\n\r\n        this.operatorRegistry.populateOperatorLib(this.operatorLibDiv,(e:MouseEvent, ti:TypeInfo)=>{\r\n            let caption = ti.OperatorName;\r\n            let o = this.createOperatorInternal(ti.GlobalTypeIndex, caption, null);\r\n            let coords = Utils.EventCoordinatesInSVG(e, this.Element);\r\n            o.MoveTo(coords.x - 10, coords.y - 10);\r\n            o.RegisterDragging(e);\r\n            this.operators.set(o.GlobalOperatorIndex, o);\r\n        } );\r\n    }\r\n\r\n\r\n    public onFirstStart() {\r\n        if (typeof this.options.data !== undefined && this.options.data != null) {\r\n            this.setData(this.options.data);\r\n        }\r\n    }\r\n\r\n\r\n    private createOperatorInternal(globalTypeIndex: number, caption: string, configurationData: KeyValueTuple[] | null): FlowchartOperator {\r\n        \r\n        if(!this.operatorRegistry.IsIndexKnown(globalTypeIndex))\r\n        {\r\n            throw new Error(`Unknown globalTypeIndex ${globalTypeIndex}`);\r\n        }\r\n        if (this.options.onOperatorCreate && !this.options.onOperatorCreate(caption, null, false)) {\r\n            throw new Error(`Creation of operator of globalTypeIndex ${globalTypeIndex} prevented by onOperatorCreate plugin`);\r\n        }\r\n        let op = this.operatorRegistry.CreateByIndex(globalTypeIndex, this, caption, configurationData)!;\r\n       \r\n        this.currentDebugInfo=null;\r\n        return op;\r\n    }\r\n\r\n    public setData(data: FlowchartData) {\r\n\r\n        this.links.forEach((e) => e.RemoveFromDOM());\r\n        this.links.clear();\r\n        this.operators.forEach((e) => e.RemoveFromDOM());\r\n        this.operators.clear();\r\n        let indexInData2operator = new Map<number, FlowchartOperator>();\r\n\r\n        for (const d of data.operators) {\r\n            let o = this.createOperatorInternal(d.globalTypeIndex, d.caption, d.configurationData);\r\n            o.MoveTo(d.posX, d.posY);\r\n            this.operators.set(o.GlobalOperatorIndex, o);\r\n            indexInData2operator.set(d.index, o);\r\n        }\r\n        for (const d of data.links) {\r\n            let fromOp = indexInData2operator.get(d.fromOperatorIndex);\r\n            let toOp = indexInData2operator.get(d.toOperatorIndex);\r\n            if (fromOp === undefined || toOp === undefined) continue;\r\n            let fromConn = fromOp.GetOutputConnectorByIndex(d.fromOutput);\r\n            let toConn = toOp.GetInputConnectorByIndex(d.toInput);\r\n            if (fromConn == null || toConn == null) continue;\r\n            this.createLink(d, fromConn, toConn);\r\n        }\r\n    }\r\n\r\n    public DeleteLink(globalLinkIndex: number) {\r\n        this.currentDebugInfo=null;\r\n        let l = this.links.get(globalLinkIndex);\r\n        if (l === undefined) {\r\n            throw Error(\"Link to delete is undefined\")\r\n        }\r\n        if (this.selectedLink == l) {\r\n            this.unselectLink();\r\n        }\r\n        l.RemoveFromDOM();\r\n        this.links.delete(globalLinkIndex);\r\n        l.To.RemoveLink(l);\r\n        l.From.RemoveLink(l);\r\n    }\r\n\r\n    public DeleteOperator(globalOperatorIndex: number) {\r\n        this.currentDebugInfo=null;\r\n        let o = this.operators.get(globalOperatorIndex);\r\n        if (o === undefined) {\r\n            throw Error(\"Operator to delete is undefined\")\r\n        }\r\n        if (this.selectedOperator == o) {\r\n            this.unselectOperator();\r\n        }\r\n        o.RemoveFromDOM();\r\n        this.operators.delete(o.GlobalOperatorIndex);\r\n        for (const outputKV of o.OutputsKVIt) {\r\n            for (const linkKV of outputKV[1].LinksKVIt) {\r\n                this.DeleteLink(linkKV[1].GlobalLinkIndex);\r\n            }\r\n        }\r\n        for (const inputKV of o.InputsKVIt) {\r\n            for (const linkKV of inputKV[1].LinksKVIt) {\r\n                this.DeleteLink(linkKV[1].GlobalLinkIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    public createLink(data: LinkData | null, from: FlowchartOutputConnector, to: FlowchartInputConnector): FlowchartLink | null {\r\n        if (this.options.onLinkCreate && !this.options.onLinkCreate(from.Caption, data)) return null;\r\n        if (!this.options.multipleLinksOnOutput && from.LinksLength > 0) return null;\r\n        if (!this.options.multipleLinksOnInput && to.LinksLength > 0) return null;\r\n        this.currentDebugInfo=null;\r\n        let l: FlowchartLink = new FlowchartLink(this, \"\", this.Options.defaultLinkColor, from, to);\r\n        from.AddLink(l);\r\n        to.AddLink(l);\r\n        this.links.set(l.GlobalLinkIndex, l);\r\n        return l;\r\n    }\r\n\r\n    private unsetTemporaryLink() {\r\n        this.lastOutputConnectorClicked = null;\r\n        this.tempLayer.style.visibility = \"hidden\";\r\n    }\r\n\r\n    private setTemporaryLink(c: FlowchartOutputConnector) {\r\n        this.lastOutputConnectorClicked = c;\r\n        let color = Flowchart.DATATYPE2COLOR.get(c.Type)\r\n        if (!color) color = \"BLACK\";\r\n        this.markerArrow.style.fill = color;\r\n        this.markerCircle.style.fill = color;\r\n        this.tempLayer.style.visibility = \"visible\";\r\n    }\r\n\r\n    private unselectOperator() {\r\n        if (this.options.onOperatorUnselect && !this.options.onOperatorUnselect()) return;\r\n        this.propertyGridHtmlDiv.innerText = \"\"; //clear\r\n        if (this.selectedOperator == null) return;\r\n        this.selectedOperator.ShowAsSelected(false);\r\n        this.selectedOperator = null;\r\n    }\r\n\r\n    public SelectOperator(operator: FlowchartOperator): void {\r\n        if (this.options.onOperatorSelect && !this.options.onOperatorSelect(operator.Caption)) return;\r\n        this.unselectLink();\r\n        if (this.selectedOperator != null) this.selectedOperator.ShowAsSelected(false);\r\n        operator.ShowAsSelected(true);\r\n        this.selectedOperator = operator;\r\n        this.propertyGridHtmlDiv.innerText = \"\"; //clear\r\n        $.Html(this.propertyGridHtmlDiv, \"p\", [], [\"develop-propertygrid-head\"], `Properties for ${this.selectedOperator.Caption}`);\r\n        let table = <HTMLTableElement>$.Html(this.propertyGridHtmlDiv, \"table\", [], [\"develop-propertygrid-table\"]);\r\n        let thead = <HTMLTableSectionElement>$.Html(table, \"thead\", [],[]);\r\n        let tr_head = $.Html(thead, \"tr\", [], [\"develop-propertygrid-tr\"]);\r\n        $.Html(tr_head, \"th\", [], [\"develop-propertygrid-th\"], \"Key\");\r\n        $.Html(tr_head, \"th\", [], [\"develop-propertygrid-th\"], \"Value\");\r\n        let tbody= <HTMLTableSectionElement>$.Html(table, \"tbody\", [],[]);\r\n        if (this.selectedOperator!.PopulateProperyGrid(tbody)) {\r\n            $.Html(this.propertyGridHtmlDiv, \"button\", [], [\"develop-propertygrid-button\"], `Save`).onclick=(e)=>{\r\n                this.currentDebugInfo=null;\r\n                operator.SavePropertyGrid(tbody);\r\n            };\r\n        }\r\n        else {\r\n            this.propertyGridHtmlDiv.innerText = \"\"; //clear\r\n            $.Html(this.propertyGridHtmlDiv, \"p\", [], [\"develop-propertygrid-head\"], `No Properties for ${this.selectedOperator.Caption}`);\r\n        }\r\n    }\r\n\r\n    // Found here : http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n    public static _shadeColor(color: string, percent: number) {\r\n        var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\r\n        return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\r\n    }\r\n}\r\n","import {FlowchartOperator, PositionType } from \"./FlowchartOperator\";\r\nimport {ConnectorType } from \"./FlowchartConnector\";\r\nimport { NodeWrapper, TopologicalSortDFS } from \"./TopologicalSorfDFS\";\r\nimport { SerializeContext } from \"./SerializeContext\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\n\r\nexport interface SerializeContextAndAdressMap {\r\n    typeIndex2globalConnectorIndex2adressOffset: Map<number, Map<number, number>>;\r\n    ctx: SerializeContext;\r\n}\r\n\r\nexport interface HashAndBufAndMaps{\r\n    hash:number;\r\n    buf: ArrayBuffer;\r\n    typeIndex2globalConnectorIndex2adressOffset:Map<number, Map<number, number>>,\r\n    typeIndex2adressOffset2ListOfLinks:Map<number, Map<number, Array<FlowchartLink>>>,\r\n    typeIndex2maxOffset:Map<number, number>,\r\n}\r\n\r\nexport interface HashAndBuf{\r\n    hash:number;\r\n    buf: ArrayBuffer;\r\n}\r\n\r\nexport interface SortedOperatorsAndMaps{\r\n    sortedOperators:FlowchartOperator[];\r\n    typeIndex2globalConnectorIndex2adressOffset:Map<number, Map<number, number>>,\r\n    typeIndex2adressOffset2ListOfLinks:Map<number, Map<number, Array<FlowchartLink>>>,\r\n    typeIndex2maxOffset:Map<number, number>,\r\n}\r\n\r\nexport interface Maps{\r\n    typeIndex2globalConnectorIndex2adressOffset:Map<number, Map<number, number>>,\r\n    typeIndex2adressOffset2ListOfLinks:Map<number, Map<number, Array<FlowchartLink>>>,\r\n    typeIndex2maxOffset:Map<number, number>,\r\n}\r\n\r\nexport class FlowchartCompiler {\r\n    \r\n    public constructor(private index2operator:Map<number,FlowchartOperator>)\r\n    {\r\n       \r\n    }\r\n\r\n    private sortOperators():FlowchartOperator[]{\r\n        let index2wrappedOperator = new Map<number, NodeWrapper<FlowchartOperator>>();\r\n        this.index2operator.forEach((v, k, m) => {\r\n            index2wrappedOperator.set(v.GlobalOperatorIndex, new NodeWrapper<FlowchartOperator>(v));\r\n        });\r\n        let wrappedOutputOperators: NodeWrapper<FlowchartOperator>[] = [];\r\n        for (let i of index2wrappedOperator.values()) {\r\n            //Stelle für jede \"gewrapte Node\" fest, welche Operatoren von Ihr abhängig sind\r\n            let dependents = new Set<NodeWrapper<FlowchartOperator>>();\r\n            for (const inputkv of i.Payload.InputsKVIt) {\r\n                for (const linkkv of inputkv[1].LinksKVIt) {\r\n                    let dependentOperator = linkkv[1].From.Parent;\r\n                    let dependentWrappedNode = index2wrappedOperator.get(dependentOperator.GlobalOperatorIndex);\r\n                    if (!dependentWrappedNode)\r\n                        throw new Error(\"Implementation Error: dependentWrappedNode is undefined\");\r\n                    dependents.add(dependentWrappedNode);\r\n                }\r\n            }\r\n            dependents.forEach(e => i.DependendNodes.push(e));\r\n            //füge alle mit Typ \"Output\" einer Liste hinzu\r\n            if (i.Payload.TypeInfo.Position == PositionType.Output) wrappedOutputOperators.push(i);\r\n        }\r\n\r\n        let algorithm = new TopologicalSortDFS<FlowchartOperator>();\r\n        let sortedList = algorithm.sort(wrappedOutputOperators);\r\n        return sortedList.map((e) => e.Payload)\r\n    }\r\n\r\n    public CompileForSimulation():SortedOperatorsAndMaps{\r\n        let sortedOperators = this.sortOperators();\r\n        for (const key in sortedOperators) {\r\n            let value = sortedOperators[key];\r\n            value.SetDebugInfoText(\"Sequence \" + key);\r\n        }\r\n        let maps=this.createLookupMaps(sortedOperators);\r\n        return {\r\n            sortedOperators:sortedOperators,\r\n            typeIndex2globalConnectorIndex2adressOffset:maps.typeIndex2globalConnectorIndex2adressOffset,\r\n            typeIndex2adressOffset2ListOfLinks:maps.typeIndex2adressOffset2ListOfLinks,\r\n            typeIndex2maxOffset:maps.typeIndex2maxOffset,\r\n        };\r\n    }\r\n\r\n    public Compile(): HashAndBufAndMaps {\r\n        let sortedOperators = this.sortOperators();\r\n        for (const key in sortedOperators) {\r\n            let value = sortedOperators[key];\r\n            value.SetDebugInfoText(\"Sequence \" + key);\r\n        }\r\n        let maps=this.createLookupMaps(sortedOperators);\r\n        let hashAndBuf= this.serialize(sortedOperators, maps);\r\n\r\n        let dv = new DataView(hashAndBuf.buf);\r\n        let code: String = \"const uint8_t code[] = {\"\r\n        for (let i = 0; i < dv.byteLength; i++) {\r\n            code += \"0x\" + dv.getUint8(i).toString(16) + \", \";\r\n        }\r\n        code += \"};\";\r\n        console.log(code);\r\n\r\n        return {\r\n            hash:hashAndBuf.hash,\r\n            buf: hashAndBuf.buf,\r\n            typeIndex2globalConnectorIndex2adressOffset:maps.typeIndex2globalConnectorIndex2adressOffset,\r\n            typeIndex2adressOffset2ListOfLinks:maps.typeIndex2adressOffset2ListOfLinks,\r\n            typeIndex2maxOffset:maps.typeIndex2maxOffset,\r\n        };\r\n    }\r\n\r\n    private createLookupMaps(operators:FlowchartOperator[]):Maps{\r\n        //Speichert separat für jeden Datentyp (Bool, int, float, color,...), welcher GlobalConnectorIndex auf welchen bei 2 beginnend fortlaufenden Adress-Offset gemapped wird\r\n        //wir beginnen bei 2, weil unbeschaltete Outputs auf 0 schreiben und unbeschaltete Inputs von 1 lesen.\r\n        let typeIndex2globalConnectorIndex2adressOffset = new Map<number, Map<number, number>>(); //globalConnectorIndex_Outputs 2 variableAdress\r\n        let typeIndex2maxOffset = new Map<number, number>();\r\n        let typeIndex2adressOffset2ListOfLinks = new Map<number, Map<number, Array<FlowchartLink>>>();\r\n        for (let type in ConnectorType) {\r\n            if (!isNaN(Number(type))) {\r\n                typeIndex2globalConnectorIndex2adressOffset.set(Number(type), new Map<number, number>());\r\n                typeIndex2maxOffset.set(Number(type), 2);\r\n                typeIndex2adressOffset2ListOfLinks.set(Number(type), new Map<number,Array<FlowchartLink>>());\r\n            }\r\n        }\r\n        for (const operator of operators) {\r\n            for (const outputKV of operator.OutputsKVIt) {\r\n                if (outputKV[1].LinksLength == 0) {\r\n                    //unconnected output -->writes to memory adress zero of the respective data type\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, 0);\r\n                }\r\n                else {\r\n                    //connected output --> create new memory address and set it\r\n                    let index = typeIndex2maxOffset.get(outputKV[1].Type)!;\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, index);\r\n                    \r\n                    //add all outgoing links to typeIndex2adressOffset2ListOfLinks\r\n                    typeIndex2adressOffset2ListOfLinks.get(outputKV[1].Type)!.set(index, outputKV[1].GetLinksCopy());\r\n                    index++;\r\n                    typeIndex2maxOffset.set(outputKV[1].Type, index);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            typeIndex2globalConnectorIndex2adressOffset:typeIndex2globalConnectorIndex2adressOffset,\r\n            typeIndex2adressOffset2ListOfLinks:typeIndex2adressOffset2ListOfLinks,\r\n            typeIndex2maxOffset:typeIndex2maxOffset,\r\n        };\r\n    }\r\n\r\n\r\n    private serialize(operators: FlowchartOperator[], maps:Maps):HashAndBuf {\r\n\r\n\r\n        /*\r\n        Lege nun die Operatoren in der durch das Array vorgegebenen Struktur in ein Array ab\r\n        */\r\n        let buffer = new ArrayBuffer(Math.pow(2, 16));\r\n        let serctx = new SerializeContext(buffer, 0);\r\n        let ctx: SerializeContextAndAdressMap = { \r\n            typeIndex2globalConnectorIndex2adressOffset: maps.typeIndex2globalConnectorIndex2adressOffset, \r\n            ctx:serctx\r\n        };\r\n        //Version of Data Structure\r\n        serctx.writeU32(0xAFFECAFE);\r\n        //Placeholder for hash\r\n        serctx.writeU32(0);\r\n\r\n\r\n        for (let type in ConnectorType) {\r\n            if (!isNaN(Number(type))) {\r\n                serctx.writeU32(maps.typeIndex2maxOffset.get(Number(type))!);\r\n            }\r\n        }\r\n    \r\n        //operatorsCount\r\n        serctx.writeU32(operators.length);\r\n        for (const operator of operators) {\r\n            operator.SerializeToBinary(ctx);\r\n        }\r\n\r\n        let hash= serctx.funhash(8, (2^32)-1);\r\n        serctx.overwriteU32(hash, 4);\r\n\r\n        return {\r\n            hash:hash, \r\n            buf:ctx.ctx.getResult(), \r\n        };\r\n    }\r\n}","import { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport {$, Location2D} from \"../utils\"\r\n\r\nconst TRANSLATEY = 20;\r\n\r\nexport enum ConnectorType{\r\n    BOOLEAN=0,\r\n    INTEGER=1,\r\n    FLOAT=2,\r\n    COLOR=3,\r\n}\r\n\r\nexport abstract class FlowchartConnector {\r\n    private static INDEX: number = 0;\r\n    private globalConnectorIndex: number;\r\n    get GlobalConnectorIndex() { return this.globalConnectorIndex; }\r\n    get LocalConnectorIndex(){return this.localIndex;}\r\n\r\n    protected element: SVGGElement;\r\n    get Element() { return this.element; }\r\n\r\n    protected snapper:SVGCircleElement;\r\n    protected connector:SVGElement;\r\n    protected connectorGroup:SVGGElement;\r\n\r\n    protected  links = new Map<number, FlowchartLink>();\r\n    public HasLink = (globalLinkIndex: number) => this.links.has(globalLinkIndex);\r\n    public AddLink = (link: FlowchartLink) => this.links.set(link.GlobalLinkIndex, link);\r\n    public RemoveLink = (link: FlowchartLink) => this.links.delete(link.GlobalLinkIndex);\r\n    get LinksLength() { return this.links.size};\r\n    public GetLinksCopy(): FlowchartLink[] {\r\n        return Array.from(this.links.values());\r\n    }\r\n\r\n    get LinksKVIt(){return this.links.entries()}\r\n    protected abstract GetLinkpointXOffset(width:number): number;\r\n    protected abstract getIOSpecifics():{inputOrOutput:string, parent:SVGGElement, translateY:number, dx:number};\r\n\r\n    public RefreshLinkPositions() {\r\n        this.links.forEach(l=>{\r\n            l.RefreshPosition();\r\n        });\r\n        \r\n    }\r\n\r\n    constructor(private parent: FlowchartOperator, private caption: string, private localIndex:number, private type:ConnectorType) {\r\n\r\n        this.globalConnectorIndex = FlowchartConnector.INDEX++;\r\n        let spec = this.getIOSpecifics();\r\n        let translateY = TRANSLATEY*spec.parent.childElementCount;\r\n        this.element = <SVGGElement>$.Svg(spec.parent, \"g\", [\"transform\", `translate(0 ${translateY})`], [`operator-${spec.inputOrOutput}`]);\r\n        this.element.setAttribute(\"data-connector-datatype\", ConnectorType[type]);\r\n\r\n        let text =  <SVGTextElement>$.Svg(this.element, \"text\", [\"dx\",\"\"+spec.dx, \"dy\", \"4\"], [`operator-${spec.inputOrOutput}-caption`]);\r\n        text.textContent=caption;\r\n        this.connectorGroup = <SVGGElement>$.Svg(this.element, \"g\", []);\r\n        this.connector = <SVGCircleElement>$.Svg(this.connectorGroup, \"circle\", [\"r\",\"4\"], [`operator-${spec.inputOrOutput}-connector`, ConnectorType[type]]);\r\n        this.snapper= <SVGCircleElement>$.Svg(this.connectorGroup, \"circle\", [\"r\",\"10\"], [`operator-${spec.inputOrOutput}-snapper`]);\r\n        \r\n        this.element.onmouseover = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.SetColor(Flowchart._shadeColor(this.parent.Parent.Options.defaultLinkColor, -0.4));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.element.onmouseout = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.UnsetColor();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get Parent() { return this.parent; }\r\n    get Caption() { return this.caption; }\r\n    get Type() { return this.type; }\r\n\r\n\r\n    public GetLinkpoint(): Location2D {\r\n        let flowchart = this.Parent.Parent;\r\n        let posrat = flowchart.PositionRatio;\r\n        let flowchartRect = flowchart.Element.getBoundingClientRect();\r\n        let connectorRect = this.connector.getBoundingClientRect();\r\n        var x = (connectorRect.left - flowchartRect.left) / posrat + connectorRect.width/2;\r\n        var y = (connectorRect.top - flowchartRect.top) / posrat + connectorRect.height/2;\r\n        return { x: x, y: y };\r\n    }\r\n}\r\n\r\nexport class FlowchartInputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, localIndex:number, type:ConnectorType) {\r\n        super(parent, caption, localIndex, type);\r\n        \r\n        this.connectorGroup.onmouseup = (e) => {\r\n           parent.Parent._notifyInputConnectorMouseup(this, e);\r\n        }\r\n        this.connectorGroup.onmouseenter=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseenter(this, e);\r\n        }\r\n        this.connectorGroup.onmouseleave=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseleave(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return 0;}  \r\n    protected  getIOSpecifics(){return {inputOrOutput:\"input\", parent:this.Parent.InputSvgG, translateY:0, dx:8};}\r\n    public GetGlobalConnectorIndexOfSignalSource():number {\r\n        for(let link of this.links.values()){\r\n            return link.From.GlobalConnectorIndex;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\nexport class FlowchartOutputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, localIndex:number, type:ConnectorType) {\r\n        super(parent, caption, localIndex, type)\r\n        this.element.onmousedown = (e) => {\r\n            parent.Parent._notifyOutputConnectorMousedown(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return width;}\r\n    protected  getIOSpecifics(){return {inputOrOutput:\"output\", parent:this.Parent.OutputSvgG, translateY:140, dx:-8};}\r\n}\r\n","import { FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nimport {$} from \"../utils\"\r\nexport class FlowchartLink {\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    private element: SVGPathElement;\r\n    private captionElement:SVGTextElement;\r\n    private captionPath: SVGTextPathElement;\r\n    constructor(private parent: Flowchart, private caption: string, private color: string, private from: FlowchartOutputConnector, private to: FlowchartInputConnector) {\r\n        this.index = FlowchartLink.MAX_INDEX++;\r\n        this.element = <SVGPathElement>$.Svg(parent.LinkLayer, \"path\", [\"stroke-width\", \"\" + this.parent.Options.linkWidth, \"fill\", \"none\", \"id\", \"LINK\" + this.index]);\r\n        this.RefreshPosition();\r\n        this.UnsetColor();\r\n        this.parent.LinkLayer.appendChild(this.element);\r\n        this.captionElement =<SVGTextElement>$.Svg(parent.LinkLayer, \"text\",[]);\r\n        this.captionPath = <SVGTextPathElement>$.Svg(this.captionElement, \"textPath\",[\"startOffset\", \"50%\",\"text-anchor\", \"middle\"]);\r\n        this.captionPath.setAttributeNS($.XLINKNS, \"href\", '#' + \"LINK\" + this.index);\r\n        this.captionPath.innerHTML = caption;\r\n        this.element.onclick = (e) => {\r\n            this.parent._notifyLinkClicked(this, e);\r\n        }\r\n    }\r\n    get GlobalLinkIndex() { return this.index; }\r\n    get From() { return this.from; }\r\n    get To() { return this.to; }\r\n    set Color(color: string) { this.color = color; }\r\n\r\n    public RemoveFromDOM() {\r\n        this.element.remove();\r\n        this.captionElement.remove();\r\n    }\r\n\r\n\r\n    public SetColor(color: string) {\r\n        this.element.setAttribute('stroke', color);\r\n        //this.element.setAttribute('fill', color);\r\n        //TODO: colorize the small triangle in the connector\r\n        //linkData.internal.els.fromSmallConnector.css('border-left-color', color);\r\n        //linkData.internal.els.toSmallConnector.css('border-left-color', color);\r\n    }\r\n\r\n    public SetCaption(caption:string){\r\n        this.captionPath.innerHTML=caption;\r\n    }\r\n\r\n    public UnsetColor() {\r\n        this.SetColor(this.parent.Options.defaultLinkColor);\r\n    }\r\n\r\n    public RefreshPosition() {\r\n        let fromPosition = this.from.GetLinkpoint();\r\n        let toPosition = this.to.GetLinkpoint();\r\n        let fromX = fromPosition.x;\r\n        let fromY = fromPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let toX = toPosition.x;\r\n        let toY = toPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let distanceFromArrow = this.parent.Options.distanceFromArrow;\r\n        let bezierFromX = (fromX + distanceFromArrow);\r\n        let bezierToX = toX + 1;\r\n        let bezierIntensity = Math.min(100, Math.max(Math.abs(bezierFromX - bezierToX) / 2, Math.abs(fromY - toY)));\r\n        this.element.setAttribute(\"d\", 'M' + bezierFromX + ',' + (fromY) + ' C' + (fromX + distanceFromArrow + bezierIntensity) + ',' + fromY + ' ' + (toX - bezierIntensity) + ',' + toY + ' ' + bezierToX + ',' + toY);\r\n    }\r\n}\r\n","import {FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport { SerializeContextAndAdressMap } from \"./FlowchartCompiler\";\r\nimport {$, KeyValueTuple} from \"../utils\"\r\nimport { SimulationContext } from \"./SimulationContext\";\r\n\r\nexport enum PositionType{\r\n    Default,\r\n    Input,\r\n    Output,\r\n};\r\nexport enum SingletonType{\r\n    Default,\r\n    Singleton,\r\n};\r\nexport class TypeInfo\r\n{\r\n    constructor(\r\n        public GlobalTypeIndex:number, \r\n        public GroupName:string, \r\n        public OperatorName:string, \r\n        public Position:PositionType, \r\n        public Singleton:SingletonType, \r\n        public Builder:(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null)=>FlowchartOperator)\r\n        {}\r\n}\r\n\r\nexport abstract class FlowchartOperator {\r\n\r\n    //der Index der Inputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Inputs: FlowchartInputConnector[]=[];\r\n    //der Index der Outputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Outputs: FlowchartOutputConnector[]= [];\r\n\r\n\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    get GlobalOperatorIndex(){return this.index;}\r\n\r\n    private elementSvgG: SVGGElement;\r\n    get ElementSvgG() { return this.elementSvgG; }\r\n    private inputSvgG:SVGGElement;\r\n    get InputSvgG(): SVGGElement { return this.inputSvgG; }\r\n    private outputSvgG:SVGGElement;\r\n    get OutputSvgG(): SVGGElement { return this.outputSvgG;}\r\n    private debugInfoSvgText:SVGTextElement;\r\n\r\n    get TypeInfo(){return this.typeInfo;}\r\n\r\n    get Xpos(){return this.x;}\r\n    get Ypos(){return this.y;}\r\n    get Config_Copy(){\r\n        return this.configurationData?this.configurationData.slice(0):null;\r\n    }\r\n\r\n    private x=0;\r\n    private y=0;\r\n\r\n    protected box:SVGRectElement;\r\n\r\n    public ShowAsSelected(state:boolean)\r\n    {\r\n        if(state)\r\n        {\r\n            this.box.classList.add('selected');\r\n        }\r\n        else{\r\n            this.box.classList.remove('selected');\r\n        }\r\n    }\r\n\r\n    public SetDebugInfoText(text:string):void{\r\n        this.debugInfoSvgText.textContent=text;\r\n    }\r\n\r\n    protected cfg_setDefault(key:string, value:any)\r\n    {\r\n        if(this.configurationData==null) this.configurationData=[];\r\n        for (const e of this.configurationData) {\r\n            if(e.key==key){\r\n                return;\r\n            }\r\n        } \r\n        this.configurationData.push({key:key, value:value});\r\n    }\r\n\r\n    protected cfg_getValue(key:string, defaultValue:any):any\r\n    {\r\n        if(this.configurationData==null) this.configurationData=[];\r\n        for (const e of this.configurationData) {\r\n            if(e.key==key){\r\n                return e.value;\r\n            }\r\n        };\r\n        this.configurationData.push({key:key, value:defaultValue});\r\n        return defaultValue;\r\n    }\r\n\r\n    protected cfg_setValue(key:string, value:any)\r\n    {\r\n        if(this.configurationData==null) this.configurationData=[];\r\n        for (const e of this.configurationData) {\r\n            if(e.key==key){\r\n                e.value=value;\r\n                return;\r\n            }\r\n        } \r\n        this.configurationData.push({key:key, value:value});\r\n    }\r\n\r\n    constructor(private parent: Flowchart, private caption: string, private typeInfo: TypeInfo, protected configurationData:KeyValueTuple[]|null) {\r\n        this.index = FlowchartOperator.MAX_INDEX++;\r\n        this.elementSvgG = <SVGGElement>$.Svg(parent.OperatorsLayer, \"g\", [], [\"operator\"]);\r\n        this.elementSvgG.setAttribute('data-operator-index', \"\" + this.index);\r\n        let dragGroup = <SVGGElement>$.Svg(this.elementSvgG, \"g\", [], []);\r\n        this.box = <SVGRectElement>$.Svg(dragGroup, \"rect\", [\"width\",\"140\", \"height\", \"100\", \"rx\", \"10\", \"ry\", \"10\"], [\"operator-box\"]);\r\n        let title = <SVGTextElement>$.Svg(dragGroup,\"text\", [\"x\", \"5\", \"y\", \"21\"],[\"operator-title\"]);\r\n        title.textContent = caption;\r\n        this.debugInfoSvgText = <SVGTextElement>$.Svg(dragGroup, \"text\", [\"x\", \"0\", \"y\", \"100\"],[\"operator-debuginfo\"]);\r\n        this.debugInfoSvgText.textContent=\"No debug info\";\r\n\r\n        this.inputSvgG= <SVGGElement>$.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(0 50)\"], [\"operator-inputs\"]);\r\n        this.outputSvgG= <SVGGElement>$.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(140 50)\"], [\"operator-outputs\"]);\r\n\r\n\r\n        this.elementSvgG.onclick = (e) => {\r\n            console.log(\"FlowchartOperator this.elementSvgG.onclick\");\r\n            parent._notifyOperatorClicked(this, e);\r\n        };\r\n        \r\n        if (this.parent.Options.canUserMoveOperators) {\r\n            dragGroup.onmousedown = (e) => {\r\n                this.RegisterDragging(e);\r\n            }\r\n        }\r\n    }\r\n    public RegisterDragging(e:MouseEvent)\r\n    {\r\n        let offsetX= e.clientX-this.x;\r\n        let offsetY = e.clientY-this.y;\r\n\r\n        document.onmouseup = (e) => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n        };\r\n        document.onmousemove = e => {\r\n            //TODO: neue Position nur setzen, wenn this.element.clientRect innerhalb von parent.clientRectangle ist\r\n            this.MoveTo(e.clientX - offsetX, e.clientY - offsetY);\r\n        };\r\n    }\r\n    get Parent() { return this.parent };\r\n    get Caption() { return this.caption; }\r\n\r\n    get InputsKVIt(){return this.Inputs.entries()}\r\n    get OutputsKVIt(){return this.Outputs.entries()}\r\n    public GetOutputConnectorByIndex=(i:number)=>this.Outputs[i];\r\n    public GetInputConnectorByIndex=(i:number)=>this.Inputs[i];\r\n\r\n    public RemoveFromDOM(): void {\r\n        this.elementSvgG.remove();\r\n    }\r\n\r\n    protected AppendConnectors(inputs: FlowchartInputConnector[], outputs: FlowchartOutputConnector[]) {\r\n        if(this.Inputs.length!=0 || this.Outputs.length !=0) throw new Error(\"AppendConnectors may only be called once!\");\r\n        for (const i of inputs) {\r\n            if (i.Parent != this) continue;\r\n            this.Inputs.push(i);\r\n        }\r\n        for (const o of outputs) {\r\n            if (o.Parent != this) continue;\r\n            this.Outputs.push(o);\r\n        }\r\n        let num = Math.max(this.Inputs.length, this.Outputs.length);\r\n        let height = 50+num*20+10;\r\n        this.box.setAttribute(\"height\", \"\"+height);\r\n        this.debugInfoSvgText.setAttribute(\"y\", \"\"+height);\r\n    }\r\n\r\n    public MoveTo(x: number, y: number) {\r\n        let g = this.parent.Options.grid;\r\n        this.x = Math.round(x / g) * g;\r\n        this.y = Math.round(y / g) * g;\r\n        this.elementSvgG.setAttribute(\"transform\", `translate(${this.x} ${this.y})`);\r\n        for (const c of this.Inputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n        for (const c of this.Outputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n    }\r\n\r\n    public PopulateProperyGrid(parent:HTMLTableSectionElement):boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStart(ctx:SimulationContext){\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStop(ctx:SimulationContext){\r\n        return;\r\n    }\r\n\r\n    \r\n    protected SerializeInputsAndOutputs(ctx:SerializeContextAndAdressMap)\r\n    {\r\n        for (const input of this.Inputs) {\r\n            let variableAdress = 0;\r\n            let links = input.GetLinksCopy();\r\n            if(links.length==0){\r\n                variableAdress=1; //because unconnected inputs read from adress 1 (which is \"false\", 0, 0.0, black...)\r\n            }\r\n            else{\r\n                let out = links[0].From;\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(out.Type)!.get(out.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.ctx.writeU32(variableAdress);\r\n        }\r\n        for(const output of this.Outputs)\r\n        {\r\n            let variableAdress = 0;\r\n            if(output.LinksLength==0){\r\n                variableAdress=0; //because unconnected outputs write to adress 0 (which is never read!)\r\n            }\r\n            else{\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(output.Type)!.get(output.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.ctx.writeU32(variableAdress);\r\n        }\r\n    }\r\n\r\n    public SerializeToBinary(ctx:SerializeContextAndAdressMap)\r\n    {\r\n        //serialize Type\r\n        ctx.ctx.writeU32(this.TypeInfo.GlobalTypeIndex);\r\n        //Index of instance\r\n        ctx.ctx.writeU32(this.GlobalOperatorIndex);\r\n        this.SerializeInputsAndOutputs(ctx);\r\n        this.SerializeFurtherProperties(ctx);\r\n    }\r\n    \r\n    protected SerializeFurtherProperties(mapper:SerializeContextAndAdressMap):void{\r\n        return;\r\n    }\r\n}\r\n","import {FlowchartOperator, TypeInfo, PositionType, SingletonType} from \"./FlowchartOperator\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport {FlowchartInputConnector, FlowchartOutputConnector, ConnectorType} from \"./FlowchartConnector\";\r\nimport { SerializeContextAndAdressMap } from \"./FlowchartCompiler\";\r\nimport {$, KeyValueTuple} from \"../utils\";\r\nimport * as Song from \"./Songs\";\r\nimport { SimulationContext } from \"./SimulationContext\";\r\n\r\nconst Basic=\"Basic\";\r\nconst Arithmetic=\"Arithmetic\";\r\nconst Input=\"Input\";\r\nconst Sensor = \"Sensor\";\r\nconst Output=\"Output\";\r\nconst Converter=\"Converter\";\r\nconst Sound = \"Sound\";\r\nconst Control = \"Control\";\r\nconst Custom =\"Custom\";\r\n\r\nconst CONSTANT = \"Constant\";\r\nconst SONG_INDEX = \"Song Index\"\r\n\r\nexport class OperatorRegistry{\r\n    IsIndexKnown(globalTypeIndex: number) {\r\n        return this.index2Info.has(globalTypeIndex);\r\n    }\r\n    \r\n    private index2Info = new Map<number, TypeInfo>();\r\n    private groupName2operatorName2Info = new Map<string, Map<string, TypeInfo>>();\r\n    \r\n    private Register(globalTypeIndex:number, groupName:string, operatorName:string, position:PositionType, singleton:SingletonType, builder:(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null)=>FlowchartOperator)\r\n    {\r\n        let ti:TypeInfo=new TypeInfo(globalTypeIndex, groupName, operatorName, position, singleton, builder)\r\n        if(this.index2Info.has(globalTypeIndex)) throw new Error(`this.index2Info.has(globalTypeIndex) for ${groupName}::${operatorName}`);\r\n        this.index2Info.set(globalTypeIndex, ti);\r\n        if(!this.groupName2operatorName2Info.has(groupName)) this.groupName2operatorName2Info.set(groupName, new Map<string, TypeInfo>());\r\n        let operatorName2Info = this.groupName2operatorName2Info.get(groupName)!;\r\n        if(operatorName2Info.has(operatorName)) throw new Error(`operatorName2Info.has(operatorName) for ${groupName}::${operatorName}`);\r\n        operatorName2Info.set(operatorName, ti);\r\n    }\r\n\r\n    public CreateByIndex(index:number, parent: Flowchart, caption: string, configurationData:KeyValueTuple[]|null):FlowchartOperator|null\r\n    {\r\n        let ti=this.index2Info.get(index);\r\n        if(ti===undefined) return null;\r\n        return ti.Builder(parent, caption, ti, configurationData);\r\n    }\r\n\r\n    public GetTypeInfo(index:number):TypeInfo|null\r\n    {\r\n        let ti=this.index2Info.get(index);\r\n        if(ti===undefined) return null;\r\n        return ti;\r\n    }\r\n\r\n    public populateOperatorLib(parent: HTMLDivElement, onmousedownHandler: (e:MouseEvent, ti:TypeInfo)=>any) { \r\n        let y = 10;\r\n        let top = $.Html(parent, \"ul\", [], []);\r\n        for (const kv of this.groupName2operatorName2Info.entries()) {\r\n            let groupName = kv[0];\r\n            $.Html(top, \"li\", [], [], groupName);\r\n            let ul = $.Html(top, \"ul\", [], [\"nested\"]);\r\n            for (const info of kv[1].values()) {\r\n                let li = $.Html(ul, \"li\", [], [], info.OperatorName);\r\n                li.onmousedown = (e) => onmousedownHandler(e, info);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Build():OperatorRegistry{\r\n        let r:OperatorRegistry = new OperatorRegistry();\r\n        r.Register(1, Basic, \"AND\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_ANDOperator(p, ca, ti, co));\r\n        r.Register(2, Basic, \"OR\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_OROperator(p, ca, ti, co));\r\n        r.Register(3, Basic, \"XOR\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_XOROperator(p, ca, ti, co));\r\n        r.Register(4, Basic, \"NOT\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_NotOperator(p, ca, ti, co));\r\n        r.Register(5, Basic, \"RS\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_RSOperator(p, ca, ti, co));\r\n        r.Register(6, Basic, \"SR\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_SROperator(p, ca, ti, co));\r\n        r.Register(7, Basic,\"ConstTRUE\", PositionType.Input, SingletonType.Default, (p, ca, ti, co)=>new Basic_ConstTRUEOperator(p, ca, ti, co));\r\n        r.Register(8, Basic,\"ConstFALSE\", PositionType.Input, SingletonType.Default, (p, ca, ti, co)=>new Basic_ConstFALSEOperator(p, ca, ti, co));\r\n        r.Register(9, Basic, \"CNT\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_CNTOperator(p, ca, ti, co));\r\n        r.Register(10, Basic, \"Timekeeper\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_TimekeeperOperator(p, ca, ti, co));\r\n        r.Register(11, Basic,\"TON\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_TONOperator(p, ca, ti, co));\r\n        r.Register(12, Basic,\"TOF\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Basic_TOFOperator(p, ca, ti, co));\r\n        \r\n        r.Register(13, Arithmetic, \"ADD\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_ADDOperator(p, ca, ti, co));\r\n        r.Register(14, Arithmetic, \"SUB\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_SUBOperator(p, ca, ti, co));\r\n        r.Register(15, Arithmetic, \"MULTIPLY\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_MULTIPLYOperator(p, ca, ti, co));\r\n        r.Register(16, Arithmetic, \"DIVIDE\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_DIVIDEOperator(p, ca, ti, co));\r\n        r.Register(17, Arithmetic, \"MAX\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_MAXOperator(p, ca, ti, co));\r\n        r.Register(18, Arithmetic, \"MIN\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_MINOperator(p, ca, ti, co));\r\n        r.Register(19, Arithmetic,\"GreaterThan\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_GreaterThanOperator(p, ca, ti, co));\r\n        r.Register(20, Arithmetic,\"LessThan\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_LessThanOperator(p, ca, ti, co));\r\n        r.Register(21, Arithmetic, \"ConstINT\", PositionType.Input, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_ConstINTOperator(p, ca, ti, co));\r\n        r.Register(22, Arithmetic, \"LIMIT\", PositionType.Input, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_LIMITOperator(p, ca, ti, co));\r\n        r.Register(23, Arithmetic, \"LIMITMONITOR\", PositionType.Input, SingletonType.Default, (p, ca, ti, co)=>new Arithmetic_LIMITMONITOROperator(p, ca, ti, co));\r\n\r\n        r.Register(24, Converter, \"Bool2Color\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Bool2ColorConvert(p, ca, ti, co));\r\n        r.Register(25, Converter, \"Bool2Int\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Bool2IntConvert(p, ca, ti, co));\r\n        r.Register(26, Converter, \"Int2Bool\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Int2BoolConvert(p, ca, ti, co));\r\n        r.Register(27, Converter, \"Int2Float\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Int2FloatConvert(p, ca, ti, co));\r\n        r.Register(28, Converter, \"Int2Color\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Int2ColorConvert(p, ca, ti, co));\r\n        r.Register(29, Converter, \"Float2Int\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Float2IntConvert(p, ca, ti, co));\r\n        \r\n        r.Register(30, Input, \"GreenButton\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Input_GreenButtonOperator(p, ca, ti, co));\r\n        r.Register(31, Input, \"EncoderButton\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Input_EncoderButtonOperator(p, ca, ti, co));\r\n        r.Register(32, Input, \"EncoderTicks\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Input_EncoderTicksOperator(p, ca, ti, co));\r\n        r.Register(33, Input, \"RedButton\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Input_RedButtonOperator(p, ca, ti, co));\r\n        \r\n        r.Register(34, Sensor, \"Movement\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_MovementOperator(p, ca, ti, co));\r\n        r.Register(35, Sensor, \"AirTemperatureDS18\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirTemperatureDS18Operator(p, ca, ti, co));\r\n        r.Register(36, Sensor, \"AirTemperatureBME\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirTemperatureBMEOperator(p, ca, ti, co));\r\n        r.Register(37, Sensor, \"AirHumidity\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirHumidityOperator(p, ca, ti, co));\r\n        r.Register(38, Sensor, \"AirPressure\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirPressureOperator(p, ca, ti, co));\r\n        r.Register(39, Sensor, \"AirCO2\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirCO2Operator(p, ca, ti, co));\r\n        r.Register(40, Sensor, \"AirQuality\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AirQualityOperator(p, ca, ti, co));\r\n        r.Register(41, Sensor, \"AmbientBrightness\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AmbientBrightnessOperator(p, ca, ti, co));\r\n        r.Register(42, Sensor, \"AmbientNoise\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_AmbientNoise(p, ca, ti, co));\r\n        r.Register(43, Sensor, \"ExternalPressure\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_ExternalPressure(p, ca, ti, co));\r\n        r.Register(44, Sensor, \"HeaterTemperature\", PositionType.Input, SingletonType.Singleton, (p, ca, ti, co)=>new Sensor_HeaterTemperatureOperator(p, ca, ti, co));\r\n        \r\n        r.Register(45, Output, \"Relay\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_RelayOperator(p, ca, ti, co));\r\n        r.Register(46, Output, \"RedLed\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_RedLedOperator(p, ca, ti, co));\r\n        r.Register(47, Output, \"YellowLed\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_YellowLedOperator(p, ca, ti, co));\r\n        r.Register(48, Output, \"GreenLed\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_GreenLedOperator(p, ca, ti, co));\r\n        r.Register(49, Output, \"LED3\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Led3Operator(p, ca, ti, co));\r\n        r.Register(50, Output, \"LED4\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Led4Operator(p, ca, ti, co));\r\n        r.Register(51, Output, \"LED5\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Led5Operator(p, ca, ti, co));\r\n        r.Register(52, Output, \"LED6\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Led6Operator(p, ca, ti, co));\r\n        r.Register(53, Output, \"LED7\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Led7Operator(p, ca, ti, co));\r\n        r.Register(54, Output, \"Fan1\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Fan1Operator(p, ca, ti, co));\r\n        r.Register(55, Output, \"Fan2\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_Fan2Operator(p, ca, ti, co));\r\n        r.Register(56, Output, \"PowerLed\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Output_PowerLedOperator(p, ca, ti, co));\r\n\r\n        r.Register(57, Sound, \"Melody\", PositionType.Output, SingletonType.Singleton, (p, ca, ti, co)=>new Sound_Melody(p, ca, ti, co));\r\n        \r\n        r.Register(58, Control, \"PID\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Control_PID(p, ca, ti, co));\r\n        \r\n        \r\n        r.Register(100, Custom, \"XYZXYZBlock\", PositionType.Default, SingletonType.Default, (p, ca, ti, co)=>new Custom_XYZBlock(p, ca, ti, co))\r\n        return r;\r\n    }\r\n}\r\n\r\nclass Sensor_CommonSensorOperator extends FlowchartOperator {\r\n    private sensorValue:number=0;\r\n    private O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null, nameOfOutput:string, readonly minOutput:number, readonly maxOutput:number) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, nameOfOutput, 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([], [this.O]);\r\n        this.ElementSvgG.onclick=(e)=>{\r\n            console.log(\"Input_CommonButtonOperator this.ElementSvgG.onclick\");\r\n            parent._notifyOperatorClicked(this, e);\r\n            this.sensorValue=this.sensorValue==this.minOutput?this.maxOutput:this.minOutput;\r\n        }\r\n    }\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this.sensorValue=this.minOutput;\r\n    }\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        ctx.SetInteger(this.O, this.sensorValue);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Sensor_HeaterTemperatureOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"DegreesCelsius\", 25, 65);\r\n    }\r\n}\r\n\r\nexport class Sensor_AirTemperatureDS18Operator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Temperature*10\", 180, 250);\r\n    }\r\n}\r\n\r\nexport class Sensor_AirTemperatureBMEOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Temperature*10\", 180, 250);\r\n    }\r\n}\r\n\r\nexport class Sensor_AirHumidityOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"RelHumid%\", 40, 60);\r\n    }\r\n}\r\nexport class Sensor_AirPressureOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Pa\", 800, 1200);\r\n    }\r\n}\r\n\r\nexport class Sensor_AirCO2Operator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"CO2ppm\", 400, 1500);\r\n    }\r\n}\r\n\r\nexport class Sensor_AirQualityOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Quality%\", 20, 80);\r\n    }\r\n}\r\n\r\n\r\nexport class Sensor_AmbientBrightnessOperator extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Lux\", 200, 700);\r\n    }\r\n}\r\n\r\nexport class Sensor_AmbientNoise extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"NoisedBA\", 30, 80);\r\n    }\r\n}\r\n\r\nexport class Sensor_ExternalPressure extends Sensor_CommonSensorOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"Pa\", 1000, 2000);\r\n    }\r\n}\r\n\r\n\r\nexport class Sensor_MovementOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        let O = new FlowchartOutputConnector(this, \"Movement\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport class Basic_ANDOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.BOOLEAN);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.BOOLEAN);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetBoolean(this.A);\r\n        let B = ctx.GetBoolean(this.B);\r\n        ctx.SetBoolean(this.C, A && B);\r\n    }\r\n}\r\n\r\nexport class Basic_OROperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.BOOLEAN);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.BOOLEAN);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0,ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetBoolean(this.A);\r\n        let B = ctx.GetBoolean(this.B);\r\n        ctx.SetBoolean(this.C, A || B);\r\n    }\r\n}\r\n\r\nexport class Basic_XOROperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.BOOLEAN);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.BOOLEAN);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0,ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetBoolean(this.A);\r\n        let B = ctx.GetBoolean(this.B);\r\n        ctx.SetBoolean(this.C, A ? !B : B);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_ADDOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, A + B);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_SUBOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, A - B);\r\n    }\r\n}\r\n\r\n\r\nexport class Arithmetic_MULTIPLYOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, A * B);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_DIVIDEOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, A / B);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_MAXOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, Math.max(A,B));\r\n    }\r\n}\r\n\r\nexport class Arithmetic_MINOperator extends FlowchartOperator {\r\n    private A:FlowchartInputConnector;\r\n    private B:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        this.B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.A, this.B], [this.C]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let A = ctx.GetInteger(this.A);\r\n        let B = ctx.GetInteger(this.B);\r\n        ctx.SetInteger(this.C, Math.min(A,B));\r\n    }\r\n}\r\n\r\nexport class Basic_RSOperator extends FlowchartOperator {\r\n    private R:FlowchartInputConnector;\r\n    private S:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    private state:boolean=false;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.R = new FlowchartInputConnector(this, \"R\", 0, ConnectorType.BOOLEAN);\r\n        this.S = new FlowchartInputConnector(this, \"S\", 1, ConnectorType.BOOLEAN);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.R, this.S], [this.C]);\r\n    }\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this.state=false;\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        if(ctx.GetBoolean(this.R)) this.state=false;\r\n        else if(ctx.GetBoolean(this.S)) this.state = true;\r\n        ctx.SetBoolean(this.C, this.state);\r\n    }\r\n}\r\n\r\nexport class Basic_SROperator extends FlowchartOperator {\r\n    private R:FlowchartInputConnector;\r\n    private S:FlowchartInputConnector;\r\n    private C:FlowchartOutputConnector;\r\n    private state:boolean=false;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.R = new FlowchartInputConnector(this, \"R\", 0, ConnectorType.BOOLEAN);\r\n        this.S = new FlowchartInputConnector(this, \"S\", 1, ConnectorType.BOOLEAN);\r\n        this.C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.R, this.S], [this.C]);\r\n    }\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this.state=false;\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        if(ctx.GetBoolean(this.S)) this.state = true;\r\n        else if(ctx.GetBoolean(this.R)) this.state=false;\r\n        ctx.SetBoolean(this.C, this.state);\r\n    }\r\n}\r\n\r\nexport class Basic_CNTOperator extends FlowchartOperator {\r\n    private CountUp:FlowchartInputConnector;\r\n    private Reset:FlowchartInputConnector;\r\n    private PresetValue:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    private CurrentValue:FlowchartOutputConnector;\r\n    private _CurrentValue:number=0;\r\n    private lastInputValue:boolean=false;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.CountUp = new FlowchartInputConnector(this, \"CU\", 0, ConnectorType.BOOLEAN);\r\n        this.Reset = new FlowchartInputConnector(this, \"Reset\", 1, ConnectorType.BOOLEAN);\r\n        this.PresetValue = new FlowchartInputConnector(this, \"PV\", 2, ConnectorType.INTEGER);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.CurrentValue = new FlowchartOutputConnector(this, \"CV\", 1, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.CountUp, this.Reset, this.PresetValue], [this.OUT, this.CurrentValue]);\r\n    }\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this._CurrentValue=0;\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetBoolean(this.CountUp);\r\n        let PV=ctx.GetInteger(this.PresetValue);\r\n        if(ctx.GetBoolean(this.Reset)){\r\n            this._CurrentValue=0;\r\n        }else if(this.lastInputValue==false && currentInputValue==true && this._CurrentValue<PV){\r\n            this._CurrentValue++;\r\n            console.log(\"Logic_CNTOperator this._CurrentValue++; \"+this._CurrentValue);\r\n        }\r\n        ctx.SetBoolean(this.OUT, this._CurrentValue>=PV);//kann auch durch Veränderung des PV passieren, deshalb nicht im if\r\n        ctx.SetInteger(this.CurrentValue, this._CurrentValue);\r\n        this.lastInputValue=currentInputValue\r\n    }\r\n}\r\n\r\n\r\nexport class Basic_TimekeeperOperator extends FlowchartOperator {\r\n    private CountUp:FlowchartInputConnector;\r\n    private Reset:FlowchartInputConnector;\r\n    private PresetValue:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    private CurrentValue:FlowchartOutputConnector;\r\n    private _CurrentValueMs:number=0;\r\n    private lastInputValue:boolean=false;\r\n    private lastMillis:number=0;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.CountUp = new FlowchartInputConnector(this, \"CU\", 0, ConnectorType.BOOLEAN);\r\n        this.Reset = new FlowchartInputConnector(this, \"Reset\", 1, ConnectorType.BOOLEAN);\r\n        this.PresetValue = new FlowchartInputConnector(this, \"PV_ms\", 2, ConnectorType.INTEGER);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.CurrentValue = new FlowchartOutputConnector(this, \"CV_ms\", 1, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.CountUp, this.Reset, this.PresetValue], [this.OUT, this.CurrentValue]);\r\n    }\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this._CurrentValueMs=0;\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetBoolean(this.CountUp);\r\n        let PV=ctx.GetInteger(this.PresetValue);\r\n        if(ctx.GetBoolean(this.Reset)){\r\n            this._CurrentValueMs=0;\r\n            this.lastMillis=ctx.GetMillis();\r\n        }else if(this.lastInputValue==false && currentInputValue==true && this._CurrentValueMs<PV){\r\n            let now = ctx.GetMillis();\r\n            this._CurrentValueMs+=now-this.lastMillis;\r\n            this.lastMillis=now;\r\n            console.log(\"Logic_CNTOperator this._CurrentValue++; \"+this._CurrentValueMs);\r\n        }\r\n        ctx.SetBoolean(this.OUT, this._CurrentValueMs>=PV);//kann auch durch Veränderung des PV passieren, deshalb nicht im if\r\n        ctx.SetInteger(this.CurrentValue, this._CurrentValueMs);\r\n        this.lastInputValue=currentInputValue\r\n    }\r\n}\r\n\r\nexport class Basic_NotOperator extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.BOOLEAN);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        ctx.SetBoolean(this.OUT, !ctx.GetBoolean(this.IN));\r\n    }\r\n\r\n}\r\nclass Input_CommonButtonOperator extends FlowchartOperator {\r\n    private state:boolean=false;\r\n    private O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, \"IsPressed\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [this.O]);\r\n        this.ElementSvgG.onclick=(e)=>{\r\n            console.log(\"Input_CommonButtonOperator this.ElementSvgG.onclick\");\r\n            parent._notifyOperatorClicked(this, e);\r\n            this.state=!this.state;\r\n        }\r\n    }\r\n\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        this.state=false;\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        this.box.classList.remove(this.state?\"False\":\"True\");\r\n        this.box.classList.add(this.state?\"True\":\"False\");\r\n        ctx.SetBoolean(this.O, this.state);\r\n    }\r\n\r\n    OnSimulationStop(ctx:SimulationContext){\r\n        this.box.classList.remove(\"False\", \"True\");\r\n    }\r\n}\r\n\r\n\r\nexport class Input_GreenButtonOperator extends Input_CommonButtonOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Input_EncoderButtonOperator extends Input_CommonButtonOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Input_RedButtonOperator extends Input_CommonButtonOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Input_EncoderTicksOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    protected O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, \"Ticks\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([], [this.O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n\r\n    public OnSimulationStart(ctx: SimulationContext): void {\r\n        ctx.SetInteger(this.O, 1000);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport class Output_RelayOperator extends FlowchartOperator {\r\n    private I:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.I=new FlowchartInputConnector(this, \"Relay\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.I], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let state = ctx.GetBoolean(this.I);\r\n        this.box.classList.remove(state?\"False\":\"True\");\r\n        this.box.classList.add(state?\"True\":\"False\");\r\n    }\r\n}\r\n\r\nexport class Output_Fan1Operator extends FlowchartOperator {\r\n    private I:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.I=new FlowchartInputConnector(this, \"Power%\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.I], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let state = ctx.GetInteger(this.I);\r\n        this.box.innerHTML=state+\"%\";\r\n    }\r\n}\r\n\r\nexport class Output_Fan2Operator extends FlowchartOperator {\r\n    private I:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.I=new FlowchartInputConnector(this, \"Power%\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.I], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let state = ctx.GetInteger(this.I);\r\n        this.box.innerHTML=state+\"%\";\r\n    }\r\n}\r\n\r\nexport class Output_PowerLedOperator extends FlowchartOperator {\r\n    private I:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.I=new FlowchartInputConnector(this, \"Power%\", 0, ConnectorType.FLOAT);\r\n        this.AppendConnectors([this.I], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let state = ctx.GetFloat(this.I);\r\n        this.box.innerHTML=state+\"%\";\r\n    }\r\n}\r\n\r\n\r\nclass Output_CommonLedOperator extends FlowchartOperator {\r\n    protected  I:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null, protected colorOnTRUE:string, protected colorOnFALSE:string) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.I = new FlowchartInputConnector(this, \"LED\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.I], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        let state = ctx.GetBoolean(this.I);\r\n        this.box.style.fill=state?this.colorOnTRUE:this.colorOnFALSE;\r\n    }\r\n\r\n    OnSimulationStop(ctx:SimulationContext){\r\n        this.box.style.removeProperty(\"fill\");\r\n    }\r\n}\r\n\r\n\r\nexport class Output_RedLedOperator extends Output_CommonLedOperator {\r\n\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"red\", \"grey\");\r\n    }\r\n}\r\n\r\nexport class Output_YellowLedOperator extends Output_CommonLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"yellow\", \"grey\");\r\n    }\r\n}\r\n\r\nexport class Output_GreenLedOperator extends Output_CommonLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData, \"green\", \"grey\");\r\n    }\r\n}\r\n\r\nexport class Output_CommonRGBLedOperator extends FlowchartOperator {\r\n    protected LED:FlowchartInputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.LED = new FlowchartInputConnector(this, \"LED\", 0, ConnectorType.COLOR);\r\n        this.AppendConnectors([this.LED], []);\r\n    }\r\n\r\n    OnSimulationStep(ctx:SimulationContext){\r\n        this.box.style.fill=ctx.GetColor(this.LED);\r\n    }\r\n\r\n    OnSimulationStop(ctx:SimulationContext){\r\n        this.box.style.removeProperty(\"fill\");\r\n    }\r\n}\r\n\r\nexport class Output_Led3Operator extends Output_CommonRGBLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Output_Led4Operator extends Output_CommonRGBLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Output_Led5Operator extends Output_CommonRGBLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Output_Led6Operator extends Output_CommonRGBLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Output_Led7Operator extends Output_CommonRGBLedOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n    }\r\n}\r\n\r\nexport class Basic_ConstTRUEOperator extends FlowchartOperator {\r\n    protected O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, \"TRUE\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [this.O]);\r\n    }\r\n\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        ctx.SetBoolean(this.O, false);\r\n    }\r\n}\r\n\r\nexport class Basic_ConstFALSEOperator extends FlowchartOperator {\r\n\r\n    protected O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, \"TRUE\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [this.O]);\r\n    }\r\n\r\n    OnSimulationStart(ctx:SimulationContext){\r\n        ctx.SetBoolean(this.O, true);\r\n    }\r\n}\r\n\r\nexport class Sound_Melody extends FlowchartOperator {\r\n  \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        let A = new FlowchartInputConnector(this, \"Trigger\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A], []);\r\n        this.cfg_setDefault(SONG_INDEX, 0);\r\n    }\r\n\r\n    private songIndexHTMLSelect:HTMLSelectElement|null=null;\r\n    public PopulateProperyGrid(tbody:HTMLTableSectionElement):boolean\r\n    {\r\n        this.songIndexHTMLSelect=$.InputSelect(tbody, Song.default(), SONG_INDEX, this.configurationData);\r\n        return true;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        if(this.songIndexHTMLSelect==null) return;\r\n        this.cfg_setValue(SONG_INDEX, parseInt(this.songIndexHTMLSelect.value));\r\n    }\r\n\r\n    protected SerializeFurtherProperties(ctx:SerializeContextAndAdressMap):void{\r\n        ctx.ctx.writeS32(this.cfg_getValue(SONG_INDEX, 0));\r\n        return;\r\n    }\r\n}\r\n\r\nexport class Arithmetic_ConstINTOperator extends FlowchartOperator {\r\n    private O:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.O = new FlowchartOutputConnector(this, \"Out\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([], [this.O]);\r\n        this.cfg_setDefault(CONSTANT, 0);\r\n    }\r\n\r\n    private constantHTMLInput:HTMLInputElement|null=null;\r\n    public PopulateProperyGrid(tbody:HTMLTableSectionElement):boolean\r\n    {\r\n        this.constantHTMLInput=$.InputNumber(tbody, -32768, 32767, CONSTANT, this.configurationData);\r\n        return true;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        if(this.constantHTMLInput==null) return;\r\n        this.cfg_setValue(CONSTANT, this.constantHTMLInput.valueAsNumber);\r\n    }\r\n\r\n    protected SerializeFurtherProperties(ctx:SerializeContextAndAdressMap):void{\r\n        ctx.ctx.writeS32(this.cfg_getValue(CONSTANT, 0));\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStart(ctx:SimulationContext){\r\n        ctx.SetInteger(this.O, this.cfg_getValue(CONSTANT, 0));\r\n    }\r\n\r\n}\r\n\r\n\r\nconst COLOR_TRUE=\"Color for TRUE\";\r\nconst COLOR_FALSE=\"Color for FALSE\";\r\n\r\nexport class Bool2ColorConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.BOOLEAN);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.COLOR);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    private colorTRUEHTMLInput:HTMLInputElement|null=null;\r\n    private colorFALSEHTMLInput:HTMLInputElement|null=null;\r\n    \r\n    public PopulateProperyGrid(tbody:HTMLTableSectionElement):boolean\r\n    {\r\n        this.colorTRUEHTMLInput=$.InputColor(tbody, COLOR_TRUE, this.configurationData);\r\n        this.colorFALSEHTMLInput=$.InputColor(tbody, COLOR_FALSE, this.configurationData);\r\n        return true;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        if(this.colorTRUEHTMLInput==null || this.colorFALSEHTMLInput==null) return;\r\n        this.cfg_setValue(COLOR_TRUE, this.colorTRUEHTMLInput.value);\r\n        this.cfg_setValue(COLOR_FALSE, this.colorFALSEHTMLInput.value);\r\n    }\r\n\r\n    protected SerializeFurtherProperties(ctx:SerializeContextAndAdressMap):void{\r\n        let colorString = this.cfg_getValue(COLOR_TRUE, \"#ff0000\");\r\n        let colorNum=$.ColorDomString2ColorNum(colorString);\r\n        ctx.ctx.writeU32(colorNum);\r\n        colorString = this.cfg_getValue(COLOR_FALSE, \"#000000\");\r\n        colorNum=$.ColorDomString2ColorNum(colorString);\r\n        ctx.ctx.writeU32(colorNum);\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetBoolean(this.IN);\r\n        let color =currentInputValue?this.cfg_getValue(COLOR_TRUE, \"RED\"):this.cfg_getValue(COLOR_FALSE, \"GREY\");\r\n        ctx.SetColor(this.OUT, color);\r\n    }\r\n}\r\n\r\nconst NUMBER_TRUE=\"Number for TRUE\";\r\nconst NUMBER_FALSE=\"Number for FALSE\";\r\n\r\nexport class Bool2IntConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    private numberTRUEHTMLInput:HTMLInputElement|null=null;\r\n    private numberFALSEHTMLInput:HTMLInputElement|null=null;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.BOOLEAN);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    public PopulateProperyGrid(tbody:HTMLTableSectionElement):boolean\r\n    {\r\n        this.numberTRUEHTMLInput=$.InputNumber(tbody, Number.MIN_VALUE, Number.MAX_VALUE, NUMBER_TRUE, this.configurationData);\r\n        this.numberFALSEHTMLInput=$.InputNumber(tbody, Number.MIN_VALUE, Number.MAX_VALUE, NUMBER_FALSE, this.configurationData);\r\n        return true;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        if(this.numberFALSEHTMLInput==null || this.numberTRUEHTMLInput==null) return;\r\n        this.cfg_setValue(NUMBER_TRUE, this.numberTRUEHTMLInput.valueAsNumber);\r\n        this.cfg_setValue(NUMBER_FALSE, this.numberFALSEHTMLInput.valueAsNumber);\r\n    }\r\n\r\n    protected SerializeFurtherProperties(ctx:SerializeContextAndAdressMap):void{\r\n        ctx.ctx.writeS32(this.cfg_getValue(NUMBER_TRUE, 1));\r\n        ctx.ctx.writeS32(this.cfg_getValue(NUMBER_FALSE, 0));\r\n        return;\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let i = ctx.GetBoolean(this.IN);\r\n        ctx.SetInteger(this.OUT, i?this.cfg_getValue(NUMBER_TRUE, 1):this.cfg_getValue(NUMBER_FALSE, 0));\r\n    }\r\n}\r\n\r\nexport class Int2BoolConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.INTEGER);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let i = ctx.GetInteger(this.IN);\r\n        ctx.SetBoolean(this.OUT, i!=0);\r\n    }\r\n}\r\n\r\nexport class Int2FloatConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.INTEGER);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.FLOAT);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let i = ctx.GetInteger(this.IN);\r\n        ctx.SetFloat(this.OUT, i);\r\n    }\r\n}\r\n\r\n\r\nexport class Int2ColorConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.INTEGER);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.COLOR);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetInteger(this.IN);\r\n        ctx.SetColor(this.OUT, currentInputValue?\"RED\": \"GREY\");//TODO: Has to be improved\r\n    }\r\n}\r\n\r\nexport class Float2IntConvert extends FlowchartOperator {\r\n    private IN:FlowchartInputConnector;\r\n    private OUT:FlowchartOutputConnector;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.IN = new FlowchartInputConnector(this, \"IN\", 0, ConnectorType.FLOAT);\r\n        this.OUT = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.IN], [this.OUT]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let i = ctx.GetFloat(this.IN);\r\n        ctx.SetInteger(this.OUT, i);\r\n    }\r\n}\r\n\r\nexport class Basic_TONOperator extends FlowchartOperator {\r\n    private inputTRIGGER:FlowchartInputConnector;\r\n    private inputPresetTime_msecs:FlowchartInputConnector;\r\n    private output:FlowchartOutputConnector;\r\n    private outputElapsedTime_msecs:FlowchartOutputConnector;\r\n    private lastInputValue:boolean=false;\r\n    private inputPositiveEdge:number = Number.MAX_VALUE;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.inputTRIGGER = new FlowchartInputConnector(this, \"TRIGGER\", 0, ConnectorType.BOOLEAN);\r\n        this.inputPresetTime_msecs = new FlowchartInputConnector(this, \"PT_MS\", 1, ConnectorType.INTEGER);\r\n        this.output = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.outputElapsedTime_msecs = new FlowchartOutputConnector(this, \"ET_MS\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.inputTRIGGER, this.inputPresetTime_msecs], [this.output,this.outputElapsedTime_msecs]);\r\n    }\r\n\r\n    public OnSimulationStart(ctx:SimulationContext){\r\n        this.inputPositiveEdge = Number.MAX_VALUE;\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetBoolean(this.inputTRIGGER);\r\n        let presetTime_msecs = ctx.GetInteger(this.inputPresetTime_msecs);\r\n        let now = ctx.GetMillis();\r\n        if(this.lastInputValue==false && currentInputValue==true){\r\n            this.inputPositiveEdge=now;\r\n        }\r\n        else if(currentInputValue==false){\r\n            this.inputPositiveEdge=Number.MAX_VALUE;\r\n        }\r\n        this.lastInputValue=currentInputValue;\r\n        let elapsed = (now-this.inputPositiveEdge);\r\n        ctx.SetBoolean(this.output, elapsed>=presetTime_msecs);\r\n        ctx.SetInteger(this.outputElapsedTime_msecs, elapsed);\r\n    }\r\n}\r\n\r\nexport class Basic_TOFOperator extends FlowchartOperator {\r\n  \r\n    private inputTRIGGER:FlowchartInputConnector;\r\n    private inputPresetTime_msecs:FlowchartInputConnector;\r\n    private output:FlowchartOutputConnector;\r\n    private outputElapsedTime_msecs:FlowchartOutputConnector;\r\n    private lastInputValue:boolean=false;\r\n    private inputNegativeEdge:number = 0;\r\n    \r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.inputTRIGGER = new FlowchartInputConnector(this, \"TRIGGER\", 0, ConnectorType.BOOLEAN);\r\n        this.inputPresetTime_msecs = new FlowchartInputConnector(this, \"PT_MS\", 1, ConnectorType.INTEGER);\r\n        this.output = new FlowchartOutputConnector(this, \"OUT\", 0, ConnectorType.BOOLEAN);\r\n        this.outputElapsedTime_msecs = new FlowchartOutputConnector(this, \"ET_MS\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.inputTRIGGER, this.inputPresetTime_msecs], [this.output,this.outputElapsedTime_msecs]);\r\n    }\r\n\r\n    public OnSimulationStart(ctx:SimulationContext){\r\n        this.inputNegativeEdge = 0;\r\n    }\r\n\r\n    public OnSimulationStep(ctx:SimulationContext){\r\n        let currentInputValue = ctx.GetBoolean(this.inputTRIGGER);\r\n        let presetTime_msecs = ctx.GetInteger(this.inputPresetTime_msecs);\r\n        let now = ctx.GetMillis();\r\n        if(this.lastInputValue==true && currentInputValue==false){\r\n            this.inputNegativeEdge=now;\r\n        }\r\n        else if(currentInputValue==true){\r\n            this.inputNegativeEdge=0;\r\n        }\r\n        this.lastInputValue=currentInputValue;\r\n        let elapsed = (now-this.inputNegativeEdge);\r\n        elapsed=Math.min(elapsed, presetTime_msecs)\r\n        ctx.SetBoolean(this.output, currentInputValue || (elapsed<presetTime_msecs));\r\n        ctx.SetInteger(this.outputElapsedTime_msecs, elapsed);\r\n    }\r\n}\r\n\r\n\r\nexport class Arithmetic_LIMITOperator extends FlowchartOperator {\r\n    protected Minimum:FlowchartInputConnector;\r\n    protected Input:FlowchartInputConnector;\r\n    protected Maximum:FlowchartInputConnector;\r\n    protected Output:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.Minimum = new FlowchartInputConnector(this, \"Minimum\", 0, ConnectorType.INTEGER);\r\n        this.Input = new FlowchartInputConnector(this, \"Input\", 1, ConnectorType.INTEGER);\r\n        this.Maximum = new FlowchartInputConnector(this, \"Maximum\", 2, ConnectorType.INTEGER);\r\n        this.Output = new FlowchartOutputConnector(this, \"Output\", 0, ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.Minimum, this.Input, this.Maximum], [this.Output]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx: SimulationContext): void {\r\n        let i = ctx.GetInteger(this.Input);\r\n        let min = ctx.GetInteger(this.Minimum);\r\n        let max = ctx.GetInteger(this.Minimum);\r\n        ctx.SetInteger(this.Output, i>max?max:i<min?min:i);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_LIMITMONITOROperator extends FlowchartOperator {\r\n    protected Minimum:FlowchartInputConnector;\r\n    protected Input:FlowchartInputConnector;\r\n    protected Maximum:FlowchartInputConnector;\r\n    protected Hysterese:FlowchartInputConnector;\r\n    protected LLE:FlowchartOutputConnector;\r\n    protected ULE:FlowchartOutputConnector;\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.Minimum = new FlowchartInputConnector(this, \"Minimum\", 0, ConnectorType.INTEGER);\r\n        this.Input = new FlowchartInputConnector(this, \"Input\", 1, ConnectorType.INTEGER);\r\n        this.Maximum = new FlowchartInputConnector(this, \"Maximum\", 2, ConnectorType.INTEGER);\r\n        this.Hysterese = new FlowchartInputConnector(this, \"Hysterese\", 3, ConnectorType.INTEGER);\r\n        this.LLE = new FlowchartOutputConnector(this, \"LLE\", 0, ConnectorType.BOOLEAN);\r\n        this.ULE = new FlowchartOutputConnector(this, \"ULE\", 1, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([this.Minimum, this.Input, this.Maximum], [this.LLE, this.ULE]);\r\n    }\r\n\r\n    public OnSimulationStep(ctx: SimulationContext): void {\r\n        let i = ctx.GetInteger(this.Input);\r\n        let min = ctx.GetInteger(this.Minimum);\r\n        let max = ctx.GetInteger(this.Minimum);\r\n        let h = ctx.GetInteger(this.Hysterese);\r\n        if(i>max){\r\n            ctx.SetBoolean(this.ULE, true);\r\n        }else if(i<=max-h){\r\n            ctx.SetBoolean(this.ULE, false);\r\n        }\r\n        if(i<min){\r\n            ctx.SetBoolean(this.LLE, true);\r\n        } else if(i>=min+h){\r\n            ctx.SetBoolean(this.LLE, false);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class Arithmetic_GreaterThanOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        let A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class Arithmetic_LessThanOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        let A = new FlowchartInputConnector(this, \"A\", 0, ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", 1, ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", 0, ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class Custom_XYZBlock extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        let A = new FlowchartInputConnector(this, \"TempVL\", 0, ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"TempRL\", 1, ConnectorType.INTEGER);\r\n        let B1 = new FlowchartInputConnector(this, \"Switch\", 2, ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"Motor\", 0,ConnectorType.BOOLEAN);\r\n        let C1 = new FlowchartOutputConnector(this, \"Valve\", 1,ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B, B1], [C, C1]);\r\n    }\r\n\r\n    private value1HTMLInput:HTMLInputElement|null=null;\r\n    private value2HTMLInput:HTMLInputElement|null=null;\r\n    private value3HTMLInput:HTMLInputElement|null=null;\r\n    private color1HTMLInput:HTMLInputElement|null=null;\r\n    public PopulateProperyGrid(tbody:HTMLTableSectionElement):boolean\r\n    {\r\n        this.value1HTMLInput=$.InputNumber(tbody, -32768, 32767, \"Value1\", this.configurationData);\r\n        this.value1HTMLInput=$.InputNumber(tbody, -32768, 32767, \"Value2\", this.configurationData);\r\n        this.value1HTMLInput=$.InputNumber(tbody, -32768, 32767, \"Value3\", this.configurationData);\r\n        this.color1HTMLInput=$.InputColor(tbody, \"Color1\", this.configurationData);\r\n        return true;\r\n    }\r\n\r\n    public SavePropertyGrid(tbody:HTMLTableSectionElement){\r\n        this.cfg_setValue(\"Value1\", this.value1HTMLInput!.valueAsNumber);\r\n        this.cfg_setValue(\"Value2\", this.value2HTMLInput!.valueAsNumber);\r\n        this.cfg_setValue(\"Value3\", this.value3HTMLInput!.valueAsNumber);\r\n        this.cfg_setValue(\"Color1\", this.color1HTMLInput!.valueAsNumber);\r\n    }\r\n\r\n    protected SerializeFurtherProperties(ctx:SerializeContextAndAdressMap):void{\r\n        ctx.ctx.writeS32(this.cfg_getValue(\"Value1\", 0));\r\n        ctx.ctx.writeS32(this.cfg_getValue(\"Value2\", 0));\r\n        ctx.ctx.writeS32(this.cfg_getValue(\"Value3\", 0));\r\n        let colorString = this.cfg_getValue(\"Color1\", \"#000000\");\r\n        let colorNum=$.ColorDomString2ColorNum(colorString);\r\n        ctx.ctx.writeU32(colorNum);\r\n        return;\r\n    }\r\n}\r\n\r\nexport class Control_PID extends FlowchartOperator {\r\n    private inputActualValue:FlowchartInputConnector;\r\n    private inputSetpoint:FlowchartInputConnector;\r\n    private inputKP:FlowchartInputConnector;\r\n    private inputKI:FlowchartInputConnector;\r\n    private inputKD:FlowchartInputConnector;\r\n    private output:FlowchartOutputConnector;\r\n\r\n\r\n    constructor(parent: Flowchart, caption: string, ti:TypeInfo, configurationData:KeyValueTuple[]|null) {\r\n        super(parent, caption, ti, configurationData);\r\n        this.inputActualValue = new FlowchartInputConnector(this, \"Actual\", 0, ConnectorType.FLOAT);\r\n        this.inputSetpoint = new FlowchartInputConnector(this, \"Setpoint\", 1, ConnectorType.FLOAT);\r\n        this.inputKP= new FlowchartInputConnector(this, \"KP\", 2, ConnectorType.FLOAT);\r\n        this.inputKI= new FlowchartInputConnector(this, \"KI\", 3, ConnectorType.FLOAT);\r\n        this.inputKD= new FlowchartInputConnector(this, \"KD\", 4, ConnectorType.FLOAT);\r\n        this.output = new FlowchartOutputConnector(this, \"Out\", 1,ConnectorType.INTEGER);\r\n        this.AppendConnectors([this.inputActualValue, this.inputSetpoint, this.inputKP, this.inputKI, this.inputKD], [this.output]);\r\n    }\r\n}","\r\nexport class SerializeContext {\r\n    public writeGUID(guid: Uint8Array) {\r\n        for (let i = 0; i < 16; i++) {\r\n            this.bufferDV.setUint8(this.bufferOffset + i, guid[i]);\r\n        }\r\n        this.bufferOffset += 16;\r\n    }\r\n\r\n    public consumeGUIDandCompare(compare:Uint8Array): boolean {\r\n        let val=true;\r\n        for (let i = 0; i < 16; i++) {\r\n            if(compare[i]!=this.bufferDV.getUint8(this.bufferOffset + i)){\r\n                val=false;\r\n                break;\r\n            }\r\n        }\r\n        this.bufferOffset += 16;\r\n        return val;\r\n    }\r\n    private bufferDV: DataView;\r\n    constructor(private buffer: ArrayBuffer, private bufferOffset: number = 0) {\r\n        this.bufferDV = new DataView(buffer);\r\n    }\r\n\r\n    public funhash(start:number, end:number):number{\r\n        end=Math.min(end, this.bufferDV.byteLength);\r\n        for(var i = start, h = 0xdeadbeef; i < end; i++)\r\n            h = Math.imul(h ^ this.bufferDV.getUint8(i), 2654435761);\r\n        return (h ^ h >>> 16) >>> 0;\r\n    }\r\n\r\n    public overwriteU32(theNumber: number, offset:number): void {\r\n        if(offset>this.bufferOffset-4) throw new Error(\"offset>this.bufferOffset-4\");\r\n        this.bufferDV.setUint32(offset, theNumber, true);\r\n    }\r\n    public writeS32(theNumber: number): void {\r\n        this.bufferDV.setInt32(this.bufferOffset, theNumber, true);\r\n        this.bufferOffset += 4;\r\n    }\r\n\r\n    public writeU32(theNumber: number): void {\r\n        this.bufferDV.setUint32(this.bufferOffset, theNumber, true);\r\n        this.bufferOffset += 4;\r\n    }\r\n\r\n    public writeF32(theNumber: number): void {\r\n        this.bufferDV.setFloat32(this.bufferOffset, theNumber, true);\r\n        this.bufferOffset += 4;\r\n    }\r\n\r\n    public readF32(): number {\r\n        let val = this.bufferDV.getFloat32(this.bufferOffset, true);\r\n        this.bufferOffset += 4;\r\n        return val;\r\n    }\r\n\r\n    public readU32(): number {\r\n        let val = this.bufferDV.getUint32(this.bufferOffset, true);\r\n        this.bufferOffset += 4;\r\n        return val;\r\n    }\r\n\r\n    public readS32(): number {\r\n        let val = this.bufferDV.getInt32(this.bufferOffset, true);\r\n        this.bufferOffset += 4;\r\n        return val;\r\n    }\r\n\r\n    public getResult(): ArrayBuffer {\r\n        return this.buffer.slice(0, this.bufferOffset);\r\n    }\r\n}\r\n","import { HashAndBufAndMaps, SortedOperatorsAndMaps } from \"./FlowchartCompiler\";\r\nimport { FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { SimulationContext } from \"./SimulationContext\";\r\n\r\nexport class SimulationManager implements SimulationContext{\r\n    private booleans!: boolean[];\r\n    private integers!:number[];\r\n    private floats!:number[];\r\n    private colors!:string[];\r\n    private millisSince1970!:number;\r\n    private running:boolean=false;\r\n\r\n    constructor(private sortedOperatorsAndMaps: SortedOperatorsAndMaps){\r\n        this.resetDatastructures()!;\r\n    }\r\n\r\n    private resetDatastructures(){\r\n        this.booleans =new Array(this.sortedOperatorsAndMaps.typeIndex2maxOffset.get(0));\r\n        this.integers  = new Array(this.sortedOperatorsAndMaps.typeIndex2maxOffset.get(1));\r\n        this.floats  = new Array(this.sortedOperatorsAndMaps.typeIndex2maxOffset.get(2));\r\n        this.colors  = new Array(this.sortedOperatorsAndMaps.typeIndex2maxOffset.get(3));\r\n        this.millisSince1970=Date.now();\r\n    }\r\n\r\n\r\n    SetBoolean(outConn: FlowchartOutputConnector, value: boolean): void {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(0)!.get(outConn.GlobalConnectorIndex)!;\r\n        this.booleans[i]=value;\r\n    }\r\n    SetInteger(outConn: FlowchartOutputConnector, value: number): void {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(1)!.get(outConn.GlobalConnectorIndex)!;\r\n        this.integers[i]=value;\r\n    }\r\n    SetFloat(outConn: FlowchartOutputConnector, value: number): void {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(2)!.get(outConn.GlobalConnectorIndex)!;\r\n        this.floats[i]=value;\r\n    }\r\n    SetColor(outConn: FlowchartOutputConnector, value: string): void {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(3)!.get(outConn.GlobalConnectorIndex)!;\r\n        this.colors[i]=value;\r\n    }\r\n    GetBoolean(inConn: FlowchartInputConnector): boolean {\r\n        \r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(0)!.get(inConn.GetGlobalConnectorIndexOfSignalSource())!;\r\n        return this.booleans[i];\r\n    }\r\n    GetInteger(inConn: FlowchartInputConnector): number {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(1)!.get(inConn.GetGlobalConnectorIndexOfSignalSource())!;\r\n        return this.integers[i];\r\n    }\r\n    GetFloat(inConn: FlowchartInputConnector): number {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(2)!.get(inConn.GetGlobalConnectorIndexOfSignalSource())!;\r\n        return this.floats[i];\r\n    }\r\n    GetColor(inConn: FlowchartInputConnector): string {\r\n        let i = this.sortedOperatorsAndMaps.typeIndex2globalConnectorIndex2adressOffset.get(3)!.get(inConn.GetGlobalConnectorIndexOfSignalSource())!;\r\n        return this.colors[i];\r\n    }\r\n\r\n    public Start(warmstart:boolean=false){\r\n        if(!warmstart) this.resetDatastructures();\r\n        this.running=true;\r\n        for(let o of this.sortedOperatorsAndMaps.sortedOperators){\r\n            o.OnSimulationStart(this);\r\n        }\r\n        window.requestAnimationFrame(()=>this.Step());\r\n\r\n    }\r\n\r\n    public Stop(){\r\n        this.running=false;\r\n    }\r\n\r\n\r\n    Step():void{\r\n        this.millisSince1970= Date.now();\r\n        for(let o of this.sortedOperatorsAndMaps.sortedOperators){\r\n            o.OnSimulationStep(this);\r\n        }\r\n        //colorize booleans links\r\n        for(let kv of this.sortedOperatorsAndMaps.typeIndex2adressOffset2ListOfLinks.get(0)!.entries())\r\n        {\r\n            let adressOffset=kv[0];\r\n            if(adressOffset<2) continue;\r\n            let value = this.booleans[adressOffset]\r\n            let linksToChange=kv[1];\r\n            linksToChange.forEach((e)=>{\r\n                e.SetColor(value?\"red\":\"grey\");\r\n                e.SetCaption(\"\"+value);\r\n            });\r\n        }\r\n\r\n        //colorize integers links\r\n        for(let kv of this.sortedOperatorsAndMaps.typeIndex2adressOffset2ListOfLinks.get(1)!.entries())\r\n        {\r\n            let adressOffset=kv[0];\r\n            if(adressOffset<2) continue;\r\n            let value = this.integers[adressOffset]\r\n            let linksToChange=kv[1];\r\n            linksToChange.forEach((e)=>{\r\n                e.SetCaption(\"\"+value);\r\n            });\r\n        }\r\n        //colorize floats links\r\n        for(let kv of this.sortedOperatorsAndMaps.typeIndex2adressOffset2ListOfLinks.get(2)!.entries())\r\n        {\r\n            let adressOffset=kv[0];\r\n            if(adressOffset<2) continue;\r\n            let value = this.floats[adressOffset]\r\n            let linksToChange=kv[1];\r\n            linksToChange.forEach((e)=>{\r\n                e.SetCaption(\"\"+value);\r\n            });\r\n        }\r\n        //colorize colors links\r\n        for(let kv of this.sortedOperatorsAndMaps.typeIndex2adressOffset2ListOfLinks.get(3)!.entries())\r\n        {\r\n            let adressOffset=kv[0];\r\n            if(adressOffset<2) continue;\r\n            let value = this.colors[adressOffset]\r\n            let linksToChange=kv[1];\r\n            linksToChange.forEach((e)=>{\r\n                e.SetCaption(value);\r\n                e.SetColor(value);\r\n            });\r\n        }\r\n        if(this.running){\r\n            window.requestAnimationFrame(()=>this.Step());\r\n        }\r\n        else{\r\n            for(let o of this.sortedOperatorsAndMaps.sortedOperators){\r\n                o.OnSimulationStop(this);\r\n            }\r\n            for(let types of this.sortedOperatorsAndMaps.typeIndex2adressOffset2ListOfLinks.values())\r\n            {\r\n                for(let kv of types.entries()){\r\n                    let adressOffset=kv[0];\r\n                    if(adressOffset<2) continue;\r\n                    let value = this.booleans[adressOffset]\r\n                    let linksToChange=kv[1];\r\n                    linksToChange.forEach((e)=>{\r\n                        e.SetColor(\"blue\");\r\n                        e.SetCaption(\"\");\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    GetMillis(): number {\r\n        return this.millisSince1970;\r\n    }\r\n\r\n}","import { StringNumberTuple } from \"../utils\";\r\nexport default function(){ return [\r\n\tnew StringNumberTuple(\"No Song\", 0),\r\n\tnew StringNumberTuple(\"positive\", 1),\r\n\tnew StringNumberTuple(\"negative\", 2),\r\n\tnew StringNumberTuple(\"Barbie_girl\", 3),\r\n\tnew StringNumberTuple(\"HauntedHouse\", 4),\r\n\tnew StringNumberTuple(\"axelf\", 5),\r\n\tnew StringNumberTuple(\"Bond_007\", 6),\r\n];\r\n};\r\n","//https://en.wikipedia.org/wiki/Topological_sorting\r\n\r\n\r\nenum MarkerState\r\n{\r\n    NONE,\r\n    TEMPORARY,\r\n    PERMANENT,\r\n}\r\n\r\nexport class  NodeWrapper<N> {\r\n    constructor(private payload:N) {\r\n        this.Mark=MarkerState.NONE;\r\n        this.DependendNodes=[];\r\n    }\r\n    public Mark:MarkerState\r\n    public DependendNodes:NodeWrapper<N>[];\r\n    get Payload() {return this.payload;}\r\n};\r\n\r\nexport class TopologicalSortDFS<N>{\r\n    private L:Array<NodeWrapper<N>>;\r\n    constructor()\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n    }\r\n\r\n    public sort(headNode:Array<NodeWrapper<N>>)\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n        headNode.forEach((n)=>this.visit(n));\r\n        return this.L;\r\n    }\r\n\r\n    private visit(n:NodeWrapper<N>){\r\n        if(n.Mark==MarkerState.PERMANENT) return;\r\n        if(n.Mark==MarkerState.TEMPORARY) throw new Error(\"not a DAG\");\r\n        n.Mark=MarkerState.TEMPORARY;\r\n        for (const d of n.DependendNodes) {\r\n            this.visit(d);\r\n        }\r\n        n.Mark=MarkerState.PERMANENT;\r\n        this.L.push(n);\r\n    }\r\n}","export class Utils\r\n{\r\n    public static EventCoordinatesInSVG(evt:MouseEvent, element:Element, positionRatio:number=1):Location2D {\r\n        let rect = element.getBoundingClientRect();\r\n        return {x: (evt.clientX - rect.left)/positionRatio, y:(evt.clientY - rect.top)/positionRatio}\r\n    }\r\n}\r\n\r\nexport interface Location2D {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface KeyValueTuple {\r\n    key: string;\r\n    value: any;\r\n}\r\n\r\nexport class StringNumberTuple{\r\n    public constructor(public s:string, public n:number){}\r\n}\r\n\r\n\r\nexport class $\r\n{\r\n    public static readonly SVGNS = \"http://www.w3.org/2000/svg\";\r\n    public static readonly XLINKNS = \"http://www.w3.org/1999/xlink\";\r\n    public static readonly HTMLNS = \"http://www.w3.org/1999/xhtml\";\r\n\r\n    public static Svg(parent: Element, type:string,  attributes:string[], classes?: string[]):SVGElement {\r\n        return  parent.appendChild(<SVGElement>$.Elem($.SVGNS, type, attributes, classes));\r\n    }\r\n\r\n    //<svg class=\"icon icon-wastebasket\"><use xlink:href=\"#icon-wastebasket\"></use></svg>\r\n    public static SvgIcon(parent: Element, iconname:string):SVGSVGElement\r\n    {\r\n        let svg = <SVGSVGElement>$.Svg(parent, \"svg\", [], [\"icon\", \"icon-\"+iconname]);\r\n        let use =$.Svg(svg, \"use\", [], []);\r\n        use.setAttributeNS(this.XLINKNS, \"href\", \"#icon-\"+iconname);\r\n        parent.appendChild(svg);\r\n        return svg;\r\n    }\r\n\r\n    public static ColorNumColor2ColorDomString(num:number):string {\r\n        let str = num.toString(16);\r\n        while (str.length < 6) str = \"0\" + num;\r\n        return \"#\"+str;\r\n    }\r\n\r\n    public static ColorDomString2ColorNum(colorString: string):number {\r\n        return parseInt(colorString.substring(1), 16);\r\n    }\r\n\r\n    public static Html(parent: Element, type:string,  attributes:string[], classes?: string[], textContent?:string):HTMLElement {\r\n        return parent.appendChild(<HTMLElement>$.Elem($.HTMLNS, type, attributes, classes, textContent));\r\n    }\r\n\r\n    public static HtmlAsFirstChild(parent: Element, type:string,  attributes:string[], classes?: string[], textContent?:string):HTMLElement {\r\n        if(parent.firstChild)\r\n            return parent.insertBefore(<HTMLElement>$.Elem($.HTMLNS, type, attributes, classes, textContent), parent.firstChild);\r\n        else\r\n            return parent.appendChild(<HTMLElement>$.Elem($.HTMLNS, type, attributes, classes, textContent));\r\n    }\r\n\r\n    private static Elem(ns:string, type:string, attributes:string[], classes?: string[], textContent?:string):Element\r\n    {\r\n        let element = document.createElementNS(ns, type);\r\n        if(classes)\r\n        {\r\n            for (const clazz of classes) {\r\n                element.classList.add(clazz);\r\n            }\r\n        }\r\n        let i:number;\r\n        for(i=0;i<attributes.length;i+=2)\r\n        {\r\n            element.setAttribute(attributes[i], attributes[i+1]);\r\n        }\r\n        if(textContent)\r\n        {\r\n            element.textContent=textContent;\r\n        }\r\n        return element;\r\n    }\r\n\r\n    public static InputNumber(table:HTMLTableSectionElement, min:number, max:number, key:string, cfg:KeyValueTuple[]|null):HTMLInputElement\r\n    {\r\n        let value:number=0;\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key && !isNaN(e.value)){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"]);\r\n        return <HTMLInputElement>$.Html(inputContainer, \"input\", [\"type\", \"number\", \"min\", \"\"+Math.round(min), \"max\", \"\"+Math.round(max), \"value\", \"\"+Math.round(value),]);\r\n    }\r\n\r\n    public static InputSelect(table:HTMLTableSectionElement, displayValueAndKeyvalues:StringNumberTuple[], key:string, cfg:KeyValueTuple[]|null):HTMLSelectElement\r\n    {\r\n        let value:number=0;\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key && !isNaN(e.value)){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"]);\r\n        let select = <HTMLSelectElement>$.Html(inputContainer, \"select\", [], []);\r\n        for(let i=0;i<displayValueAndKeyvalues.length;i++)\r\n        {\r\n            let option = $.Html(select, \"option\", [\"value\", \"\"+displayValueAndKeyvalues[i].n], [], displayValueAndKeyvalues[i].s);\r\n            if(i==value){\r\n                option.setAttribute(\"selected\", \"\");\r\n            }\r\n        }\r\n        return select;\r\n    }\r\n\r\n   \r\n\r\n    public static InputColor(table:HTMLTableSectionElement, key:string, cfg:KeyValueTuple[]|null):HTMLInputElement\r\n    {\r\n        let value:string=\"#ff0000\";\r\n        if(cfg!=null)\r\n        {\r\n            for (const e of cfg) {\r\n                if(e.key==key){\r\n                    value=e.value;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let tr=$.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], key);\r\n        let inputContainer = $.Html(tr, \"td\", [],[\"develop-propertygrid-td\"]);\r\n        return <HTMLInputElement>$.Html(inputContainer, \"input\", [\"type\", \"color\",  \"value\", value]);\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}