{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/App.ts","src/Flowchart.ts","src/FlowchartConnector.ts","src/FlowchartExporter.ts","src/FlowchartLink.ts","src/FlowchartOperator.ts","src/FlowchartOperatorImpl.ts","src/TopologicalSorfDFS.ts","src/Utils.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","DevelopCFCController","ScreenController","Flowchart_1","[object Object]","div","this","hideDIV","state","ControllerState","CREATED","ElementId","id","State","style","display","super","options","FlowchartOptions","data","operators","caption","type","posX","posY","links","color","fromId","fromOutput","toId","toInput","fc","Flowchart","onFirstStart","DashboardController","ReportsController","AppController","stateDiv","document","getElementById","screenControllers","activeControllerIndex","innerHTML","newIndex","forEach","controller","showDIV","STARTED","onRestart","onStop","STOPPED","push","sc","onCreate","setActiveScreen","id2index","Map","index","set","querySelectorAll","get","onclick","SetApplicationState","websocket","WebSocket","location","hostname","onopen","onmessage","evt","msg","charAt","console","log","replace","backgroundColor","JSON","parse","innerText","d","myName","temperature","humidity","info","heap","time","onclose","reason","onerror","returnValue","b","send","dataset","rel","app","addEventListener","startup","./Flowchart","2","__createBinding","create","m","k","k2","undefined","enumerable","__setModuleDefault","v","__importStar","mod","__esModule","result","prototype","hasOwnProperty","FlowchartConnector_1","FlowchartExporter_1","FlowchartLink_1","FlowchartOperator_1","operatorimpl","TopologicalSorfDFS_1","Utils_1","canUserEditLinks","canUserMoveOperators","distanceFromArrow","defaultOperatorClass","defaultLinkColor","defaultSelectedLinkColor","linkWidth","grid","multipleLinksOnOutput","multipleLinksOnInput","linkVerticalDecal","container","lastOutputConnectorClicked","selectedOperator","selectedLink","positionRatio","temporaryLinkSnapped","upcounter","subcontainer","Html","target","classList","contains","Array","getElementsByClassName","elem","remove","toolbar","menuDebug","menuDebugDropBtn","menuDebugDropContent","toggle","compile","workspace","propertyGridHtmlDiv","flowchartContainerSvgSvg","Svg","linksLayer","operatorsLayer","tempLayer","visibility","defs","markerArrow","markerCircle","temporaryLink","toolsActivator","toolsLayer","onmouseenter","onmouseleave","Element","unselectOperator","unselectLink","onmouseup","onkeyup","key","deleteSelectedOperator","populateToolsLayer","SelectedLink","PositionRatio","LinkLayer","OperatorsLayer","ToolsLayer","end","Utils","EventCoordinatesInSVG","setAttribute","x","y","unsetTemporaryLink","start","GetLinkpoint","setTemporaryLink","onmousemove","_notifyGlobalMouseupWithLink","_notifyGlobalMousemoveWithLink","LinksLength","Type","createLink","SelectOperator","link","selectLink","onLinkUnselect","UncolorizeLink","onLinkSelect","ColorizeLink","index2wrappedOperator","GlobalOperatorIndex","NodeWrapper","wrappedOutputOperators","values","dependents","Set","inputkv","Payload","InputsKVIt","linkkv","LinksKVIt","dependentOperator","From","Parent","dependentWrappedNode","add","DependendNodes","TypeInfo","Position","PositionType","Output","sortedList","TopologicalSortDFS","sort","SetDebugInfoText","FlowchartExporter","Export","map","RemoveFromDOM","delete","outputKV","OutputsKVIt","linkKV","DeleteLink","GlobalLinkIndex","Options","setData","clazz","GetTypeInfo","toolGroup","title","onmousedown","name","substring","onOperatorCreate","coords","MoveTo","RegisterDragging","textContent","clear","opId2op","createOperator","fromOp","toOp","fromConn","GetOutputConnectorByIndex","toConn","GetInputConnectorByIndex","globalLinkIndex","l","To","RemoveLink","from","to","onLinkCreate","Caption","FlowchartLink","AddLink","DATATYPE2COLOR","fill","onOperatorUnselect","ShowAsSelected","operator","onOperatorSelect","table","tr","PopulateProperyGrid","percent","parseInt","slice","R","G","B","Math","round","toString","parent","attributes","classes","Elem","SVGNS","HTMLNS","ns","element","createElementNS","appendChild","XLINKNS","ConnectorType","BOOLEAN","COLOR","FLOAT","INTEGER","./FlowchartConnector","./FlowchartExporter","./FlowchartLink","./FlowchartOperator","./FlowchartOperatorImpl","./TopologicalSorfDFS","./Utils","3","FlowchartOutputConnector","FlowchartInputConnector","FlowchartConnector","TRANSLATEY","HasLink","has","INDEX","spec","getIOSpecifics","translateY","childElementCount","inputOrOutput","dx","connectorGroup","connector","snapper","onmouseover","_shadeColor","onmouseout","GlobalConnectorIndex","size","entries","RefreshPosition","flowchart","posrat","flowchartRect","getBoundingClientRect","connectorRect","left","width","top","height","_notifyInputConnectorMouseup","_notifyInputConnectorMouseenter","_notifyInputConnectorMouseleave","InputSvgG","_notifyOutputConnectorMousedown","OutputSvgG","4","bytes","max","pow","byteLength","random","Uint8Array","crypto","getRandomValues","msCrypto","getRandomValuesWithMathRandom","typeIndex2globalConnectorIndex2adressOffset","typeIndex2maxOffset","isNaN","Number","buffer","ArrayBuffer","ctx","DataView","bufferOffset","setUint32","guid","getRandomBytes","setUint8","SerializeToBinary","getUint8","window","alert","5","MAX_INDEX","captionElement","captionPath","setAttributeNS","_notifyLinkClicked","Color","fromPosition","toPosition","fromX","fromY","toX","toY","bezierFromX","bezierToX","bezierIntensity","min","abs","6","FlowchartOperator","SingletonType","GlobalTypeIndex","Singleton","typeInfo","Inputs","Outputs","elementSvgG","box","inputSvgG","outputSvgG","debugInfoSvgText","_notifyOperatorClicked","ElementSvgG","text","offsetX","clientX","offsetY","clientY","inputs","outputs","g","RefreshLinkPositions","input","variableAdress","GetLinksCopy","out","output","SerializeInputsAndOutputs","SerializeFurtherProperties","mapper","7","ConstINTOperator","ConstTRUEOperator","GreenLedOperator","YellowLedOperator","RedLedOperator","RelayOperator","TempSensorOperator","MoveSensorOperator","RedButtonOperator","EncoderButtonOperator","GreenButtonOperator","NotOperator","RSOperator","MINOperator","MAXOperator","MULTOperator","ADDOperator","OROperator","ANDOperator","Default","A","C","AppendConnectors","S","Input","O","StorageId","conn","PropertyGridHelpers","inputContainer","8","MarkerState","payload","Mark","NONE","L","headNode","visit","PERMANENT","TEMPORARY","9","rect"],"mappings":"CAAA,WAA+b,OAAnb,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,GAA7b,EAAA,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQQ,qBAAuBR,EAAQS,sBAAmB,EAC1D,MAAMC,EAAchB,EAAQ,eAC5B,MAAMe,EACFE,YAAYC,GACRC,KAAKD,IAAMA,EACXC,KAAKC,UACLD,KAAKE,MAAQC,EAAgBC,QAEjCC,gBAAkB,OAAOL,KAAKD,IAAIO,GAClCC,YAAc,OAAOP,KAAKE,MAC1BK,UAAUb,GAASM,KAAKE,MAAQR,EAChCI,UACIE,KAAKD,IAAIS,MAAMC,QAAU,QAE7BX,UACIE,KAAKD,IAAIS,MAAMC,QAAU,QAGjCtB,EAAQS,iBAAmBA,EAC3B,MAAMD,UAA6BC,EAC/BE,YAAYC,GACRW,MAAMX,GACNC,KAAKD,IAAMA,EACX,IAuDIY,EAAU,IAAId,EAAYe,iBAC9BD,EAAQE,KAxDG,CACPC,UAAW,CACP,CACIC,QAAS,cACTC,KAAM,YACNV,GAAI,cACJW,KAAM,GACNC,KAAM,IAEV,CACIH,QAAS,gBACTC,KAAM,cACNV,GAAI,gBACJW,KAAM,GACNC,KAAM,KAEV,CACIH,QAAS,QACTC,KAAM,MACNV,GAAI,QACJW,KAAM,IACNC,KAAM,IAEV,CACIH,QAAS,WACTC,KAAM,SACNV,GAAI,WACJW,KAAM,IACNC,KAAM,KAGdC,MAAO,CACH,CACIC,MAAO,QACPC,OAAQ,cACRC,WAAY,EACZC,KAAM,QACNC,QAAS,GAEb,CACIJ,MAAO,QACPC,OAAQ,gBACRC,WAAY,EACZC,KAAM,QACNC,QAAS,GAEb,CACIJ,MAAO,QACPC,OAAQ,QACRC,WAAY,EACZC,KAAM,WACNC,QAAS,KAMrBxB,KAAKyB,GAAK,IAAI5B,EAAY6B,UAAU1B,KAAKD,IAAKY,GAElDb,eACIE,KAAKyB,GAAGE,eAEZ7B,aACAA,UACAA,aAEJX,EAAQQ,qBAAuBA,EAC/B,MAAMiC,UAA4BhC,EAC9BE,YAAYC,GACRW,MAAMX,GACNC,KAAKD,IAAMA,EAEfD,gBACAA,aACAA,UACAA,aAEJ,MAAM+B,UAA0BjC,EAC5BE,YAAYC,GACRW,MAAMX,GACNC,KAAKD,IAAMA,EAEfD,gBACAA,aACAA,UACAA,aAgCJ,IAAIK,GACJ,SAAWA,GACPA,EAAgBA,EAAyB,QAAI,GAAK,UAClDA,EAAgBA,EAAyB,QAAI,GAAK,UAClDA,EAAgBA,EAAyB,QAAI,GAAK,UAHtD,CAIGA,IAAoBA,EAAkB,KACzC,MAAM2B,EACFhC,cACIE,KAAK+B,SAAWC,SAASC,eAAe,sBACxCjC,KAAKkC,kBAAoB,GACzBlC,KAAKmC,sBAAwB,EAEjCrC,oBAAoBI,GAChBF,KAAK+B,SAASK,UAAYlC,EAE9BJ,gBAAgBuC,GACZrC,KAAKkC,kBAAkBI,QAAQ,CAACC,EAAY7D,KACpCA,GAAK2D,GACLE,EAAWC,UACPD,EAAWhC,OAASJ,EAAgBC,SACpCmC,EAAWZ,eACXY,EAAWhC,MAAQJ,EAAgBsC,UAGnCF,EAAWG,YACXH,EAAWhC,MAAQJ,EAAgBsC,WAIvCF,EAAWtC,UACPsC,EAAWhC,OAASJ,EAAgBsC,UACpCF,EAAWI,SACXJ,EAAWhC,MAAQJ,EAAgByC,YAI/C5C,KAAKmC,sBAAwBE,EAEjCvC,UACIE,KAAKkC,kBAAkBW,KAAK,IAAIjB,EAAoBI,SAASC,eAAe,sBAC5EjC,KAAKkC,kBAAkBW,KAAK,IAAIlD,EAAqBqC,SAASC,eAAe,oBAC7EjC,KAAKkC,kBAAkBW,KAAK,IAAIhB,EAAkBG,SAASC,eAAe,oBAC1EjC,KAAKkC,kBAAkBI,QAASQ,GAAOA,EAAGC,YAC1C/C,KAAKgD,gBAAgB,GACrB,IAAIC,EAAW,IAAIC,IACnBlD,KAAKkC,kBAAkBI,QAAQ,CAAC5C,EAAOyD,KAAYF,EAASG,IAAI,QAAU1D,EAAMW,UAAW8C,KAC3FnB,SAASqB,iBAAiB,SAASf,QAASvD,IAC/BA,EAAEuB,GAAX,IACI6C,EAAQF,EAASK,IAAIvE,EAAEuB,KAAO,EAClCvB,EAAEwE,QAAU,CAACjF,GAAM0B,KAAKgD,gBAAgBG,MAE5CnD,KAAKwD,oBAAoB,8BACzB,IAAIC,EAAY,IAAIC,UAAU,QAAUC,SAASC,SAAW,MAC5DH,EAAUI,OAASvF,CAAAA,IACf0B,KAAKwD,oBAAoB,+BACzBxB,SAASC,eAAe,QAAQG,UAAY,4BAEhDqB,EAAUK,UAAY,CAACC,IACnB,IAAIC,EAAMD,EAAIlD,KACd,IAAInB,EACJ,OAAQsE,EAAIC,OAAO,IACf,IAAK,IAGD,OAFAC,QAAQC,IAAIH,GACZtE,EAAQsE,EAAII,QAAQ,YAAa,KAE7B,IAAK,IACDpC,SAASC,eAAe,QAAQzB,MAAM6D,gBAAkB,QACxD,MACJ,IAAK,IACDrC,SAASC,eAAe,QAAQzB,MAAM6D,gBAAkB,QACxD,MACJ,IAAK,IACDrC,SAASC,eAAe,QAAQzB,MAAM6D,gBAAkB,QACxD,MACJ,IAAK,IACDrC,SAASC,eAAe,QAAQzB,MAAM6D,gBAAkB,QAGhEH,QAAQC,IAAI,SAAWzE,GACvB,MACJ,QACI,IAAIR,EAAIoF,KAAKC,MAAMR,EAAIlD,MACvBmB,SAASC,eAAe,aAAauC,UAAYtF,EAAEuF,EAAEC,OACrD1C,SAASC,eAAe,kBAAkBuC,UAAYtF,EAAEuF,EAAEE,YAC1D3C,SAASC,eAAe,eAAeuC,UAAYtF,EAAEuF,EAAEG,SACvD5C,SAASC,eAAe,WAAWuC,UAAYtF,EAAE2F,KAAKC,KACtD9C,SAASC,eAAe,WAAWuC,UAAYtF,EAAE2F,KAAKE,QAIlEtB,EAAUuB,QAAU,CAAC1G,IACjB4F,QAAQC,IAAI,sCAAwC7F,EAAE2G,QACtDjF,KAAKwD,oBAAoB,sCAAwClF,EAAE2G,UAEvExB,EAAUyB,QAAU,CAACnB,IACjBG,QAAQC,IAAI,oBAAsBJ,EAAIoB,aACtCnF,KAAKwD,oBAAoB,mBAAqBO,EAAIoB,eAEtDnD,SAASqB,iBAAiB,oBAAoBf,QAAS8C,IACnDA,EAAE7B,QAAU,CAACjF,IACTmF,EAAU4B,KAAK,IAAMD,EAAEE,QAAQC,UAK/C,IAAIC,EACJxD,SAASyD,iBAAiB,mBAAqBnH,KAC3CkH,EAAM,IAAI1D,GACN4D,aAEN,CAACC,cAAc,IAAIC,EAAE,CAAC,SAAS/G,EAAQU,EAAOJ,GAChD,aACA,IAAI0G,EAAmB7F,MAAQA,KAAK6F,kBAAqBrG,OAAOsG,OAAS,SAAUrH,EAAGsH,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3BxG,OAAOC,eAAehB,EAAGwH,EAAI,CAAEE,YAAY,EAAM7C,IAAK,WAAa,OAAOyC,EAAEC,OAC3E,SAAUvH,EAAGsH,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BvH,EAAEwH,GAAMF,EAAEC,KAEVI,EAAsBpG,MAAQA,KAAKoG,qBAAwB5G,OAAOsG,OAAS,SAAUrH,EAAG4H,GACxF7G,OAAOC,eAAehB,EAAG,UAAW,CAAE0H,YAAY,EAAMzG,MAAO2G,KAC9D,SAAS5H,EAAG4H,GACb5H,EAAW,QAAI4H,IAEfC,EAAgBtG,MAAQA,KAAKsG,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIC,WAAY,OAAOD,EAClC,IAAIE,EAAS,GACb,GAAW,MAAPF,EAAa,IAAK,IAAIP,KAAKO,EAAe,YAANP,GAAmBxG,OAAOkH,UAAUC,eAAevH,KAAKmH,EAAKP,IAAIH,EAAgBY,EAAQF,EAAKP,GAEtI,OADAI,EAAmBK,EAAQF,GACpBE,GAEXjH,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQuC,UAAYvC,EAAQyB,sBAAmB,EAC/C,MAAMgG,EAAuB/H,EAAQ,wBAC/BgI,EAAsBhI,EAAQ,uBAC9BiI,EAAkBjI,EAAQ,mBAC1BkI,EAAsBlI,EAAQ,uBAC9BmI,EAAeV,EAAazH,EAAQ,4BACpCoI,EAAuBpI,EAAQ,wBAC/BqI,EAAUrI,EAAQ,WA4BxBM,EAAQyB,iBAhBR,MACId,cACIE,KAAKmH,kBAAmB,EACxBnH,KAAKoH,sBAAuB,EAC5BpH,KAAKa,UAAOqF,EACZlG,KAAKqH,kBAAoB,EACzBrH,KAAKsH,qBAAuB,6BAC5BtH,KAAKuH,iBAAmB,UACxBvH,KAAKwH,yBAA2B,QAChCxH,KAAKyH,UAAY,GACjBzH,KAAK0H,KAAO,GACZ1H,KAAK2H,uBAAwB,EAC7B3H,KAAK4H,sBAAuB,EAC5B5H,KAAK6H,kBAAoB,IAKjC,MAAMnG,EACF5B,YAAYgI,EAAWnH,GAWnB,GAVAX,KAAK8H,UAAYA,EACjB9H,KAAKW,QAAUA,EACfX,KAAKc,UAAY,IAAIoC,IACrBlD,KAAKmB,MAAQ,IAAI+B,IACjBlD,KAAK+H,2BAA6B,KAClC/H,KAAKgI,iBAAmB,KACxBhI,KAAKiI,aAAe,KACpBjI,KAAKkI,cAAgB,EACrBlI,KAAKmI,sBAAuB,EAC5BnI,KAAKoI,UAAY,GACZpI,KAAK8H,UACN,MAAM,IAAI9I,MAAM,qBAEpB,IAAIqJ,EAAe3G,EAAU4G,KAAKtI,KAAK8H,UAAW,MAAO,GAAI,CAAC,eAC9DO,EAAa9E,QAAU,CAACjF,IAChBA,EAAEiK,OAAOC,UAAUC,SAAS,YAEhCC,MAAMhC,UAAUpE,QAAQlD,KAAK4C,SAAS2G,uBAAuB,oBAAsBC,IAAWA,EAAKJ,UAAUK,OAAO,YAExH,IAAIC,EAAUpH,EAAU4G,KAAKD,EAAc,MAAO,GAAI,CAAC,oBAGnDU,GAFarH,EAAU4G,KAAKQ,EAAS,IAAK,CAAC,OAAQ,KAAM,CAAC,mBAAoB,QAClEpH,EAAU4G,KAAKQ,EAAS,IAAK,CAAC,OAAQ,KAAM,CAAC,mBAAoB,OACjEpH,EAAU4G,KAAKQ,EAAS,MAAO,GAAI,CAAC,cAChDE,EAAmBtH,EAAU4G,KAAKS,EAAW,SAAU,GAAI,CAAC,WAAY,WACxEE,EAAuBvH,EAAU4G,KAAKS,EAAW,MAAO,GAAI,CAAC,qBACjEC,EAAiBzF,QAAU,CAACjF,IACxB2K,EAAqBT,UAAUU,OAAO,UAE1CxH,EAAU4G,KAAKW,EAAsB,IAAK,CAAC,OAAQ,KAAM,GAAI,aAAa1F,QAAU,CAACjF,IACjFoK,MAAMhC,UAAUpE,QAAQlD,KAAK4C,SAAS2G,uBAAuB,oBAAsBC,IAAWA,EAAKJ,UAAUK,OAAO,UACpH7I,KAAKmJ,YAETzH,EAAU4G,KAAKW,EAAsB,IAAK,CAAC,OAAQ,KAAM,GAAI,oBAAoB1F,QAAU,CAACjF,OAEvEoD,EAAU4G,KAAKW,EAAsB,IAAK,CAAC,OAAQ,KAAM,GAAI,UAC7DvH,EAAU4G,KAAKW,EAAsB,IAAK,CAAC,OAAQ,KAAM,GAAI,WADlF,IAEIG,EAAY1H,EAAU4G,KAAKD,EAAc,MAAO,CAAC,WAAY,KAAM,CAAC,sBACxErI,KAAKqJ,oBAAsB3H,EAAU4G,KAAKD,EAAc,MAAO,GAAI,CAAC,uBACpErI,KAAKsJ,yBAA2B5H,EAAU6H,IAAIH,EAAW,MAAO,CAAC,QAAS,OAAQ,SAAU,QAAS,CAAC,wBACtGpJ,KAAKwJ,WAAa9H,EAAU6H,IAAIvJ,KAAKsJ,yBAA0B,IAAK,GAAI,CAAC,0BACzEtJ,KAAKyJ,eAAiB/H,EAAU6H,IAAIvJ,KAAKsJ,yBAA0B,IAAK,GAAI,CAAC,4BAA6B,iBAC1GtJ,KAAK0J,UAAYhI,EAAU6H,IAAIvJ,KAAKsJ,yBAA0B,IAAK,GAAI,CAAC,mCACxEtJ,KAAK0J,UAAUlJ,MAAMmJ,WAAa,SAClC,IAAIC,EAAOlI,EAAU6H,IAAIvJ,KAAK0J,UAAW,OAAQ,IAC7CG,EAAcnI,EAAU6H,IAAIK,EAAM,SAAU,CAAC,KAAM,eAAgB,cAAe,IAAK,eAAgB,IAAK,OAAQ,IAAK,OAAQ,IAAK,SAAU,MACpJ5J,KAAK6J,YAAcnI,EAAU6H,IAAIM,EAAa,OAAQ,CAAC,IAAK,mBAAoB,OAAQ,MAAO,SAAU,QAAS,eAAgB,QAClI,IAAIC,EAAepI,EAAU6H,IAAIK,EAAM,SAAU,CAAC,KAAM,gBAAiB,cAAe,IAAK,eAAgB,IAAK,OAAQ,IAAK,OAAQ,IAAK,SAAU,MACtJ5J,KAAK8J,aAAepI,EAAU6H,IAAIO,EAAc,SAAU,CAAC,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,OAAQ,MAAO,eAAgB,MAAO,SAAU,UAC3I9J,KAAK+J,cAAgBrI,EAAU6H,IAAIvJ,KAAK0J,UAAW,OAAQ,CAAC,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,mBAAoB,MAAO,eAAgB,IAAK,SAAU,QAAS,OAAQ,OAAQ,aAAc,uBACzM,IAAIM,EAAiBtI,EAAU6H,IAAIvJ,KAAKsJ,yBAA0B,OAAQ,CAAC,QAAS,KAAM,SAAU,OAAQ,OAAQ,QAAS,eAAgB,MAC7ItJ,KAAKiK,WAAavI,EAAU6H,IAAIvJ,KAAKsJ,yBAA0B,IAAK,GAAI,CAAC,wBAAyB,iBAClGtJ,KAAKiK,WAAWzJ,MAAMC,QAAU,OAChBiB,EAAU6H,IAAIvJ,KAAKiK,WAAY,OAAQ,CAAC,QAAS,MAAO,SAAU,OAAQ,KAAM,KAAM,KAAM,MAAO,CAAC,oBAMpHD,EAAeE,aAAe,CAAC5L,IAC3B0B,KAAKiK,WAAWzJ,MAAMC,QAAU,YAEpCT,KAAKiK,WAAWE,aAAe,CAAC7L,IAC5B0B,KAAKiK,WAAWzJ,MAAMC,QAAU,SAEpCT,KAAKsJ,yBAAyB/F,QAAU,CAACjF,IACjCA,EAAEiK,QAAUvI,KAAKoK,UAEjBpK,KAAKqK,mBACLrK,KAAKsK,kBAGbtK,KAAKsJ,yBAAyBiB,UAAY,CAACjM,IACvC4F,QAAQC,IAAI,kDAAoD7F,EAAEiK,UAEtEa,EAAUoB,QAAU,CAAClM,IACJ,UAATA,EAAEmM,KACFvG,QAAQC,IAAI,6CAA+C7F,EAAEiK,OAAS,mBACtEvI,KAAK0K,0BAGLxG,QAAQC,IAAI,6CAA+C7F,EAAEiK,OAAS,YAAcjK,EAAEmM,OAG9FzK,KAAK2K,qBAETC,mBAAqB,OAAO5K,KAAKiI,aAEjC4C,oBAAsB,OAAO7K,KAAKkI,cAClC4C,gBAAkB,OAAO9K,KAAKwJ,WAC9BuB,qBAAuB,OAAO/K,KAAKyJ,eACnCuB,iBAAmB,OAAOhL,KAAKiK,WAC/BnK,+BAA+BxB,GAC3B,GAAuC,MAAnC0B,KAAK+H,6BAAuC/H,KAAKmI,qBAAsB,CACvE,IAAI8C,EAAM/D,EAAQgE,MAAMC,sBAAsB7M,EAAG0B,KAAKsJ,yBAA0BtJ,KAAKkI,eACrFlI,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAII,GAC/CrL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAIK,IAGvDxL,6BAA6BxB,GACzB0B,KAAKuL,qBAETzL,gCAAgClB,EAAGN,GAC/B0B,KAAKmI,sBAAuB,EAC5B,IAAIqD,EAAQ5M,EAAE6M,eACVR,EAAM/D,EAAQgE,MAAMC,sBAAsB7M,EAAG0B,KAAKsJ,yBAA0BtJ,KAAKkI,eACrFlI,KAAK+J,cAAcqB,aAAa,KAAM,GAAKI,EAAMH,GACjDrL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKI,EAAMF,GACjDtL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAII,GAC/CrL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAIK,GAC/CtL,KAAK0L,iBAAiB9M,GACtBoD,SAASuI,UAAY,CAACjM,IAClB0D,SAASuI,UAAY,KACrBvI,SAAS2J,YAAc,KACvB3L,KAAK4L,6BAA6BtN,KAEtC0D,SAAS2J,YAAc,CAACrN,IACpB0B,KAAK6L,+BAA+BvN,KAG5CwB,6BAA6BlB,EAAGN,GACW,MAAnC0B,KAAK+H,8BAEJ/H,KAAKW,QAAQiH,sBAAwBhJ,EAAEkN,YAAc,IAEtD9L,KAAK+H,2BAA2BgE,MAAQnN,EAAEmN,MAC1C/L,KAAKgM,WAAW,KAAMhM,KAAK+H,2BAA4BnJ,GAE3DoB,KAAKuL,uBAETzL,uBAAuBrB,EAAGH,GACtB0B,KAAKiM,eAAexN,GAExBqB,mBAAmBoM,EAAM5N,GACrB0B,KAAKmM,WAAWD,GAEpBpM,gCAAgClB,EAAGN,GAC/B,GAAuC,MAAnC0B,KAAK+H,4BAAsC/H,KAAK+H,2BAA2BgE,MAAQnN,EAAEmN,KACrF,OACJ,IAAK/L,KAAKW,QAAQiH,sBAAwBhJ,EAAEkN,YAAc,EACtD,OACJ9L,KAAKmI,sBAAuB,EAC5B,IAAI8C,EAAMrM,EAAE6M,eACZzL,KAAK+J,cAAcqB,aAAa,aAAc,uBAC9CpL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAII,GAC/CrL,KAAK+J,cAAcqB,aAAa,KAAM,GAAKH,EAAIK,GAEnDxL,gCAAgClB,EAAGN,GAC/B0B,KAAKmI,sBAAuB,EAC5BnI,KAAK+J,cAAcqB,aAAa,aAAc,sBAElDtL,eACI,GAAyB,MAArBE,KAAKiI,aAAsB,CAC3B,GAAIjI,KAAKW,QAAQyL,iBAAmBpM,KAAKW,QAAQyL,eAAepM,KAAKiI,cACjE,OAEJjI,KAAKiI,aAAaoE,iBAClBrM,KAAKiI,aAAe,MAG5BnI,WAAWoM,GACPlM,KAAKsK,eACDtK,KAAKW,QAAQ2L,eAAiBtM,KAAKW,QAAQ2L,aAAaJ,KAG5DlM,KAAKqK,mBACLrK,KAAKiI,aAAeiE,EACpBA,EAAKK,aAAavM,KAAKW,QAAQ6G,2BAEnC1H,UACI,IAAI0M,EAAwB,IAAItJ,IAChClD,KAAKc,UAAUwB,QAAQ,CAAC+D,EAAGL,EAAGD,KAC1ByG,EAAsBpJ,IAAIiD,EAAEoG,oBAAqB,IAAIxF,EAAqByF,YAAYrG,MAE1F,IAAIsG,EAAyB,GAC7B,IAAK,IAAIjO,KAAK8N,EAAsBI,SAAU,CAE1C,IAAIC,EAAa,IAAIC,IACrB,IAAK,MAAMC,KAAWrO,EAAEsO,QAAQC,WAC5B,IAAK,MAAMC,KAAUH,EAAQ,GAAGI,UAAW,CACvC,IAAIC,EAAoBF,EAAO,GAAGG,KAAKC,OACnCC,EAAuBf,EAAsBlJ,IAAI8J,EAAkBX,qBACvE,IAAKc,EACD,MAAM,IAAIvO,MAAM,2DACpB6N,EAAWW,IAAID,GAGvBV,EAAWvK,QAAQhE,GAAKI,EAAE+O,eAAe5K,KAAKvE,IAE1CI,EAAEsO,QAAQU,SAASC,UAAY5G,EAAoB6G,aAAaC,QAChElB,EAAuB9J,KAAKnE,GAEpC,IACIoP,GADY,IAAI7G,EAAqB8G,oBACdC,KAAKrB,GAChC,IAAK,MAAMlC,KAAOqD,EAAY,CACdA,EAAWrD,GACjBuC,QAAQiB,iBAAiB,iBAAmBxD,GAEtD5D,EAAoBqH,kBAAkBC,OAAOL,EAAWM,IAAK9P,GAAMA,EAAE0O,UAEzElN,yBACI,GAAKE,KAAKgI,iBAAV,CAEAhI,KAAKgI,iBAAiBqG,gBACtBrO,KAAKc,UAAUwN,OAAOtO,KAAKgI,iBAAiByE,qBAC5C,IAAK,MAAM8B,KAAYvO,KAAKgI,iBAAiBwG,YACzC,IAAK,MAAMC,KAAUF,EAAS,GAAGpB,UAC7BnN,KAAK0O,WAAWD,EAAO,GAAGE,iBAGlC3O,KAAKqK,oBAETuE,cAAgB,OAAO5O,KAAKW,QAC5ByJ,cAAgB,OAAOpK,KAAKsJ,yBAC5BxJ,oBACqCoG,WAAtBlG,KAAKW,QAAQE,MAA2C,MAArBb,KAAKW,QAAQE,MACvDb,KAAK6O,QAAQ7O,KAAKW,QAAQE,MAGlCf,qBACI,IAAIwL,EAAI,GACR,IAAK,IAAIwD,KAAS9H,EAAc,CAC5B,GAAIA,EAAa8H,GAAOC,YAAa,CACtB/H,EAAa8H,GAAOC,cAGnC,IAAIC,EAAYtN,EAAU6H,IAAIvJ,KAAKiK,WAAY,IAAK,CAAC,2BAA4BqB,OAE7E2D,GADMvN,EAAU6H,IAAIyF,EAAW,OAAQ,CAAC,QAAS,MAAO,SAAU,KAAM,KAAM,KAAM,KAAM,MAAO,CAAC,aAC1FtN,EAAU6H,IAAIyF,EAAW,OAAQ,CAAC,IAAK,IAAK,IAAK,MAAO,CAAC,kBACrEA,EAAUE,YAAc,CAAC5Q,IACX0B,KAAKoI,UAAf,IACI+G,EAAOL,EAAMM,UAAU,EAAGN,EAAMzP,OAAS,WAAWA,QAAU,IAAMW,KAAKoI,UAC7E,GAAIpI,KAAKW,QAAQ0O,mBAAqBrP,KAAKW,QAAQ0O,iBAAiBF,EAAM,MAAM,GAC5E,OAAO,KAEXjL,QAAQC,IAAI,YAAcgL,GAC1BnP,KAAKoI,YACL,IAAI3J,EAAI,IAAIuI,EAAa8H,GAAO9O,KAAMmP,GAClCG,EAASpI,EAAQgE,MAAMC,sBAAsB7M,EAAG0B,KAAKoK,SACzD3L,EAAE8Q,OAAOD,EAAOjE,EAAI,GAAIiE,EAAOhE,EAAI,IACnC7M,EAAE+Q,iBAAiBlR,GACnB0B,KAAKc,UAAUsC,IAAI3E,EAAEgO,oBAAqBhO,KAE9CwQ,EAAMQ,YAAcX,EACpBxD,GAAK,IAGbxL,QAAQe,GACJb,KAAKmB,MAAMmB,QAAShE,GAAMA,EAAE+P,iBAC5BrO,KAAKmB,MAAMuO,QACX1P,KAAKc,UAAUwB,QAAShE,GAAMA,EAAE+P,iBAChCrO,KAAKc,UAAU4O,QACf,IAAIC,EAAU,GACd,IAAK,MAAMlL,KAAK5D,EAAKC,UAAW,CAC5B,IAAIrC,EAAIuB,KAAK4P,eAAenL,GAC5BkL,EAAQlL,EAAEnE,IAAM7B,EAEpB,IAAK,MAAMgG,KAAK5D,EAAKM,MAAO,CACxB,IAAI0O,EAASF,EAAQlL,EAAEpD,QACnByO,EAAOH,EAAQlL,EAAElD,MACrB,GAAc,MAAVsO,GAA0B,MAARC,EAClB,SACJ,IAAIC,EAAWF,EAAOG,0BAA0BvL,EAAEnD,YAC9C2O,EAASH,EAAKI,yBAAyBzL,EAAEjD,SAC7B,MAAZuO,GAA8B,MAAVE,GAExBjQ,KAAKgM,WAAWvH,EAAGsL,EAAUE,IAGrCnQ,WAAWqQ,GACP,IAAIC,EAAIpQ,KAAKmB,MAAMmC,IAAI6M,GACvB,GAAS,MAALC,EACA,MAAMpR,MAAM,0BAEhBoR,EAAE/B,gBACFrO,KAAKmB,MAAMmN,OAAO6B,GAClBC,EAAEC,GAAGC,WAAWF,GAChBA,EAAE/C,KAAKiD,WAAWF,GAEtBtQ,WAAWe,EAAM0P,EAAMC,GACnB,GAAIxQ,KAAKW,QAAQ8P,eAAiBzQ,KAAKW,QAAQ8P,aAAaF,EAAKG,QAAS7P,GACtE,OAAO,KACX,IAAKb,KAAKW,QAAQgH,uBAAyB4I,EAAKzE,YAAc,EAC1D,OAAO,KACX,IAAK9L,KAAKW,QAAQiH,sBAAwB4I,EAAG1E,YAAc,EACvD,OAAO,KACX,IAAIsE,EAAI,IAAItJ,EAAgB6J,cAAc3Q,KAAM,GAAIA,KAAK4O,QAAQrH,iBAAkBgJ,EAAMC,GAIzF,OAHAD,EAAKK,QAAQR,GACbI,EAAGI,QAAQR,GACXpQ,KAAKmB,MAAMiC,IAAIgN,EAAEzB,gBAAiByB,GAC3BA,EAEXtQ,eAAee,GACX,IAAIsO,EAAOtO,EAAKG,KAAO,WACvB,IAAKgG,EAAamI,GACd,MAAM,IAAInQ,sBAAsB6B,EAAKG,QAEzC,GAAIhB,KAAKW,QAAQ0O,mBAAqBrP,KAAKW,QAAQ0O,iBAAiBxO,EAAKE,QAAS,MAAM,GACpF,MAAM,IAAI/B,8BAA8B6B,EAAKG,6CAEjD,IAAIvC,EAAI,IAAIuI,EAAamI,GAAMnP,KAAMa,EAAKE,SAG1C,OAFAtC,EAAE8Q,OAAO1O,EAAKI,KAAMJ,EAAKK,MACzBlB,KAAKc,UAAUsC,IAAI3E,EAAEgO,oBAAqBhO,GACnCA,EAEXqB,qBACIE,KAAK+H,2BAA6B,KAClC/H,KAAK0J,UAAUlJ,MAAMmJ,WAAa,SAEtC7J,iBAAiBlB,GACboB,KAAK+H,2BAA6BnJ,EAClC,IAAIwC,EAAQM,EAAUmP,eAAevN,IAAI1E,EAAEmN,MACtC3K,IACDA,EAAQ,SACZpB,KAAK6J,YAAYrJ,MAAMsQ,KAAO1P,EAC9BpB,KAAK8J,aAAatJ,MAAMsQ,KAAO1P,EAC/BpB,KAAK0J,UAAUlJ,MAAMmJ,WAAa,UAEtC7J,mBACQE,KAAKW,QAAQoQ,qBAAuB/Q,KAAKW,QAAQoQ,uBAErD/Q,KAAKqJ,oBAAoB7E,UAAY,GACR,MAAzBxE,KAAKgI,mBAEThI,KAAKgI,iBAAiBgJ,gBAAe,GACrChR,KAAKgI,iBAAmB,OAE5BlI,eAAemR,GACX,GAAIjR,KAAKW,QAAQuQ,mBAAqBlR,KAAKW,QAAQuQ,iBAAiBD,EAASP,SACzE,OACJ1Q,KAAKsK,eACwB,MAAzBtK,KAAKgI,kBACLhI,KAAKgI,iBAAiBgJ,gBAAe,GACzCC,EAASD,gBAAe,GACxBhR,KAAKgI,iBAAmBiJ,EACxBjR,KAAKqJ,oBAAoB7E,UAAY,GACrC9C,EAAU4G,KAAKtI,KAAKqJ,oBAAqB,IAAK,GAAI,CAAC,+CAAgDrJ,KAAKgI,iBAAiB0I,WACzH,IAAIS,EAAQzP,EAAU4G,KAAKtI,KAAKqJ,oBAAqB,QAAS,GAAI,CAAC,+BAC/D+H,EAAK1P,EAAU4G,KAAK6I,EAAO,KAAM,GAAI,CAAC,4BAC1CzP,EAAU4G,KAAK8I,EAAI,KAAM,GAAI,CAAC,2BAA4B,OAC1D1P,EAAU4G,KAAK8I,EAAI,KAAM,GAAI,CAAC,2BAA4B,SACtDpR,KAAKgI,iBAAiBqJ,oBAAoBF,GAC1CzP,EAAU4G,KAAKtI,KAAKqJ,oBAAqB,SAAU,GAAI,CAAC,+BAAgC,SAGxFrJ,KAAKqJ,oBAAoB7E,UAAY,GACrC9C,EAAU4G,KAAKtI,KAAKqJ,oBAAqB,IAAK,GAAI,CAAC,kDAAmDrJ,KAAKgI,iBAAiB0I,YAIpI5Q,mBAAmBsB,EAAOkQ,GACtB,IAAI3S,EAAI4S,SAASnQ,EAAMoQ,MAAM,GAAI,IAAKhT,EAAI8S,EAAU,EAAI,EAAI,IAAKpS,EAAIoS,EAAU,GAAe,EAAXA,EAAeA,EAASG,EAAI9S,GAAK,GAAI+S,EAAI/S,GAAK,EAAI,IAAQgT,EAAQ,IAAJhT,EACjJ,MAAO,KAAO,SAA4C,OAA/BiT,KAAKC,OAAOrT,EAAIiT,GAAKvS,GAAKuS,GAA+C,KAA/BG,KAAKC,OAAOrT,EAAIkT,GAAKxS,GAAKwS,IAAcE,KAAKC,OAAOrT,EAAImT,GAAKzS,GAAKyS,IAAIG,SAAS,IAAIN,MAAM,GAElK1R,WAAWiS,EAAQ/Q,EAAMgR,EAAYC,GACjC,OAAOvQ,EAAUwQ,KAAKxQ,EAAUyQ,MAAOJ,EAAQ/Q,EAAMgR,EAAYC,GAErEnS,YAAYiS,EAAQ/Q,EAAMgR,EAAYC,EAASxC,GAC3C,OAAO/N,EAAUwQ,KAAKxQ,EAAU0Q,OAAQL,EAAQ/Q,EAAMgR,EAAYC,EAASxC,GAE/E3P,YAAYuS,EAAIN,EAAQ/Q,EAAMgR,EAAYC,EAASxC,GAC/C,IAMI/Q,EANA4T,EAAUtQ,SAASuQ,gBAAgBF,EAAIrR,GAC3C,GAAIiR,EACA,IAAK,MAAMnD,KAASmD,EAChBK,EAAQ9J,UAAUgF,IAAIsB,GAI9B,IAAKpQ,EAAI,EAAGA,EAAIsT,EAAW3S,OAAQX,GAAK,EACpC4T,EAAQlH,aAAa4G,EAAWtT,GAAIsT,EAAWtT,EAAI,IAMvD,OAJI+Q,IACA6C,EAAQ7C,YAAcA,GAE1BsC,EAAOS,YAAYF,GACZA,GAGfnT,EAAQuC,UAAYA,EACpBA,EAAUyQ,MAAQ,6BAClBzQ,EAAU+Q,QAAU,+BACpB/Q,EAAU0Q,OAAS,+BACnB1Q,EAAUmP,eAAiB,IAAI3N,IAAI,CAAC,CAAC0D,EAAqB8L,cAAcC,QAAS,OAAQ,CAAC/L,EAAqB8L,cAAcE,MAAO,SAAU,CAAChM,EAAqB8L,cAAcG,MAAO,QAAS,CAACjM,EAAqB8L,cAAcI,QAAS,UAAW,CAAClM,EAAqB8L,cAAcE,MAAO,aACnS,CAACG,uBAAuB,EAAEC,sBAAsB,EAAEC,kBAAkB,EAAEC,sBAAsB,EAAEC,0BAA0B,EAAEC,uBAAuB,EAAEC,UAAU,IAAIC,EAAE,CAAC,SAASzU,EAAQU,EAAOJ,GAC9L,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQoU,yBAA2BpU,EAAQqU,wBAA0BrU,EAAQsU,mBAAqBtU,EAAQuT,mBAAgB,EAC1H,MAAM7S,EAAchB,EAAQ,eACtB6U,EAAa,GACnB,IAAIhB,GACJ,SAAWA,GACPA,EAAcA,EAAyB,UAAI,GAAK,YAChDA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAqB,MAAI,GAAK,QAC5CA,EAAcA,EAAqB,MAAI,GAAK,QALhD,CAMGA,EAAgBvT,EAAQuT,gBAAkBvT,EAAQuT,cAAgB,KACrE,MAAMe,EACF3T,YAAYiS,EAAQhR,EAASC,GACzBhB,KAAK+R,OAASA,EACd/R,KAAKe,QAAUA,EACff,KAAKgB,KAAOA,EACZhB,KAAKmB,MAAQ,IAAI+B,IACjBlD,KAAK2T,QAAU,CAACxD,GAAoBnQ,KAAKmB,MAAMyS,IAAIzD,IACnDnQ,KAAK4Q,QAAU,CAAC1E,GAASlM,KAAKmB,MAAMiC,IAAI8I,EAAKyC,gBAAiBzC,IAC9DlM,KAAKsQ,WAAa,CAACpE,GAASlM,KAAKmB,MAAMmN,OAAOpC,EAAKyC,kBACnD3O,KAAKmD,MAAQsQ,EAAmBI,QAChC,IAAIC,EAAO9T,KAAK+T,iBACZC,EAAaN,EAAaI,EAAK/B,OAAOkC,kBAC1CjU,KAAKsS,QAAUzS,EAAY6B,UAAU6H,IAAIuK,EAAK/B,OAAQ,IAAK,CAAC,2BAA4BiC,MAAgB,aAAaF,EAAKI,kBAC1HlU,KAAKsS,QAAQlH,aAAa,0BAA2BsH,EAAc1R,IACxDnB,EAAY6B,UAAU6H,IAAIvJ,KAAKsS,QAAS,OAAQ,CAAC,KAAM,GAAKwB,EAAKK,GAAI,KAAM,KAAM,aAAaL,EAAKI,0BACzGzE,YAAc1O,EACnBf,KAAKoU,eAAiBvU,EAAY6B,UAAU6H,IAAIvJ,KAAKsS,QAAS,IAAK,IACnEtS,KAAKqU,UAAYxU,EAAY6B,UAAU6H,IAAIvJ,KAAKoU,eAAgB,SAAU,CAAC,IAAK,KAAM,aAAaN,EAAKI,0BAA2BxB,EAAc1R,KACjJhB,KAAKsU,QAAUzU,EAAY6B,UAAU6H,IAAIvJ,KAAKoU,eAAgB,SAAU,CAAC,IAAK,MAAO,aAAaN,EAAKI,0BACvGlU,KAAKsS,QAAQiC,YAAc,CAACjW,IACxB,IAAK,MAAM4N,KAAQlM,KAAKmB,MAAMyL,SACtBV,GAAQA,GAAQlM,KAAK+R,OAAOzE,OAAO1C,cACnCsB,EAAKK,aAAa1M,EAAY6B,UAAU8S,YAAYxU,KAAK+R,OAAOzE,OAAOsB,QAAQrH,kBAAmB,OAI9GvH,KAAKsS,QAAQmC,WAAa,CAACnW,IACvB,IAAK,MAAM4N,KAAQlM,KAAKmB,MAAMyL,SACtBV,GAAQA,GAAQlM,KAAK+R,OAAOzE,OAAO1C,cACnCsB,EAAKG,mBAKrBqI,2BAA6B,OAAO1U,KAAKmD,MACzCiH,cAAgB,OAAOpK,KAAKsS,QAC5BxG,kBAAoB,OAAO9L,KAAKmB,MAAMwT,KAEtC7U,eACI,OAAO4I,MAAM6H,KAAKvQ,KAAKmB,MAAMyL,UAEjCO,gBAAkB,OAAOnN,KAAKmB,MAAMyT,UACpC9U,uBACIE,KAAKmB,MAAMmB,QAAQ8N,IACfA,EAAEyE,oBAGVvH,aAAe,OAAOtN,KAAK+R,OAC3BrB,cAAgB,OAAO1Q,KAAKe,QAC5BgL,WAAa,OAAO/L,KAAKgB,KACzBlB,eACI,IAAIgV,EAAY9U,KAAKsN,OAAOA,OACxByH,EAASD,EAAUjK,cACnBmK,EAAgBF,EAAU1K,QAAQ6K,wBAClCC,EAAgBlV,KAAKqU,UAAUY,wBAGnC,MAAO,CAAE5J,GAFA6J,EAAcC,KAAOH,EAAcG,MAAQJ,EAASG,EAAcE,MAAQ,EAEpE9J,GADN4J,EAAcG,IAAML,EAAcK,KAAON,EAASG,EAAcI,OAAS,IAI1FnW,EAAQsU,mBAAqBA,EAC7BA,EAAmBI,MAAQ,EAiB3B1U,EAAQqU,wBAhBR,cAAsCC,EAClC3T,YAAYiS,EAAQhR,EAASC,GACzBN,MAAMqR,EAAQhR,EAASC,GACvBhB,KAAKoU,eAAe7J,UAAY,CAACjM,IAC7ByT,EAAOzE,OAAOiI,6BAA6BvV,KAAM1B,KAErD0B,KAAKoU,eAAelK,aAAe,CAAC5L,IAChCyT,EAAOzE,OAAOkI,gCAAgCxV,KAAM1B,KAExD0B,KAAKoU,eAAejK,aAAe,CAAC7L,IAChCyT,EAAOzE,OAAOmI,gCAAgCzV,KAAM1B,KAG5DwB,oBAAoBsV,GAAS,OAAO,EACpCtV,iBAAmB,MAAO,CAAEoU,cAAe,QAASnC,OAAQ/R,KAAKsN,OAAOoI,UAAW1B,WAAY,EAAGG,GAAI,KAa1GhV,EAAQoU,yBAVR,cAAuCE,EACnC3T,YAAYiS,EAAQhR,EAASC,GACzBN,MAAMqR,EAAQhR,EAASC,GACvBhB,KAAKsS,QAAQpD,YAAc,CAAC5Q,IACxByT,EAAOzE,OAAOqI,gCAAgC3V,KAAM1B,KAG5DwB,oBAAoBsV,GAAS,OAAOA,EACpCtV,iBAAmB,MAAO,CAAEoU,cAAe,SAAUnC,OAAQ/R,KAAKsN,OAAOsI,WAAY5B,WAAY,IAAKG,IAAK,MAG7G,CAACxO,cAAc,IAAIkQ,EAAE,CAAC,SAAShX,EAAQU,EAAOJ,GAChD,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQ+O,uBAAoB,EAC5B,MAAMtH,EAAuB/H,EAAQ,wBACrC,MAAMqP,EACFpO,qCAAqCgW,GACjC,MAAMC,EAAMnE,KAAKoE,IAAI,EAAG,EAAIF,EAAMG,WAAaH,EAAMzW,QACrD,IAAK,IAAIX,EAAI,EAAMA,EAAIoX,EAAMzW,OAAQX,IACjCoX,EAAMpX,GAAKkT,KAAKsE,SAAWH,EAGnCjW,sBAAsBT,GAClB,MAAMyW,EAAQ,IAAIK,WAAW9W,GAU7B,MATsB,oBAAX+W,OACPA,OAAOC,gBAAgBP,GAEE,oBAAbQ,SACZA,SAASD,gBAAgBP,GAGzB5H,EAAkBqI,8BAA8BT,GAE7CA,EAGXhW,cAAcgB,GACV,IAAI0V,EAA8C,IAAItT,IAClDuT,EAAsB,IAAIvT,IAC9B,IAAK,IAAIlC,KAAQ4F,EAAqB8L,cAC7BgE,MAAMC,OAAO3V,MACdwV,EAA4CpT,IAAIuT,OAAO3V,GAAO,IAAIkC,KAClEuT,EAAoBrT,IAAIuT,OAAO3V,GAAO,IAU9C,IAAK,MAAMiQ,KAAYnQ,EACnB,IAAK,MAAMyN,KAAY0C,EAASzC,YAC5B,GAA+B,GAA3BD,EAAS,GAAGzC,YAEZ0K,EAA4ClT,IAAIiL,EAAS,GAAGxC,MAAM3I,IAAImL,EAAS,GAAGmG,qBAAsB,OAEvG,CAED,IAAIvR,EAAQsT,EAAoBnT,IAAIiL,EAAS,GAAGxC,MAChDyK,EAA4ClT,IAAIiL,EAAS,GAAGxC,MAAM3I,IAAImL,EAAS,GAAGmG,qBAAsBvR,GACxGA,IACAsT,EAAoBrT,IAAImL,EAAS,GAAGxC,KAAM5I,GAOtD,IAAIyT,EAAS,IAAIC,YAAYjF,KAAKoE,IAAI,EAAG,KACrCc,EAAM,CAAEN,4CAA6CA,EAA6CI,OAAQ,IAAIG,SAASH,GAASI,aAAc,GAElJF,EAAIF,OAAOK,UAAUH,EAAIE,aAAc,YAAY,GACnDF,EAAIE,cAAgB,EAEpB,IAAIE,EAAOhJ,EAAkBiJ,eAAe,IAC5CD,EAAK5U,QAAQ,CAAC+D,EAAG3H,KAAQoY,EAAIF,OAAOQ,SAASN,EAAIE,aAAetY,EAAG2H,KACnEyQ,EAAIE,cAAgB,GACpB,IAAK,MAAM/F,KAAYnQ,EACnBmQ,EAASoG,kBAAkBP,GAE/B,IAAI7X,EAAO,2BACX,IAAK,IAAIP,EAAI,EAAGA,EAAIoY,EAAIE,aAActY,IAClCO,GAAQ,KAAO6X,EAAIF,OAAOU,SAAS5Y,GAAGoT,SAAS,IAAM,KAMzD,OAJA7S,GAAQ,KACRsY,OAAOC,MAAMvY,GAGNiY,GAGf/X,EAAQ+O,kBAAoBA,GAC1B,CAAC6E,uBAAuB,IAAI0E,EAAE,CAAC,SAAS5Y,EAAQU,EAAOJ,GACzD,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQwR,mBAAgB,EACxB,MAAM9Q,EAAchB,EAAQ,eAC5B,MAAM8R,EACF7Q,YAAYiS,EAAQhR,EAASK,EAAOmP,EAAMC,GACtCxQ,KAAK+R,OAASA,EACd/R,KAAKe,QAAUA,EACff,KAAKoB,MAAQA,EACbpB,KAAKuQ,KAAOA,EACZvQ,KAAKwQ,GAAKA,EACVxQ,KAAKmD,MAAQwN,EAAc+G,YAC3B1X,KAAKsS,QAAUzS,EAAY6B,UAAU6H,IAAIwI,EAAOjH,UAAW,OAAQ,CAAC,eAAgB,GAAK9K,KAAK+R,OAAOnD,QAAQnH,UAAW,OAAQ,OAAQ,KAAM,OAASzH,KAAKmD,QAC5JnD,KAAK6U,kBACL7U,KAAKqM,iBACLrM,KAAK+R,OAAOjH,UAAU0H,YAAYxS,KAAKsS,SACvCtS,KAAK2X,eAAiB9X,EAAY6B,UAAU6H,IAAIwI,EAAOjH,UAAW,OAAQ,IAC1E,IAAI8M,EAAc/X,EAAY6B,UAAU6H,IAAIvJ,KAAK2X,eAAgB,WAAY,CAAC,cAAe,MAAO,cAAe,WACnHC,EAAYC,eAAehY,EAAY6B,UAAU+Q,QAAS,OAAQ,QAAezS,KAAKmD,OACtFyU,EAAYxV,UAAYrB,EACxBf,KAAKsS,QAAQ/O,QAAU,CAACjF,IACpB0B,KAAK+R,OAAO+F,mBAAmB9X,KAAM1B,KAG7CqQ,sBAAwB,OAAO3O,KAAKmD,MACpCkK,WAAa,OAAOrN,KAAKuQ,KACzBF,SAAW,OAAOrQ,KAAKwQ,GACvBuH,UAAU3W,GAASpB,KAAKoB,MAAQA,EAChCtB,gBACIE,KAAKsS,QAAQzJ,SACb7I,KAAK2X,eAAe9O,SAExB/I,aAAasB,GACTpB,KAAKsS,QAAQlH,aAAa,SAAUhK,GAMxCtB,iBACIE,KAAKuM,aAAavM,KAAK+R,OAAOnD,QAAQrH,kBAE1CzH,kBACI,IAAIkY,EAAehY,KAAKuQ,KAAK9E,eACzBwM,EAAajY,KAAKwQ,GAAG/E,eACrByM,EAAQF,EAAa3M,EACrB8M,EAAQH,EAAa1M,EAAItL,KAAK+R,OAAOnD,QAAQ/G,kBAC7CuQ,EAAMH,EAAW5M,EACjBgN,EAAMJ,EAAW3M,EAAItL,KAAK+R,OAAOnD,QAAQ/G,kBACzCR,EAAoBrH,KAAK+R,OAAOnD,QAAQvH,kBACxCiR,EAAeJ,EAAQ7Q,EACvBkR,EAAYH,EAAM,EAClBI,EAAkB5G,KAAK6G,IAAI,IAAK7G,KAAKmE,IAAInE,KAAK8G,IAAIJ,EAAcC,GAAa,EAAG3G,KAAK8G,IAAIP,EAAQE,KACrGrY,KAAKsS,QAAQlH,aAAa,IAAK,IAAMkN,EAAc,IAAM,EAAU,MAAQJ,EAAQ7Q,EAAoBmR,GAAmB,IAAML,EAAQ,KAAOC,EAAMI,GAAmB,IAAMH,EAAM,IAAME,EAAY,IAAMF,IAGpNlZ,EAAQwR,cAAgBA,EACxBA,EAAc+G,UAAY,GACxB,CAAC/R,cAAc,IAAIgT,EAAE,CAAC,SAAS9Z,EAAQU,EAAOJ,GAChD,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQyZ,kBAAoBzZ,EAAQuO,SAAWvO,EAAQ0Z,cAAgB1Z,EAAQyO,kBAAe,EAC9F,MAAM/N,EAAchB,EAAQ,eACtBqI,EAAUrI,EAAQ,YAExB,SAAW+O,GACPA,EAAaA,EAAsB,QAAI,GAAK,UAC5CA,EAAaA,EAAoB,MAAI,GAAK,QAC1CA,EAAaA,EAAqB,OAAI,GAAK,SAH/C,CAIkBzO,EAAQyO,eAAiBzO,EAAQyO,aAAe,KAGlE,SAAWiL,GACPA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAyB,UAAI,GAAK,YAFpD,CAGmB1Z,EAAQ0Z,gBAAkB1Z,EAAQ0Z,cAAgB,KASrE1Z,EAAQuO,SAPR,MACI5N,YAAYgZ,EAAiBnL,EAAUoL,GACnC/Y,KAAK8Y,gBAAkBA,EACvB9Y,KAAK2N,SAAWA,EAChB3N,KAAK+Y,UAAYA,IAIzB,MAAMH,EACF9Y,YAAYiS,EAAQhR,EAASiY,GACzBhZ,KAAK+R,OAASA,EACd/R,KAAKe,QAAUA,EACff,KAAKgZ,SAAWA,EAEhBhZ,KAAKiZ,OAAS,GAEdjZ,KAAKkZ,QAAU,GACflZ,KAAKqL,EAAI,EACTrL,KAAKsL,EAAI,EACTtL,KAAKgQ,0BAA4B,CAACtR,GAAMsB,KAAKkZ,QAAQxa,IACrDsB,KAAKkQ,yBAA2B,CAACxR,GAAMsB,KAAKiZ,OAAOva,IACnDsB,KAAKmD,MAAQyV,EAAkBlB,YAC/B1X,KAAKmZ,YAActZ,EAAY6B,UAAU6H,IAAIwI,EAAOhH,eAAgB,IAAK,GAAI,CAAC,aAC9E/K,KAAKmZ,YAAY/N,aAAa,sBAAuB,GAAKpL,KAAKmD,OAC/DnD,KAAKoZ,IAAMvZ,EAAY6B,UAAU6H,IAAIvJ,KAAKmZ,YAAa,OAAQ,CAAC,QAAS,MAAO,SAAU,MAAO,KAAM,KAAM,KAAM,MAAO,CAAC,iBAC3H,IAAIlK,EAAQpP,EAAY6B,UAAU6H,IAAIvJ,KAAKmZ,YAAa,OAAQ,CAAC,IAAK,IAAK,IAAK,MAAO,CAAC,mBACxFlK,EAAMQ,YAAc1O,EACpBf,KAAKqZ,UAAYxZ,EAAY6B,UAAU6H,IAAIvJ,KAAKmZ,YAAa,IAAK,CAAC,YAAa,mBAAoB,CAAC,oBACrGnZ,KAAKsZ,WAAazZ,EAAY6B,UAAU6H,IAAIvJ,KAAKmZ,YAAa,IAAK,CAAC,YAAa,qBAAsB,CAAC,qBACxGnZ,KAAKuZ,iBAAmB1Z,EAAY6B,UAAU6H,IAAIvJ,KAAKmZ,YAAa,OAAQ,CAAC,IAAK,IAAK,IAAK,OAAQ,CAAC,uBACrGnZ,KAAKuZ,iBAAiB9J,YAAc,gBACpCzP,KAAKoZ,IAAI7V,QAAU,CAACjF,IAChB4F,QAAQC,IAAI,sCACZ4N,EAAOyH,uBAAuBxZ,KAAM1B,KAEpC0B,KAAK+R,OAAOnD,QAAQxH,uBACpB6H,EAAMC,YAAc,CAAC5Q,IACjB0B,KAAKwP,iBAAiBlR,MAIlCmO,0BAA4B,OAAOzM,KAAKmD,MACxCsW,kBAAoB,OAAOzZ,KAAKmZ,YAChCzD,gBAAkB,OAAO1V,KAAKqZ,UAC9BzD,iBAAmB,OAAO5V,KAAKsZ,WAC/B5L,eAAiB,OAAO1N,KAAKgZ,SAC7BlZ,eAAeI,GACPA,EACAF,KAAKoZ,IAAI5Q,UAAUgF,IAAI,YAGvBxN,KAAKoZ,IAAI5Q,UAAUK,OAAO,YAGlC/I,iBAAiB4Z,GACb1Z,KAAKuZ,iBAAiB9J,YAAciK,EAExC5Z,iBAAiBxB,GACU4I,EAAQgE,MAAMC,sBAAsB7M,EAAG0B,KAAKyZ,aAAnE,IAEIE,EAAUrb,EAAEsb,QAAU5Z,KAAKqL,EAC3BwO,EAAUvb,EAAEwb,QAAU9Z,KAAKsL,EAC/BtJ,SAASuI,UAAY,CAACjM,IAClB0D,SAASuI,UAAY,KACrBvI,SAAS2J,YAAc,OAE3B3J,SAAS2J,YAAcrN,CAAAA,IAEnB0B,KAAKuP,OAAOjR,EAAEsb,QAAUD,EAASrb,EAAEwb,QAAUD,KAGrDvM,aAAe,OAAOtN,KAAK+R,OAE3BrB,cAAgB,OAAO1Q,KAAKe,QAC5BkM,iBAAmB,OAAOjN,KAAKiZ,OAAOrE,UACtCpG,kBAAoB,OAAOxO,KAAKkZ,QAAQtE,UACxC9U,gBACIE,KAAKmZ,YAAYtQ,SAErB/I,iBAAiBia,EAAQC,GACrB,GAA0B,GAAtBha,KAAKiZ,OAAO5Z,QAAsC,GAAvBW,KAAKkZ,QAAQ7Z,OACxC,MAAM,IAAIL,MAAM,6CACpB,IAAK,MAAMN,KAAKqb,EACRrb,EAAE4O,QAAUtN,MAEhBA,KAAKiZ,OAAOpW,KAAKnE,GAErB,IAAK,MAAMD,KAAKub,EACRvb,EAAE6O,QAAUtN,MAEhBA,KAAKkZ,QAAQrW,KAAKpE,GAEtB,IACI6W,EAAS,GAAW,GADd1D,KAAKmE,IAAI/V,KAAKiZ,OAAO5Z,OAAQW,KAAKkZ,QAAQ7Z,QACvB,GAC7BW,KAAKoZ,IAAIhO,aAAa,SAAU,GAAKkK,GACrCtV,KAAKuZ,iBAAiBnO,aAAa,IAAK,GAAKkK,GAGjDxV,OAAOuL,EAAGC,GACN,IAAI2O,EAAIja,KAAK+R,OAAOnD,QAAQlH,KAC5B1H,KAAKqL,EAAIuG,KAAKC,MAAMxG,EAAI4O,GAAKA,EAC7Bja,KAAKsL,EAAIsG,KAAKC,MAAMvG,EAAI2O,GAAKA,EAC7Bja,KAAKmZ,YAAY/N,aAAa,yBAA0BpL,KAAKqL,KAAKrL,KAAKsL,MACvE,IAAK,MAAM1M,KAAKoB,KAAKiZ,OACjBra,EAAEsb,uBAEN,IAAK,MAAMtb,KAAKoB,KAAKkZ,QACjBta,EAAEsb,uBAGVpa,oBAAoBiS,GAIhB,OAAO,EAEXjS,0BAA0BgX,GACtB,IAAK,MAAMqD,KAASna,KAAKiZ,OAAQ,CAC7B,IAAImB,EAAiB,EACjBjZ,EAAQgZ,EAAME,eAClB,GAAoB,GAAhBlZ,EAAM9B,OACN+a,EAAiB,MAEhB,CACD,IAAIE,EAAMnZ,EAAM,GAAGkM,KACnB+M,EAAiBtD,EAAIN,4CAA4ClT,IAAIgX,EAAIvO,MAAMzI,IAAIgX,EAAI5F,uBAAyB,EAEpHoC,EAAIF,OAAOK,UAAUH,EAAIE,aAAcoD,GAAgB,GACvDtD,EAAIE,cAAgB,EAExB,IAAK,MAAMuD,KAAUva,KAAKkZ,QAAS,CAC/B,IAAIkB,EAAiB,EAEjBA,EADsB,GAAtBG,EAAOzO,YACU,EAGAgL,EAAIN,4CAA4ClT,IAAIiX,EAAOxO,MAAMzI,IAAIiX,EAAO7F,uBAAyB,EAE1HoC,EAAIF,OAAOK,UAAUH,EAAIE,aAAcoD,GAAgB,GACvDtD,EAAIE,cAAgB,GAG5BlX,kBAAkBgX,GAEdA,EAAIF,OAAOK,UAAUH,EAAIE,aAAchX,KAAK0N,SAASoL,iBAAiB,GACtEhC,EAAIE,cAAgB,EAEpBF,EAAIF,OAAOK,UAAUH,EAAIE,aAAchX,KAAKyM,qBAAqB,GACjEqK,EAAIE,cAAgB,EACpBhX,KAAKwa,0BAA0B1D,GAC/B9W,KAAKya,2BAA2B3D,GAIpChX,2BAA2B4a,KAI/Bvb,EAAQyZ,kBAAoBA,EAC5BA,EAAkBlB,UAAY,GAC5B,CAAC/R,cAAc,EAAE0N,UAAU,IAAIsH,EAAE,CAAC,SAAS9b,EAAQU,EAAOJ,GAC5D,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQyb,iBAAmBzb,EAAQ0b,kBAAoB1b,EAAQ2b,iBAAmB3b,EAAQ4b,kBAAoB5b,EAAQ6b,eAAiB7b,EAAQ8b,cAAgB9b,EAAQ+b,mBAAqB/b,EAAQgc,mBAAqBhc,EAAQic,kBAAoBjc,EAAQkc,sBAAwBlc,EAAQmc,oBAAsBnc,EAAQoc,YAAcpc,EAAQqc,WAAarc,EAAQsc,YAActc,EAAQuc,YAAcvc,EAAQwc,aAAexc,EAAQyc,YAAczc,EAAQ0c,WAAa1c,EAAQ2c,iBAAc,EACle,MAAM/U,EAAsBlI,EAAQ,uBAC9BgB,EAAchB,EAAQ,eACtB+H,EAAuB/H,EAAQ,wBAWrCM,EAAQ2c,YATR,cAA0B/U,EAAoB6R,kBAC1C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGhB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGsJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACxG3S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQ0c,WATR,cAAyB9U,EAAoB6R,kBACzC9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGhB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGsJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACxG3S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQyc,YATR,cAA0B7U,EAAoB6R,kBAC1C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGnB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGmJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACxG9S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQwc,aATR,cAA2B5U,EAAoB6R,kBAC3C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGnB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGmJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACxG9S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQuc,YATR,cAA0B3U,EAAoB6R,kBAC1C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGnB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGmJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACxG9S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQsc,YATR,cAA0B1U,EAAoB6R,kBAC1C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGnB,EAAI,IAAI/K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACnGmJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcI,SACxG9S,KAAKkc,iBAAiB,CAACF,EAAGrK,GAAI,CAACsK,MAavC9c,EAAQqc,WATR,cAAyBzU,EAAoB6R,kBACzC9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAItK,EAAI,IAAI7K,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGwJ,EAAI,IAAIvV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGsJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACxG3S,KAAKkc,iBAAiB,CAACzK,EAAG0K,GAAI,CAACF,MAYvC9c,EAAQoc,YARR,cAA0BxU,EAAoB6R,kBAC1C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAamO,QAAShV,EAAoB8R,cAAckD,UACvI,IAAIC,EAAI,IAAIpV,EAAqB4M,wBAAwBxT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACnGsJ,EAAI,IAAIrV,EAAqB2M,yBAAyBvT,KAAM,IAAK4G,EAAqB8L,cAAcC,SACxG3S,KAAKkc,iBAAiB,CAACF,GAAI,CAACC,MAYpC9c,EAAQmc,oBARR,cAAkCvU,EAAoB6R,kBAClD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,EAAG3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAcE,YACrI,IAAIsD,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,YAAa4G,EAAqB8L,cAAcC,SAChH3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAYzBnd,EAAQkc,sBARR,cAAoCtU,EAAoB6R,kBACpD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAcE,YACtI,IAAIsD,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,YAAa4G,EAAqB8L,cAAcC,SAChH3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAYzBnd,EAAQic,kBARR,cAAgCrU,EAAoB6R,kBAChD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAcE,YACtI,IAAIsD,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,YAAa4G,EAAqB8L,cAAcC,SAChH3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAYzBnd,EAAQgc,mBARR,cAAiCpU,EAAoB6R,kBACjD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAcE,YACtI,IAAIsD,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,WAAY4G,EAAqB8L,cAAcC,SAC/G3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAYzBnd,EAAQ+b,mBARR,cAAiCnU,EAAoB6R,kBACjD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAcE,YACtI,IAAIsD,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,aAAc4G,EAAqB8L,cAAcG,OACjH7S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAYzBnd,EAAQ8b,cARR,cAA4BlU,EAAoB6R,kBAC5C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAaC,OAAQ9G,EAAoB8R,cAAcE,YACvI,IAAIwD,EAAO,IAAI3V,EAAqB4M,wBAAwBxT,KAAM,QAAS4G,EAAqB8L,cAAcC,SAC9G3S,KAAKkc,iBAAiB,CAACK,GAAO,IAC9Bvc,KAAKsc,UAAY,SAYzBnd,EAAQ6b,eARR,cAA6BjU,EAAoB6R,kBAC7C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAaC,OAAQ9G,EAAoB8R,cAAcE,YACvI,IAAIwD,EAAO,IAAI3V,EAAqB4M,wBAAwBxT,KAAM,MAAO4G,EAAqB8L,cAAcC,SAC5G3S,KAAKkc,iBAAiB,CAACK,GAAO,IAC9Bvc,KAAKsc,UAAY,SAYzBnd,EAAQ4b,kBARR,cAAgChU,EAAoB6R,kBAChD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAaC,OAAQ9G,EAAoB8R,cAAcE,YACvI,IAAIwD,EAAO,IAAI3V,EAAqB4M,wBAAwBxT,KAAM,MAAO4G,EAAqB8L,cAAcC,SAC5G3S,KAAKkc,iBAAiB,CAACK,GAAO,IAC9Bvc,KAAKsc,UAAY,SAYzBnd,EAAQ2b,iBARR,cAA+B/T,EAAoB6R,kBAC/C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAaC,OAAQ9G,EAAoB8R,cAAcE,YACvI,IAAIwD,EAAO,IAAI3V,EAAqB4M,wBAAwBxT,KAAM,MAAO4G,EAAqB8L,cAAcC,SAC5G3S,KAAKkc,iBAAiB,CAACK,GAAO,IAC9Bvc,KAAKsc,UAAY,SAYzBnd,EAAQ0b,kBARR,cAAgC9T,EAAoB6R,kBAChD9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAckD,UACtI,IAAIM,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,OAAQ4G,EAAqB8L,cAAcC,SAC3G3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,SAgBzBnd,EAAQyb,iBAZR,cAA+B7T,EAAoB6R,kBAC/C9Y,YAAYiS,EAAQhR,GAChBL,MAAMqR,EAAQhR,EAAS,IAAIgG,EAAoB2G,SAAS,GAAI3G,EAAoB6G,aAAawO,MAAOrV,EAAoB8R,cAAckD,UACtI,IAAIM,EAAI,IAAIzV,EAAqB2M,yBAAyBvT,KAAM,MAAO4G,EAAqB8L,cAAcC,SAC1G3S,KAAKkc,iBAAiB,GAAI,CAACG,IAC3Brc,KAAKsc,UAAY,OAErBxc,oBAAoBiS,GAEhB,OADAyK,EAAoB7F,OAAO5E,EAAQ,YAAa,MAAO,QAChD,IAIf,MAAMyK,EACF1c,cAAcqR,EAAO1G,EAAKgO,EAAK1C,GAC3B,IAAI3E,EAAKvR,EAAY6B,UAAU4G,KAAK6I,EAAO,KAAM,GAAI,CAAC,4BACtDtR,EAAY6B,UAAU4G,KAAK8I,EAAI,KAAM,GAAI,CAAC,2BAA4B3G,GACtE,IAAIgS,EAAiB5c,EAAY6B,UAAU4G,KAAK8I,EAAI,KAAM,GAAI,CAAC,4BAC/DvR,EAAY6B,UAAU4G,KAAKmU,EAAgB,QAAS,CAAC,OAAQ,SAAU,MAAO,GAAK7K,KAAKC,MAAM4G,GAAM,MAAO,GAAK7G,KAAKC,MAAMkE,QAGjI,CAACpQ,cAAc,EAAEoN,uBAAuB,EAAEG,sBAAsB,IAAIwJ,EAAE,CAAC,SAAS7d,EAAQU,EAAOJ,GACjG,aAIA,IAAIwd,EAFJnd,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQ4O,mBAAqB5O,EAAQuN,iBAAc,EAEnD,SAAWiQ,GACPA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAuB,UAAI,GAAK,YAC5CA,EAAYA,EAAuB,UAAI,GAAK,YAHhD,CAIGA,IAAgBA,EAAc,KASjCxd,EAAQuN,YARR,MACI5M,YAAY8c,GACR5c,KAAK4c,QAAUA,EACf5c,KAAK6c,KAAOF,EAAYG,KACxB9c,KAAKyN,eAAiB,GAE1BT,cAAgB,OAAOhN,KAAK4c,UA0BhCzd,EAAQ4O,mBAtBR,MACIjO,cACIE,KAAK+c,EAAI,IAAIrU,MAEjB5I,KAAKkd,GAGD,OAFAhd,KAAK+c,EAAI,IAAIrU,MACbsU,EAAS1a,QAAS/D,GAAMyB,KAAKid,MAAM1e,IAC5ByB,KAAK+c,EAEhBjd,MAAMvB,GACF,GAAIA,EAAEse,MAAQF,EAAYO,UAA1B,CAEA,GAAI3e,EAAEse,MAAQF,EAAYQ,UACtB,MAAM,IAAIne,MAAM,aACpBT,EAAEse,KAAOF,EAAYQ,UACrB,IAAK,MAAM1Y,KAAKlG,EAAEkP,eACdzN,KAAKid,MAAMxY,GAEflG,EAAEse,KAAOF,EAAYO,UACrBld,KAAK+c,EAAEla,KAAKtE,OAIlB,IAAI6e,EAAE,CAAC,SAASve,EAAQU,EAAOJ,GACjC,aACAK,OAAOC,eAAeN,EAAS,aAAc,CAAEO,OAAO,IACtDP,EAAQ+L,WAAQ,EAOhB/L,EAAQ+L,MANR,MACIpL,6BAA6BiE,EAAKuO,EAASpK,EAAgB,GACvD,IAAImV,EAAO/K,EAAQ2C,wBACnB,MAAO,CAAE5J,GAAItH,EAAI6V,QAAUyD,EAAKlI,MAAQjN,EAAeoD,GAAIvH,EAAI+V,QAAUuD,EAAKhI,KAAOnN,MAI3F,KAAK,GAAG,CAAC","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nimport {Flowchart, FlowchartData, FlowchartOptions} from \"./Flowchart\";\r\ndeclare let Chartist: any;\r\n\r\nexport abstract class ScreenController {\r\n    private state:ControllerState;\r\n    constructor(protected div: HTMLDivElement) {\r\n        this.hideDIV();\r\n        this.state=ControllerState.CREATED;\r\n    }\r\n    get ElementId() { return this.div.id; }\r\n    get State(){return this.state;}\r\n    set State(value:ControllerState){this.state=value;}\r\n    abstract onCreate():void;\r\n    abstract onFirstStart():void;\r\n    abstract onRestart():void;\r\n    abstract onStop():void;\r\n    public showDIV() {\r\n        this.div.style.display = \"block\";\r\n    }\r\n    public hideDIV() {\r\n        this.div.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport class DevelopCFCController extends ScreenController {\r\n    private fc:Flowchart;\r\n    onFirstStart(): void {\r\n       this.fc.onFirstStart();\r\n    }\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    public onCreate() {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n        let data: FlowchartData = {\r\n            operators: [\r\n                {\r\n                    caption: \"RedButton_1\",\r\n                    type: \"RedButton\",\r\n                    id: \"RedButton_1\",\r\n                    posX: 10,\r\n                    posY: 10,\r\n                },\r\n                {\r\n                    caption: \"GreenButton_1\",\r\n                    type: \"GreenButton\",\r\n                    id: \"GreenButton_1\",\r\n                    posX: 10,\r\n                    posY: 150,\r\n                },\r\n                {\r\n                    caption: \"AND_1\",\r\n                    type: \"AND\",\r\n                    id: \"AND_1\",\r\n                    posX: 250,\r\n                    posY: 10,\r\n                },\r\n                {\r\n                    caption: \"RedLed_1\",\r\n                    type: \"RedLed\",\r\n                    id: \"RedLed_1\",\r\n                    posX: 500,\r\n                    posY: 10,\r\n                },\r\n               \r\n            ],\r\n            links: [\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"RedButton_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"AND_1\",\r\n                    toInput: 0\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"GreenButton_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"AND_1\",\r\n                    toInput: 1\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"AND_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"RedLed_1\",\r\n                    toInput: 0\r\n                },\r\n            ]\r\n        };\r\n        let options = new FlowchartOptions();\r\n        options.data = data;\r\n        this.fc = new Flowchart(this.div, options);\r\n    }\r\n    \r\n\r\n}\r\n\r\nclass DashboardController extends ScreenController {\r\n    public onFirstStart(): void {}\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    public onCreate() {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n    }\r\n\r\n}\r\n\r\ninterface ChartistData\r\n{\r\n    labels:string[];\r\n    series:number[][];\r\n    low:number;\r\n    high:number;\r\n}\r\n\r\nclass ReportsController extends ScreenController {\r\n    public onFirstStart(): void {}\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n    }\r\n    public onCreate() {\r\n        return;\r\n        let data:ChartistData = {\r\n            // A labels array that can contain any sort of values\r\n            labels: [],\r\n            // Our series array that contains series objects or in this case series data arrays\r\n            series: [[]],\r\n            low: 0,\r\n            high: 40\r\n        };\r\n        let options = {\r\n            width: 600,\r\n            height: 400\r\n        };\r\n        let currVal = 20;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            data.labels.push(\"\"+ (10 - i));\r\n            data.series[0][i] = currVal;\r\n        }\r\n        // Create a new line chart object where as first parameter we pass in a selector\r\n        // that is resolving to our chart container element. The Second parameter\r\n        // is the actual data object.\r\n        let chart = new Chartist.Line('.ct-chart', data, options);\r\n        let timer = window.setInterval(() => {\r\n            let foo = data.series[0].slice(1);\r\n            foo.push(20 + 3 * Math.random())\r\n            data.series[0] = foo;\r\n            chart.update(data, options, false);\r\n\r\n        }, 500);\r\n        window.setTimeout(() => { window.clearInterval(timer) }, 10000);\r\n    }\r\n}\r\n\r\nenum ControllerState{\r\n    CREATED,\r\n    STARTED,\r\n    STOPPED,\r\n}\r\n\r\nclass AppController {\r\n\r\n    private stateDiv: HTMLDivElement;\r\n    private activeControllerIndex:number;\r\n    private screenControllers:ScreenController[];\r\n\r\n    \r\n\r\n    constructor() {\r\n        this.stateDiv = <HTMLDivElement>document.getElementById(\"spnConnectionState\")!;\r\n        this.screenControllers=[];\r\n        this.activeControllerIndex=0;\r\n    }\r\n\r\n    private SetApplicationState(state: string) {\r\n        this.stateDiv.innerHTML = state;\r\n\r\n    }\r\n\r\n    private setActiveScreen(newIndex:number)\r\n    {\r\n        this.screenControllers.forEach((controller,i)=>{\r\n            if(i==newIndex)\r\n            {\r\n                controller.showDIV();\r\n                if(controller.State==ControllerState.CREATED){\r\n                    controller.onFirstStart();\r\n                    controller.State=ControllerState.STARTED;\r\n                }\r\n                else{\r\n                    controller.onRestart();\r\n                    controller.State=ControllerState.STARTED;\r\n                }\r\n            }else{\r\n                controller.hideDIV();\r\n                if(controller.State==ControllerState.STARTED)\r\n                {\r\n                    controller.onStop();\r\n                    controller.State=ControllerState.STOPPED;\r\n                }\r\n            }\r\n        });\r\n        this.activeControllerIndex=newIndex;\r\n    }\r\n\r\n    public startup() {\r\n        this.screenControllers.push(new DashboardController(<HTMLDivElement>document.getElementById(\"screen_dashboard\")));\r\n        this.screenControllers.push(new DevelopCFCController(<HTMLDivElement>document.getElementById(\"screen_develop\")));\r\n        this.screenControllers.push(new ReportsController(<HTMLDivElement>document.getElementById(\"screen_reports\")));\r\n        this.screenControllers.forEach((sc)=>sc.onCreate());\r\n        \r\n        this.setActiveScreen(0);\r\n        let id2index = new Map<string, number>();\r\n        this.screenControllers.forEach((value, index)=>{id2index.set(\"show_\"+value.ElementId, index)})\r\n        document.querySelectorAll<HTMLAnchorElement>(\"nav a\").forEach((a: HTMLAnchorElement) => {\r\n            let id = a.id;\r\n            let index=id2index.get(a.id)||0;\r\n            a.onclick = (e) => this.setActiveScreen(index);\r\n        });\r\n\r\n\r\n        this.SetApplicationState(\"WebSocket is not connected\");\r\n        let websocket = new WebSocket('ws://' + location.hostname + '/w');\r\n        \r\n\r\n\r\n        websocket.onopen = e => {\r\n            this.SetApplicationState('WebSocket connection opened');\r\n            document.getElementById(\"test\")!.innerHTML = \"WebSocket is connected!\";\r\n        }\r\n\r\n        websocket.onmessage = (evt) => {\r\n            var msg = evt.data;\r\n            let value: string;\r\n            switch (msg.charAt(0)) {\r\n                case 'L':\r\n                    console.log(msg);\r\n                    value = msg.replace(/[^0-9\\.]/g, '');\r\n                    switch (value) {\r\n                        case \"0\": document.getElementById(\"led1\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"1\": document.getElementById(\"led1\")!.style.backgroundColor = \"green\"; break;\r\n                        case \"2\": document.getElementById(\"led2\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"3\": document.getElementById(\"led2\")!.style.backgroundColor = \"green\"; break;\r\n                    }\r\n                    console.log(\"Led = \" + value);\r\n                    break;\r\n                default:\r\n                    let p = JSON.parse(evt.data);\r\n                    document.getElementById(\"td_myName\")!.innerText = p.d.myName;\r\n                    document.getElementById(\"td_temperature\")!.innerText = p.d.temperature;\r\n                    document.getElementById(\"td_humidity\")!.innerText = p.d.humidity;\r\n                    document.getElementById(\"td_heap\")!.innerText = p.info.heap;\r\n                    document.getElementById(\"td_time\")!.innerText = p.info.time;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        websocket.onclose = (e) => {\r\n            console.log('Websocket connection closed due to '+e.reason);\r\n            this.SetApplicationState('Websocket connection closed due to '+e.reason);\r\n        }\r\n\r\n        websocket.onerror = (evt) => {\r\n            console.log('Websocket error: ' + evt.returnValue);\r\n            this.SetApplicationState(\"WebSocket error!\" + evt.returnValue);\r\n        }\r\n\r\n        document.querySelectorAll<HTMLButtonElement>(\"#pButtons button\").forEach((b: HTMLButtonElement) => {\r\n            b.onclick = (e: MouseEvent) => {\r\n                websocket.send(\"L\" + b.dataset.rel);\r\n            };\r\n        });\r\n\r\n    }\r\n}\r\n\r\nlet app: AppController;\r\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\r\n    app = new AppController();\r\n    app.startup();\r\n});\r\n\r\n\r\n","import { ConnectorType, FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { FlowchartExporter } from \"./FlowchartExporter\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport { FlowchartOperator, PositionType, TypeInfo } from \"./FlowchartOperator\";\r\nimport * as operatorimpl from \"./FlowchartOperatorImpl\";\r\nimport { NodeWrapper, TopologicalSortDFS } from \"./TopologicalSorfDFS\";\r\nimport { Utils } from \"./Utils\";\r\n/*\r\nIn einem Ressources-Toolbar befinden sich alle Ressourcen (Input und Output), die ein Board anbietet. Diese können genau einmal auf das Board gezogen werden\r\nProblem: OneWire-Ressourcen!: \r\nOperator-Klassen haben ein Positionstyp: Default, Input, Output\r\nOperator-Klassen haben einen Singleton-Typ, nämlich Default, Singleton. Bei Singletons darf nur eine Instanz der KLasse erzeugt werden\r\nOperator-Instanzen können per Propery-Grid konfiguriert werden. Sie stellen eine Methode PopulateProperyGrid(HMTLDivElement) zur Verfügung, das ein editerbares HTML-Grid ins DIV hineinzeichnen. Außerhalb wurde dieses div zuvor geleert und im Anschluss wird von außerhalb ein Save-Button gerendert.\r\n  Ein null-Rückgabewert bedeutet, dass kein PropertyGrid benötigt wird.\r\n  Sie stellen weiterhin eine Methode SaveProperyGrid(HMTLDivElement) zur Verfügung, in der sie die Inhalte wieder einlesen und intern wie auch immer speichern\r\n  Sie stellen weiterhin eine Methode GetPropertyGridDataAsJSONString() zur Verfügung. Diese gibt die Daten als JSON-String zurück\r\n\r\n*/\r\n\r\nexport class FlowchartOptions {\r\n    canUserEditLinks: boolean = true;\r\n    canUserMoveOperators: boolean = true;\r\n    data?: FlowchartData = undefined;\r\n    distanceFromArrow: number = 3;\r\n    defaultOperatorClass: string = 'flowchart-default-operator';\r\n    defaultLinkColor: string = '#3366ff';\r\n    defaultSelectedLinkColor: string = 'black';\r\n    linkWidth: number = 10;\r\n    grid: number = 10;\r\n    multipleLinksOnOutput: boolean = true;\r\n    multipleLinksOnInput: boolean = false;\r\n    linkVerticalDecal: number = 0;\r\n    onOperatorSelect?: (operatorId: string)=>boolean ;\r\n    onOperatorUnselect?: () => boolean;\r\n    onOperatorMouseOver?: (operatorId: string) => boolean;\r\n    onOperatorMouseOut?: (operatorId: string) => boolean;\r\n    onLinkSelect?: (link: FlowchartLink) => boolean;\r\n    onLinkUnselect?: (link: FlowchartLink) => boolean;\r\n    onOperatorCreate?: (operatorId: string, operatorData: any, fullElement: boolean) => boolean;\r\n    onLinkCreate?: (linkId: string, linkData: any) => boolean;\r\n    onOperatorDelete?: (operatorId: string) => boolean;\r\n    onLinkDelete?: (linkId: string, forced: boolean) => boolean;\r\n    onOperatorMoved?: (operatorId: string, position: number) => void;\r\n    onAfterChange?: (changeType: any) => void;\r\n}\r\n\r\n    export interface FlowchartData {\r\n        operators: OperatorData[];\r\n        links: LinkData[];\r\n    }\r\n\r\n    export interface OperatorData {\r\n        type: string;\r\n        caption: string;\r\n        id: string;\r\n        posX: number;\r\n        posY: number;\r\n    }\r\n\r\n    export interface LinkData {\r\n        color: string;\r\n        fromId: string;\r\n        fromOutput: number;\r\n        toId: string;\r\n        toInput: number;\r\n    }\r\n\r\n    //Connector besteht aus \"wrapper\", dem Label, dem großen dreieck und einem kleinen Dreieck\r\n\r\n    export class Flowchart {\r\n        private operators = new Map<number, FlowchartOperator>();\r\n        private links = new Map<number, FlowchartLink>();\r\n        public static readonly SVGNS = \"http://www.w3.org/2000/svg\";\r\n        public static readonly XLINKNS = \"http://www.w3.org/1999/xlink\";\r\n        public static readonly HTMLNS = \"http://www.w3.org/1999/xhtml\";\r\n        public static readonly DATATYPE2COLOR = new Map([[ConnectorType.BOOLEAN, \"RED\"], [ConnectorType.COLOR, \"GREEN\"], [ConnectorType.FLOAT, \"BLUE\"], [ConnectorType.INTEGER, \"YELLOW\"], [ConnectorType.COLOR, \"PURPLE\"]]);\r\n\r\n  \r\n        private lastOutputConnectorClicked: FlowchartOutputConnector|null=null;\r\n        private selectedOperator: FlowchartOperator|null=null;\r\n        private selectedLink: FlowchartLink|null=null;\r\n        get SelectedLink() { return this.selectedLink };\r\n        \r\n        private positionRatio: number = 1;\r\n        get PositionRatio() { return this.positionRatio; }\r\n        \r\n        private flowchartContainerSvgSvg:SVGSVGElement\r\n        private linksLayer: SVGGElement;\r\n        get LinkLayer() { return this.linksLayer; }\r\n        private operatorsLayer: SVGGElement;\r\n        get OperatorsLayer() { return this.operatorsLayer; }\r\n        private toolsLayer:SVGGElement;\r\n        get ToolsLayer() { return this.toolsLayer; }\r\n        private tempLayer:SVGGElement;\r\n        private temporaryLink: SVGLineElement;\r\n        private temporaryLinkSnapped=false;\r\n        private propertyGridHtmlDiv:HTMLDivElement;\r\n\r\n        private markerArrow:SVGPathElement;\r\n        private markerCircle:SVGCircleElement;\r\n\r\n        private upcounter=0;\r\n\r\n        public _notifyGlobalMousemoveWithLink(e:MouseEvent)\r\n        {\r\n            if (this.lastOutputConnectorClicked != null && !this.temporaryLinkSnapped) {\r\n                let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n                this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n                this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n            }\r\n        }\r\n\r\n        public _notifyGlobalMouseupWithLink(e:MouseEvent)\r\n        {\r\n            this.unsetTemporaryLink();\r\n        }\r\n\r\n        \r\n\r\n        public _notifyOutputConnectorMousedown(c: FlowchartOutputConnector, e: MouseEvent) {\r\n            this.temporaryLinkSnapped=false;\r\n            let start = c.GetLinkpoint();\r\n            let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n            this.temporaryLink.setAttribute('x1', \"\"+start.x);\r\n            this.temporaryLink.setAttribute('y1', \"\"+start.y);\r\n            this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n            this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n            this.setTemporaryLink(c);\r\n            document.onmouseup = (e) => {\r\n                document.onmouseup = null;\r\n                document.onmousemove = null;\r\n                this._notifyGlobalMouseupWithLink(e);\r\n            };\r\n            document.onmousemove = (e) => {\r\n                this._notifyGlobalMousemoveWithLink(e);\r\n            };\r\n        }\r\n\r\n        public _notifyInputConnectorMouseup(c: FlowchartInputConnector, e:MouseEvent) {\r\n            if (this.lastOutputConnectorClicked == null) return;\r\n            if(!this.options.multipleLinksOnInput && c.LinksLength>0) return;\r\n            if(this.lastOutputConnectorClicked.Type==c.Type)\r\n            {\r\n                this.createLink(null, this.lastOutputConnectorClicked, c);\r\n            }\r\n            this.unsetTemporaryLink();\r\n\r\n        }\r\n\r\n        public _notifyOperatorClicked(o: FlowchartOperator, e: MouseEvent) {\r\n            this.SelectOperator(o);\r\n        }\r\n\r\n        public _notifyLinkClicked(link: FlowchartLink, e: MouseEvent) {\r\n            this.selectLink(link);\r\n        }\r\n\r\n        public _notifyInputConnectorMouseenter(c:FlowchartInputConnector, e:MouseEvent){\r\n            if (this.lastOutputConnectorClicked == null || this.lastOutputConnectorClicked.Type!=c.Type) return;\r\n            if(!this.options.multipleLinksOnInput && c.LinksLength>0) return;\r\n\r\n            this.temporaryLinkSnapped=true;\r\n            let end= c.GetLinkpoint();\r\n            this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-circle)\");\r\n            this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n            this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n        }\r\n\r\n        public _notifyInputConnectorMouseleave(c:FlowchartInputConnector, e:MouseEvent){\r\n            this.temporaryLinkSnapped=false;\r\n            this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-arrow)\");\r\n        }\r\n\r\n        public unselectLink() {\r\n            if (this.selectedLink != null) {\r\n                if (this.options.onLinkUnselect && !this.options.onLinkUnselect(this.selectedLink)) {\r\n                    return;\r\n                }\r\n                this.selectedLink.UncolorizeLink();\r\n                this.selectedLink = null;\r\n            }\r\n        }\r\n\r\n        public selectLink(link: FlowchartLink) {\r\n            this.unselectLink();\r\n            if (this.options.onLinkSelect && !this.options.onLinkSelect(link)) {\r\n                return;\r\n            }\r\n            this.unselectOperator();\r\n            this.selectedLink = link;\r\n            link.ColorizeLink(this.options.defaultSelectedLinkColor);\r\n        }\r\n\r\n        private compile():void{\r\n            let index2wrappedOperator = new Map<number,NodeWrapper<FlowchartOperator>>();\r\n            this.operators.forEach((v,k,m)=>{\r\n                index2wrappedOperator.set(v.GlobalOperatorIndex, new NodeWrapper<FlowchartOperator>(v));\r\n            });\r\n            \r\n              \r\n            let wrappedOutputOperators:NodeWrapper<FlowchartOperator>[] =[];\r\n            for(let i of index2wrappedOperator.values()){\r\n                //Stelle für jede \"gewrapte Node\" fest, welche Operatoren von Ihr abhängig sind\r\n                let dependents = new Set<NodeWrapper<FlowchartOperator>>();\r\n                for (const inputkv of i.Payload.InputsKVIt) {\r\n                    for(const linkkv of inputkv[1].LinksKVIt)\r\n                    {\r\n                        let dependentOperator = linkkv[1].From.Parent;\r\n                        let dependentWrappedNode = index2wrappedOperator.get(dependentOperator.GlobalOperatorIndex);\r\n                        if(!dependentWrappedNode) \r\n                            throw new Error(\"Implementation Error: dependentWrappedNode is undefined\");\r\n                        dependents.add(dependentWrappedNode);\r\n                    }\r\n                }\r\n                dependents.forEach(e=>i.DependendNodes.push(e));\r\n                //füge alle mit Typ \"Output\" einer Liste hinzu\r\n                if(i.Payload.TypeInfo.Position==PositionType.Output) wrappedOutputOperators.push(i);\r\n            }\r\n            \r\n            let algorithm = new TopologicalSortDFS<FlowchartOperator>();\r\n            let sortedList = algorithm.sort(wrappedOutputOperators);\r\n            for (const key in sortedList) {\r\n                let value = sortedList[key];\r\n                value.Payload.SetDebugInfoText(\"Sequenznummer \"+key);\r\n            }\r\n            FlowchartExporter.Export(sortedList.map((e)=>e.Payload));\r\n        }\r\n\r\n        private deleteSelectedOperator():void{\r\n            if(!this.selectedOperator) return;\r\n            this.selectedOperator.RemoveFromDOM();\r\n            this.operators.delete(this.selectedOperator.GlobalOperatorIndex);\r\n            for (const outputKV of this.selectedOperator.OutputsKVIt) {\r\n                for (const linkKV of outputKV[1].LinksKVIt) {\r\n                    this.DeleteLink(linkKV[1].GlobalLinkIndex);\r\n                }\r\n            }\r\n            this.unselectOperator();\r\n        }\r\n\r\n        constructor(private container: HTMLDivElement, private options: FlowchartOptions) {\r\n            if(!this.container)\r\n            {\r\n                throw new Error(\"container is null\");\r\n            }\r\n            let subcontainer = <HTMLDivElement>Flowchart.Html(this.container, \"div\", [], [\"develop-ui\"]);\r\n            \r\n            subcontainer.onclick=(e)=>\r\n            {\r\n                if((<HTMLElement>e.target).classList.contains(\"dropbtn\")) return;\r\n                Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem:HTMLDivElement)=>{elem.classList.remove(\"show\");});\r\n            }\r\n\r\n            let toolbar = Flowchart.Html(subcontainer, \"div\", [], [\"develop-toolbar\"]);\r\n            let filebutton = Flowchart.Html(toolbar, \"a\", [\"href\", \"#\"], [\"develop-toolbar\"], \"File\");\r\n            let runbutton = Flowchart.Html(toolbar, \"a\", [\"href\", \"#\"], [\"develop-toolbar\"], \"Run\");\r\n            let menuDebug= Flowchart.Html(toolbar, \"div\", [], [\"dropdown\"]);\r\n            let menuDebugDropBtn = <HTMLButtonElement>Flowchart.Html(menuDebug, \"button\", [], [\"dropbtn\"], \"Debug ▼\");\r\n            \r\n            let menuDebugDropContent = Flowchart.Html(menuDebug, \"div\", [], [\"dropdown-content\"]);\r\n            menuDebugDropBtn.onclick=(e)=>{\r\n                menuDebugDropContent.classList.toggle(\"show\");\r\n            };\r\n            Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"☭ Compile\").onclick=(e)=>\r\n            {\r\n                Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem:HTMLDivElement)=>{elem.classList.remove(\"show\");});\r\n                this.compile();\r\n            }\r\n            Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"👣 Run on device\").onclick=(e)=>\r\n            {\r\n\r\n            }\r\n            let menuDebugLink2 = Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◉ Stop\");\r\n            let menuDebugLink3 = Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◯ Erase\");\r\n            \r\n            \r\n            let workspace = <HTMLDivElement>Flowchart.Html(subcontainer, \"div\", [\"tabindex\", \"0\"], [\"develop-workspace\"]);//tabindex, damit keypress-Events abgefangen werden können\r\n            this.propertyGridHtmlDiv = <HTMLDivElement>Flowchart.Html(subcontainer, \"div\", [], [\"develop-properties\"]);\r\n\r\n            \r\n\r\n            this.flowchartContainerSvgSvg = <SVGSVGElement>Flowchart.Svg(workspace, \"svg\", [\"width\", \"100%\", \"height\", \"100%\"], [\"flowchart-container\"]);\r\n            \r\n            \r\n            this.linksLayer = <SVGGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-links-layer\"]);\r\n            this.operatorsLayer=<SVGGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-operators-layer\", \"unselectable\"]);\r\n            this.tempLayer = <SVGSVGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-temporary-link-layer\"]);\r\n            this.tempLayer.style.visibility=\"hidden\";//visible\r\n            let defs = Flowchart.Svg(this.tempLayer, \"defs\", []);\r\n            let markerArrow = Flowchart.Svg(defs, \"marker\", [\"id\", \"marker-arrow\",\"markerWidth\",\"4\", \"markerHeight\", \"4\", \"refX\", \"1\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n            this.markerArrow=<SVGPathElement>Flowchart.Svg(markerArrow, \"path\", [\"d\", \"M0,0 L0,4 L2,2 z\", \"fill\", \"red\", \"stroke\", \"black\", \"stroke-width\", \"0.5\"]);\r\n            let markerCircle = Flowchart.Svg(defs, \"marker\", [\"id\", \"marker-circle\",\"markerWidth\",\"4\", \"markerHeight\", \"4\", \"refX\", \"2\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n            this.markerCircle=<SVGCircleElement>Flowchart.Svg(markerCircle, \"circle\", [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\", \"fill\", \"red\", \"stroke-width\", \"1px\",\"stroke\", \"black\"]);\r\n            this.temporaryLink = <SVGLineElement>Flowchart.Svg(this.tempLayer, \"line\", [\"x1\", \"0\",\"y1\", \"0\",\"x2\", \"0\",\"y2\", \"0\",\"stroke-dasharray\", \"6,6\",\"stroke-width\", \"4\",\"stroke\", \"black\",\"fill\", \"none\", \"marker-end\", \"url(#marker-arrow)\"]);\r\n            \r\n            let toolsActivator = <SVGRectElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"rect\", [\"width\",\"40\", \"height\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"0\"]);\r\n\r\n            this.toolsLayer  = <SVGSVGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-tools-layer\", \"unselectable\"]);\r\n            this.toolsLayer.style.display=\"none\";//visible\r\n            \r\n            let toolsRect= <SVGRectElement>Flowchart.Svg(this.toolsLayer, \"rect\", [\"width\",\"140\", \"height\", \"100%\", \"rx\", \"10\", \"ry\", \"10\"], [\"tools-container\"]);\r\n            \r\n            //The onmousemove event occurs every time the mouse pointer is moved over the div element.\r\n            //The mouseenter event only occurs when the mouse pointer enters the div element.\r\n            //The onmouseover event occurs when the mouse pointer enters the div element, and its child elements (p and span).\r\n\r\n            //The mouseout event triggers when the mouse pointer leaves any child elements as well the selected element.\r\n            //The mouseleave event is only triggered when the mouse pointer leaves the selected element.\r\n            toolsActivator.onmouseenter= (e)=>\r\n            {\r\n                this.toolsLayer.style.display=\"initial\";\r\n            }\r\n            this.toolsLayer.onmouseleave = (e)=>\r\n            {\r\n                this.toolsLayer.style.display=\"none\";\r\n            }\r\n\r\n            this.flowchartContainerSvgSvg.onclick = (e) => {\r\n                if (e.target == this.Element)//if the click is in a \"free\" area, then the target is the uppermost layer; the linkLayer!\r\n                {\r\n                    this.unselectOperator();\r\n                    this.unselectLink();\r\n                }\r\n            }\r\n            this.flowchartContainerSvgSvg.onmouseup=(e)=>\r\n            {\r\n                console.log(\"Flowchart this.element.onmouseup with e.target=\"+e.target);\r\n            }\r\n\r\n            workspace.onkeyup=(e)=>\r\n            {\r\n                if(e.key==\"Delete\")\r\n                {\r\n                    console.log(\"Flowchart workspace.onkeyup with e.target=\"+e.target+\" und Delete-Key\");\r\n                    this.deleteSelectedOperator();\r\n                }\r\n                else{\r\n                    console.log(\"Flowchart workspace.onkeyup with e.target=\"+e.target+\" und key \"+e.key);\r\n                }\r\n            }\r\n\r\n            this.populateToolsLayer();\r\n\r\n        }\r\n        get Options() { return this.options; }\r\n        get Element(){return this.flowchartContainerSvgSvg;}\r\n\r\n        public onFirstStart()\r\n        {\r\n            if (typeof this.options.data !== undefined && this.options.data!=null) {\r\n                this.setData(this.options.data);\r\n            }\r\n        }\r\n\r\n        private populateToolsLayer()\r\n        {\r\n            let y=10;\r\n            for(let clazz in operatorimpl)\r\n            {\r\n                if((<any>operatorimpl)[clazz].GetTypeInfo){\r\n                    let info:TypeInfo = (<any>operatorimpl)[clazz].GetTypeInfo();\r\n                    //if(info.Position!=PositionType.Default || info.Singleton!=SingletonType.Default) continue;\r\n                }\r\n                let toolGroup = <SVGGElement>Flowchart.Svg(this.toolsLayer, \"g\", [\"transform\", `translate(5 ${y})`]);\r\n                let box = <SVGRectElement>Flowchart.Svg(toolGroup, \"rect\", [\"width\",\"130\", \"height\", \"30\", \"rx\", \"10\", \"ry\", \"10\"], [\"tool-box\"]);\r\n                let title = Flowchart.Svg(toolGroup,\"text\", [\"x\", \"5\", \"y\", \"25\"],[\"tool-caption\"]);\r\n            \r\n                toolGroup.onmousedown=(e)=>\r\n                {\r\n                    \r\n                    let cnt = this.upcounter;\r\n                    let name = clazz.substring(0, clazz.length-\"Operator\".length)+\"_\"+this.upcounter\r\n                    if (this.options.onOperatorCreate && !this.options.onOperatorCreate(name, null, false)) {\r\n                        return null;\r\n                    }\r\n                    console.log(\"Creating \"+name);\r\n                    this.upcounter++;\r\n                    let o: FlowchartOperator = new (<any>operatorimpl)[clazz](this, name);\r\n                    let coords = Utils.EventCoordinatesInSVG(e, this.Element);\r\n                    o.MoveTo(coords.x-10, coords.y-10);\r\n                    o.RegisterDragging(e);\r\n                    this.operators.set(o.GlobalOperatorIndex, o);\r\n                }\r\n                title.textContent = clazz;\r\n                y+=40;\r\n            }\r\n        }\r\n\r\n        public setData(data: FlowchartData) {\r\n\r\n            this.links.forEach((e)=>e.RemoveFromDOM());\r\n            this.links.clear();\r\n            this.operators.forEach((e)=>e.RemoveFromDOM());\r\n            this.operators.clear();\r\n            let opId2op: { [id: string]: FlowchartOperator } = {};\r\n\r\n            for (const d of data.operators) {\r\n                let o = this.createOperator(d);\r\n                opId2op[d.id] = o;\r\n            }\r\n            for (const d of data.links) {\r\n                let fromOp = opId2op[d.fromId];\r\n                let toOp = opId2op[d.toId];\r\n                if(fromOp==null || toOp==null) continue;\r\n                let fromConn = fromOp.GetOutputConnectorByIndex(d.fromOutput);\r\n                let toConn = toOp.GetInputConnectorByIndex(d.toInput);\r\n                if(fromConn==null || toConn==null) continue;\r\n                this.createLink(d, fromConn, toConn);\r\n            }\r\n        }\r\n        public DeleteLink(globalLinkIndex: number) {\r\n            let l = this.links.get(globalLinkIndex);\r\n            if(l==null)\r\n            {\r\n                throw Error(\"Link to delete is null\")\r\n            }\r\n            l.RemoveFromDOM();\r\n            this.links.delete(globalLinkIndex);\r\n            l.To.RemoveLink(l);\r\n            l.From.RemoveLink(l);\r\n        }\r\n\r\n        public createLink(data: LinkData|null, from: FlowchartOutputConnector, to: FlowchartInputConnector): FlowchartLink|null {\r\n            if (this.options.onLinkCreate && !this.options.onLinkCreate(from.Caption, data)) return null;\r\n            if (!this.options.multipleLinksOnOutput && from.LinksLength > 0) return null;\r\n            if (!this.options.multipleLinksOnInput && to.LinksLength > 0)  return null;\r\n\r\n            let l: FlowchartLink = new FlowchartLink(this, \"\", this.Options.defaultLinkColor, from, to);\r\n            from.AddLink(l);\r\n            to.AddLink(l);\r\n            this.links.set(l.GlobalLinkIndex, l);\r\n            return l;\r\n        }\r\n       \r\n        public createOperator(data: OperatorData): FlowchartOperator {\r\n\r\n            let name = data.type+\"Operator\";\r\n            if (!(<any>operatorimpl)[name]) {\r\n                throw new Error(`Unknown type ${data.type}`);\r\n            }\r\n            if (this.options.onOperatorCreate && !this.options.onOperatorCreate(data.caption, null, false)) {\r\n                throw new Error(`Creation of operator ${data.type} prevented by onOperatorCreate plugin`);\r\n            }\r\n            let o: FlowchartOperator = new (<any>operatorimpl)[name](this, data.caption);\r\n            o.MoveTo(data.posX, data.posY);\r\n            this.operators.set(o.GlobalOperatorIndex,o);\r\n            return o;\r\n        }\r\n\r\n        private unsetTemporaryLink() {\r\n            this.lastOutputConnectorClicked = null;\r\n            this.tempLayer.style.visibility = \"hidden\";\r\n        }\r\n\r\n        private setTemporaryLink(c:FlowchartOutputConnector) {\r\n            this.lastOutputConnectorClicked = c;\r\n            let color = Flowchart.DATATYPE2COLOR.get(c.Type)\r\n            if(!color) color=\"BLACK\";\r\n            this.markerArrow.style.fill=color;\r\n            this.markerCircle.style.fill=color;\r\n            this.tempLayer.style.visibility = \"visible\";\r\n        }\r\n\r\n        private unselectOperator() {\r\n            if (this.options.onOperatorUnselect && !this.options.onOperatorUnselect()) return;\r\n            this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n            if (this.selectedOperator == null) return;\r\n            this.selectedOperator.ShowAsSelected(false);\r\n            this.selectedOperator = null;\r\n        }\r\n\r\n\r\n        public SelectOperator(operator: FlowchartOperator):void {\r\n            if (this.options.onOperatorSelect && !this.options.onOperatorSelect(operator.Caption)) return;\r\n            this.unselectLink();\r\n            if(this.selectedOperator!=null) this.selectedOperator.ShowAsSelected(false);\r\n            operator.ShowAsSelected(true);\r\n            this.selectedOperator = operator;\r\n            this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n            Flowchart.Html(this.propertyGridHtmlDiv, \"p\", [],[\"develop-propertygrid-head\"], `Properties for ${this.selectedOperator.Caption}`);\r\n            let table=<HTMLTableElement>Flowchart.Html(this.propertyGridHtmlDiv, \"table\", [],[\"develop-propertygrid-table\"]);\r\n            let tr=Flowchart.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n            Flowchart.Html(tr, \"th\", [],[\"develop-propertygrid-th\"], \"Key\");\r\n            Flowchart.Html(tr, \"th\", [],[\"develop-propertygrid-th\"], \"Value\");\r\n            if(this.selectedOperator!.PopulateProperyGrid(table))\r\n            {\r\n                Flowchart.Html(this.propertyGridHtmlDiv, \"button\", [],[\"develop-propertygrid-button\"], `Save`);\r\n            }\r\n            else{\r\n                this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n                Flowchart.Html(this.propertyGridHtmlDiv, \"p\", [],[\"develop-propertygrid-head\"], `No Properties for ${this.selectedOperator.Caption}`);\r\n            } \r\n        }\r\n\r\n        // Found here : http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n        public static _shadeColor(color: string, percent: number) {\r\n            var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\r\n            return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\r\n        }\r\n\r\n        public static Svg(parent: Element, type:string,  attributes:string[], classes?: string[]):SVGElement {\r\n            return <SVGElement>Flowchart.Elem(Flowchart.SVGNS, parent, type, attributes, classes);\r\n        }\r\n\r\n        public static Html(parent: Element, type:string,  attributes:string[], classes?: string[], textContent?:string):HTMLElement {\r\n            return <HTMLElement>Flowchart.Elem(Flowchart.HTMLNS, parent, type, attributes, classes, textContent);\r\n        }\r\n\r\n        private static Elem(ns:string, parent:Element, type:string, attributes:string[], classes?: string[], textContent?:string)\r\n        {\r\n            let element = document.createElementNS(ns, type);\r\n            if(classes)\r\n            {\r\n                for (const clazz of classes) {\r\n                    element.classList.add(clazz);\r\n                }\r\n            }\r\n            let i:number;\r\n            for(i=0;i<attributes.length;i+=2)\r\n            {\r\n                element.setAttribute(attributes[i], attributes[i+1]);\r\n            }\r\n            if(textContent)\r\n            {\r\n                element.textContent=textContent;\r\n            }\r\n            parent.appendChild(element);\r\n            return element;\r\n        }\r\n    }\r\n","import { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport {Location2D} from \"./Utils\"\r\n\r\nconst TRANSLATEY = 20;\r\n\r\nexport enum ConnectorType{\r\n    UNDEFINED =0,\r\n    BOOLEAN=1,\r\n    INTEGER=2,\r\n    FLOAT=3,\r\n    COLOR=4,\r\n}\r\n\r\nexport abstract class FlowchartConnector {\r\n    private static INDEX: number = 0;\r\n    private index: number;\r\n    get GlobalConnectorIndex() { return this.index; }\r\n\r\n    protected element: SVGGElement;\r\n    get Element() { return this.element; }\r\n\r\n    protected snapper:SVGCircleElement;\r\n    protected connector:SVGElement;\r\n    protected connectorGroup:SVGGElement;\r\n\r\n    private links = new Map<number, FlowchartLink>();\r\n    public HasLink = (globalLinkIndex: number) => this.links.has(globalLinkIndex);\r\n    public AddLink = (link: FlowchartLink) => this.links.set(link.GlobalLinkIndex, link);\r\n    public RemoveLink = (link: FlowchartLink) => this.links.delete(link.GlobalLinkIndex);\r\n    get LinksLength() { return this.links.size};\r\n    public GetLinksCopy(): FlowchartLink[] {\r\n        return Array.from(this.links.values());\r\n    }\r\n\r\n    get LinksKVIt(){return this.links.entries()}\r\n    protected abstract GetLinkpointXOffset(width:number): number;\r\n    protected abstract getIOSpecifics():{inputOrOutput:string, parent:SVGGElement, translateY:number, dx:number};\r\n\r\n    public RefreshLinkPositions() {\r\n        this.links.forEach(l=>{\r\n            l.RefreshPosition();\r\n        });\r\n        \r\n    }\r\n\r\n    constructor(private parent: FlowchartOperator, private caption: string, private type:ConnectorType) {\r\n\r\n        this.index = FlowchartConnector.INDEX++;\r\n        let spec = this.getIOSpecifics();\r\n        let translateY = TRANSLATEY*spec.parent.childElementCount;\r\n        this.element = <SVGGElement>Flowchart.Svg(spec.parent, \"g\", [\"transform\", `translate(0 ${translateY})`], [`operator-${spec.inputOrOutput}`]);\r\n        this.element.setAttribute(\"data-connector-datatype\", ConnectorType[type]);\r\n\r\n        let text =  <SVGTextElement>Flowchart.Svg(this.element, \"text\", [\"dx\",\"\"+spec.dx, \"dy\", \"4\"], [`operator-${spec.inputOrOutput}-caption`]);\r\n        text.textContent=caption;\r\n        this.connectorGroup = <SVGGElement>Flowchart.Svg(this.element, \"g\", []);\r\n        this.connector = <SVGCircleElement>Flowchart.Svg(this.connectorGroup, \"circle\", [\"r\",\"4\"], [`operator-${spec.inputOrOutput}-connector`, ConnectorType[type]]);\r\n        this.snapper= <SVGCircleElement>Flowchart.Svg(this.connectorGroup, \"circle\", [\"r\",\"10\"], [`operator-${spec.inputOrOutput}-snapper`]);\r\n        \r\n        this.element.onmouseover = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.ColorizeLink(Flowchart._shadeColor(this.parent.Parent.Options.defaultLinkColor, -0.4));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.element.onmouseout = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.UncolorizeLink();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get Parent() { return this.parent; }\r\n    get Caption() { return this.caption; }\r\n    get Type() { return this.type; }\r\n\r\n\r\n    public GetLinkpoint(): Location2D {\r\n        let flowchart = this.Parent.Parent;\r\n        let posrat = flowchart.PositionRatio;\r\n        let flowchartRect = flowchart.Element.getBoundingClientRect();\r\n        let connectorRect = this.connector.getBoundingClientRect();\r\n        var x = (connectorRect.left - flowchartRect.left) / posrat + connectorRect.width/2;\r\n        var y = (connectorRect.top - flowchartRect.top) / posrat + connectorRect.height/2;\r\n        return { x: x, y: y };\r\n    }\r\n}\r\n\r\nexport class FlowchartInputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, type:ConnectorType) {\r\n        super(parent, caption, type);\r\n        \r\n        this.connectorGroup.onmouseup = (e) => {\r\n           parent.Parent._notifyInputConnectorMouseup(this, e);\r\n        }\r\n        this.connectorGroup.onmouseenter=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseenter(this, e);\r\n        }\r\n        this.connectorGroup.onmouseleave=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseleave(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return 0;}  \r\n    protected  getIOSpecifics(){return {inputOrOutput:\"input\", parent:this.Parent.InputSvgG, translateY:0, dx:8};}\r\n}\r\nexport class FlowchartOutputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, type:ConnectorType) {\r\n        super(parent, caption, type)\r\n        this.element.onmousedown = (e) => {\r\n            parent.Parent._notifyOutputConnectorMousedown(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return width;}\r\n    protected  getIOSpecifics(){return {inputOrOutput:\"output\", parent:this.Parent.OutputSvgG, translateY:140, dx:-8};}\r\n}\r\n","import { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport { FlowchartInputConnector, FlowchartOutputConnector, ConnectorType } from \"./FlowchartConnector\";\r\nimport * as operatorimpl from \"./FlowchartOperatorImpl\";\r\nimport { Location2D, Utils } from \"./Utils\"\r\n\r\nexport interface SerializeContext {\r\n    typeIndex2globalConnectorIndex2adressOffset: Map<number, Map<number, number>>;\r\n    buffer: DataView;\r\n    bufferOffset: number;\r\n\r\n}\r\n\r\ndeclare const msCrypto: Crypto;\r\n\r\n\r\n\r\nexport class FlowchartExporter {\r\n\r\n    private static getRandomValuesWithMathRandom(bytes: Uint8Array): void {\r\n        const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\r\n        for (let i = 0, r; i < bytes.length; i++) {\r\n            bytes[i] = Math.random() * max;\r\n        }\r\n    }\r\n\r\n\r\n    private static getRandomBytes(length: number): Uint8Array {\r\n        const bytes = new Uint8Array(length);\r\n        if (typeof crypto !== 'undefined') {\r\n            crypto.getRandomValues(bytes);\r\n        } else if (typeof msCrypto !== 'undefined') {\r\n            msCrypto.getRandomValues(bytes);\r\n        } else {\r\n            FlowchartExporter.getRandomValuesWithMathRandom(bytes);\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    public static Export(operators: FlowchartOperator[]) {\r\n        let typeIndex2globalConnectorIndex2adressOffset = new Map<number, Map<number, number>>(); //globalConnectorIndex_Outputs 2 variableAdress\r\n        let typeIndex2maxOffset = new Map<number, number>()\r\n        for (let type in ConnectorType) {\r\n            if (!isNaN(Number(type))) {\r\n                typeIndex2globalConnectorIndex2adressOffset.set(Number(type), new Map<number, number>());\r\n                typeIndex2maxOffset.set(Number(type), 2);\r\n            }\r\n        }\r\n\r\n\r\n        //Iteriere über alle Output-Connectoren aller Operatoren\r\n        //Ein Output, der beschaltet ist, entspricht einer Speicheradresse.\r\n        //Unbeschaltete Outputs schreiben in die Speicheradresse 0. \r\n        //Unbeschaltete Inputs lesen von der Speicheradresse 1\r\n        //Echte Speicheradressen gibt es dann ab Index 2\r\n        //In den Maps stehen die Zuordnung Globaler Connector Index --> Index der Speicheraddresse\r\n        //Außerdem bekannt: Wie viele Speicheradressen von jedem Typ benötigen wir\r\n        for (const operator of operators) {\r\n            for (const outputKV of operator.OutputsKVIt) {\r\n                if (outputKV[1].LinksLength == 0) {\r\n                    //unconnected output -->writes to memory adress zero of the respective data type\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, 0);\r\n                }\r\n                else {\r\n                    //connected output --> create new memory address and set it\r\n                    let index = typeIndex2maxOffset.get(outputKV[1].Type)!;\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, index);\r\n                    index++;\r\n                    typeIndex2maxOffset.set(outputKV[1].Type, index);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        Lege nun die Operatoren in der durch das Array vorgegebenen Struktur in ein Array ab\r\n        */\r\n        let buffer = new ArrayBuffer(Math.pow(2, 16));\r\n        let ctx: SerializeContext = { typeIndex2globalConnectorIndex2adressOffset: typeIndex2globalConnectorIndex2adressOffset, buffer: new DataView(buffer), bufferOffset: 0 };\r\n        //Version of Data Structure\r\n        ctx.buffer.setUint32(ctx.bufferOffset, 0xAFFECAFE, true); //Version 0xAFFECAFE means: Development\r\n        ctx.bufferOffset += 4;\r\n        //GUID\r\n        let guid=FlowchartExporter.getRandomBytes(16)\r\n        guid.forEach((v,i)=>{ctx.buffer.setUint8(ctx.bufferOffset+i, v)}); //guid of the model\r\n        ctx.bufferOffset += 16;\r\n\r\n        for (const operator of operators) {\r\n            operator.SerializeToBinary(ctx);\r\n        }\r\n        let code: String = \"const uint8_t code[] = {\"\r\n        for (let i = 0; i < ctx.bufferOffset; i++) {\r\n            code += \"0x\" + ctx.buffer.getUint8(i).toString(16) + \", \";\r\n        }\r\n        code += \"};\";\r\n        window.alert(code);\r\n        //var file = new Blob([buffer.slice(0,ctx.bufferOffset)], {type: \"application/octet-stream\"});\r\n        //URL.createObjectURL(file)\r\n        return guid;\r\n    }\r\n\r\n}","import { FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nexport class FlowchartLink {\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    private element: SVGPathElement;\r\n    private captionElement: SVGTextElement;\r\n    constructor(private parent: Flowchart, private caption: string, private color: string, private from: FlowchartOutputConnector, private to: FlowchartInputConnector) {\r\n        this.index = FlowchartLink.MAX_INDEX++;\r\n        this.element = <SVGPathElement>Flowchart.Svg(parent.LinkLayer, \"path\", [\"stroke-width\", \"\" + this.parent.Options.linkWidth, \"fill\", \"none\", \"id\", \"LINK\" + this.index]);\r\n        this.RefreshPosition();\r\n        this.UncolorizeLink();\r\n        this.parent.LinkLayer.appendChild(this.element);\r\n        this.captionElement =<SVGTextElement>Flowchart.Svg(parent.LinkLayer, \"text\",[]);\r\n        let captionPath = <SVGTextPathElement>Flowchart.Svg(this.captionElement, \"textPath\",[\"startOffset\", \"50%\",\"text-anchor\", \"middle\"]);\r\n        captionPath.setAttributeNS(Flowchart.XLINKNS, \"href\", '#' + \"LINK\" + this.index);\r\n        captionPath.innerHTML = caption;\r\n        this.element.onclick = (e) => {\r\n            this.parent._notifyLinkClicked(this, e);\r\n        }\r\n    }\r\n    get GlobalLinkIndex() { return this.index; }\r\n    get From() { return this.from; }\r\n    get To() { return this.to; }\r\n    set Color(color: string) { this.color = color; }\r\n\r\n    public RemoveFromDOM() {\r\n        this.element.remove();\r\n        this.captionElement.remove();\r\n    }\r\n\r\n\r\n    public ColorizeLink(color: string) {\r\n        this.element.setAttribute('stroke', color);\r\n        //this.element.setAttribute('fill', color);\r\n        //TODO: colorize the small triangle in the connector\r\n        //linkData.internal.els.fromSmallConnector.css('border-left-color', color);\r\n        //linkData.internal.els.toSmallConnector.css('border-left-color', color);\r\n    }\r\n\r\n    public UncolorizeLink() {\r\n        this.ColorizeLink(this.parent.Options.defaultLinkColor);\r\n    }\r\n\r\n    public RefreshPosition() {\r\n        let fromPosition = this.from.GetLinkpoint();\r\n        let toPosition = this.to.GetLinkpoint();\r\n        let fromX = fromPosition.x;\r\n        let fromY = fromPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let toX = toPosition.x;\r\n        let toY = toPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let distanceFromArrow = this.parent.Options.distanceFromArrow;\r\n        let bezierFromX = (fromX + distanceFromArrow);\r\n        let bezierToX = toX + 1;\r\n        let bezierIntensity = Math.min(100, Math.max(Math.abs(bezierFromX - bezierToX) / 2, Math.abs(fromY - toY)));\r\n        this.element.setAttribute(\"d\", 'M' + bezierFromX + ',' + (fromY) + ' C' + (fromX + distanceFromArrow + bezierIntensity) + ',' + fromY + ' ' + (toX - bezierIntensity) + ',' + toY + ' ' + bezierToX + ',' + toY);\r\n    }\r\n}\r\n","import {ConnectorType, FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport {Utils} from \"./Utils\"\r\nimport { SerializeContext } from \"./FlowchartExporter\";\r\n\r\nexport enum PositionType{\r\n    Default,\r\n    Input,\r\n    Output,\r\n};\r\nexport enum SingletonType{\r\n    Default,\r\n    Singleton,\r\n};\r\nexport class TypeInfo\r\n{\r\n    constructor(public GlobalTypeIndex:number, public Position:PositionType, public Singleton:SingletonType){}\r\n}\r\n\r\nexport abstract class FlowchartOperator {\r\n\r\n    //der Index der Inputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Inputs: FlowchartInputConnector[]=[];\r\n    //der Index der Outputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Outputs: FlowchartOutputConnector[]= [];\r\n\r\n\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    get GlobalOperatorIndex(){return this.index;}\r\n\r\n    private elementSvgG: SVGGElement;\r\n    get ElementSvgG() { return this.elementSvgG; }\r\n    private inputSvgG:SVGGElement;\r\n    get InputSvgG(): SVGGElement { return this.inputSvgG; }\r\n    private outputSvgG:SVGGElement;\r\n    get OutputSvgG(): SVGGElement { return this.outputSvgG;}\r\n    private debugInfoSvgText:SVGTextElement;\r\n\r\n    get TypeInfo(){return this.typeInfo;}\r\n\r\n    private x=0;\r\n    private y=0;\r\n\r\n    private box:SVGRectElement;\r\n\r\n    public ShowAsSelected(state:boolean)\r\n    {\r\n        if(state)\r\n        {\r\n            this.box.classList.add('selected');\r\n        }\r\n        else{\r\n            this.box.classList.remove('selected');\r\n        }\r\n    }\r\n\r\n    public SetDebugInfoText(text:string):void{\r\n        this.debugInfoSvgText.textContent=text;\r\n    }\r\n\r\n    constructor(private parent: Flowchart, private caption: string, private typeInfo: TypeInfo) {\r\n        this.index = FlowchartOperator.MAX_INDEX++;\r\n        this.elementSvgG = <SVGGElement>Flowchart.Svg(parent.OperatorsLayer, \"g\", [], [\"operator\"]);\r\n\r\n        this.elementSvgG.setAttribute('data-operator-index', \"\" + this.index);\r\n        this.box = <SVGRectElement>Flowchart.Svg(this.elementSvgG, \"rect\", [\"width\",\"140\", \"height\", \"100\", \"rx\", \"10\", \"ry\", \"10\"], [\"operator-box\"]);\r\n        let title = <SVGTextElement>Flowchart.Svg(this.elementSvgG,\"text\", [\"x\", \"5\", \"y\", \"21\"],[\"operator-title\"]);\r\n        title.textContent = caption;\r\n        this.inputSvgG= <SVGGElement>Flowchart.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(0 50)\"], [\"operator-inputs\"]);\r\n        this.outputSvgG= <SVGGElement>Flowchart.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(140 50)\"], [\"operator-outputs\"]);\r\n        this.debugInfoSvgText = <SVGTextElement>Flowchart.Svg(this.elementSvgG, \"text\", [\"x\", \"0\", \"y\", \"100\"],[\"operator-debuginfo\"]);\r\n        this.debugInfoSvgText.textContent=\"No debug info\";\r\n\r\n        this.box.onclick = (e) => {\r\n            console.log(\"FlowchartOperator this.box.onclick\");\r\n            parent._notifyOperatorClicked(this, e);\r\n        };\r\n        \r\n        if (this.parent.Options.canUserMoveOperators) {\r\n            title.onmousedown = (e) => {\r\n                this.RegisterDragging(e);\r\n            }\r\n        }\r\n    }\r\n    public RegisterDragging(e:MouseEvent)\r\n    {\r\n        let offsetInOperator = Utils.EventCoordinatesInSVG(e, this.ElementSvgG); //offset innerhalb des Operators\r\n        //Wir benötigen den Offset zwischen der aktuellen Position des Objektes und \r\n        let offsetX= e.clientX-this.x;\r\n        let offsetY = e.clientY-this.y;\r\n\r\n\r\n        document.onmouseup = (e) => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n        };\r\n        document.onmousemove = e => {\r\n            //TODO: neue Position nur setzen, wenn this.element.clientRect innerhalb von parent.clientRectangle ist\r\n            this.MoveTo(e.clientX - offsetX, e.clientY - offsetY);\r\n        };\r\n    }\r\n    get Parent() { return this.parent };\r\n    get Caption() { return this.caption; }\r\n\r\n    get InputsKVIt(){return this.Inputs.entries()}\r\n    get OutputsKVIt(){return this.Outputs.entries()}\r\n    public GetOutputConnectorByIndex=(i:number)=>this.Outputs[i];\r\n    public GetInputConnectorByIndex=(i:number)=>this.Inputs[i];\r\n\r\n    public RemoveFromDOM(): void {\r\n        this.elementSvgG.remove();\r\n    }\r\n\r\n    protected AppendConnectors(inputs: FlowchartInputConnector[], outputs: FlowchartOutputConnector[]) {\r\n        if(this.Inputs.length!=0 || this.Outputs.length !=0) throw new Error(\"AppendConnectors may only be called once!\");\r\n        for (const i of inputs) {\r\n            if (i.Parent != this) continue;\r\n            this.Inputs.push(i);\r\n        }\r\n        for (const o of outputs) {\r\n            if (o.Parent != this) continue;\r\n            this.Outputs.push(o);\r\n        }\r\n        let num = Math.max(this.Inputs.length, this.Outputs.length);\r\n        let height = 50+num*20+10;\r\n        this.box.setAttribute(\"height\", \"\"+height);\r\n        this.debugInfoSvgText.setAttribute(\"y\", \"\"+height);\r\n        //TODO RedrawConnectors; Connectors zeichnen sich nicht im Construktur, sondern erst nach dem Appenden, um die Reihenfolgen in derser Liste und im DOM gleich zu haben\r\n    }\r\n\r\n    public MoveTo(x: number, y: number) {\r\n        let g = this.parent.Options.grid;\r\n        this.x = Math.round(x / g) * g;\r\n        this.y = Math.round(y / g) * g;\r\n        this.elementSvgG.setAttribute(\"transform\", `translate(${this.x} ${this.y})`);\r\n        for (const c of this.Inputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n        for (const c of this.Outputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n    }\r\n\r\n    public PopulateProperyGrid(parent:HTMLTableElement):boolean\r\n    {\r\n        //let tr=Flowchart.Html(parent, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        //Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], \"AKey\");\r\n        //Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], \"AValue\");\r\n        return false;\r\n    }\r\n    \r\n    protected SerializeInputsAndOutputs(ctx:SerializeContext)\r\n    {\r\n        for (const input of this.Inputs) {\r\n            let variableAdress = 0;\r\n            let links = input.GetLinksCopy();\r\n            if(links.length==0){\r\n                variableAdress=1; //because unconnected inputs read from adress 1 (which is \"false\", 0, 0.0, black...)\r\n            }\r\n            else{\r\n                let out = links[0].From;\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(out.Type)!.get(out.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.buffer.setUint32(ctx.bufferOffset, variableAdress, true);\r\n            ctx.bufferOffset+=4;\r\n        }\r\n        for(const output of this.Outputs)\r\n        {\r\n            let variableAdress = 0;\r\n            if(output.LinksLength==0){\r\n                variableAdress=0; //because unconnected outputs write to adress 0 (which is never read!)\r\n            }\r\n            else{\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(output.Type)!.get(output.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.buffer.setUint32(ctx.bufferOffset, variableAdress, true);\r\n            ctx.bufferOffset+=4;\r\n        }\r\n    }\r\n\r\n    public SerializeToBinary(ctx:SerializeContext)\r\n    {\r\n        //serialize Type\r\n        ctx.buffer.setUint32(ctx.bufferOffset, this.TypeInfo.GlobalTypeIndex, true);\r\n        ctx.bufferOffset+=4;\r\n        //Index of instance\r\n        ctx.buffer.setUint32(ctx.bufferOffset, this.GlobalOperatorIndex, true);\r\n        ctx.bufferOffset+=4;\r\n        this.SerializeInputsAndOutputs(ctx);\r\n        this.SerializeFurtherProperties(ctx);\r\n        //ctx.buffer.setUint32(ctx.bufferOffset, 0xAFFECAFE, true);\r\n        //ctx.bufferOffset+=4;\r\n    }\r\n    \r\n    protected SerializeFurtherProperties(mapper:SerializeContext):void{\r\n        return;\r\n    }\r\n}\r\n","import {FlowchartOperator, TypeInfo, PositionType, SingletonType} from \"./FlowchartOperator\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport {FlowchartInputConnector, FlowchartOutputConnector, ConnectorType} from \"./FlowchartConnector\";\r\nimport { SerializeContext } from \"./FlowchartExporter\";\r\n\r\nconst ANDOperator_TypeIndex = 1;\r\n\r\n\r\nexport class ANDOperator extends FlowchartOperator {\r\n  \r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(1, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class OROperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(2, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class ADDOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(3, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MULTOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(4, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MAXOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(5, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MINOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(6, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class RSOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(7, PositionType.Default, SingletonType.Default));\r\n        let R = new FlowchartInputConnector(this, \"R\", ConnectorType.BOOLEAN);\r\n        let S = new FlowchartInputConnector(this, \"S\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([R, S], [C]);\r\n    }\r\n}\r\n\r\nexport class NotOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(8, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A], [C]);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class GreenButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(9, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class EncoderButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(10, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RedButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(11, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class MoveSensorOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(12, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"Movement\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class TempSensorOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(13, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"Temperatur\", ConnectorType.FLOAT);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RelayOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(14, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"Relay\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RedLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(15, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class YellowLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(16, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class GreenLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(17, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class ConstTRUEOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(18, PositionType.Input, SingletonType.Default));\r\n        let O = new FlowchartOutputConnector(this, \"TRUE\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class ConstINTOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(19, PositionType.Input, SingletonType.Default));\r\n        let O = new FlowchartOutputConnector(this, \"Out\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n\r\n    public PopulateProperyGrid(parent:HTMLTableElement):boolean\r\n    {\r\n        PropertyGridHelpers.Number(parent, \"Constant\", -32768, 32767);\r\n        return true;\r\n    }\r\n}\r\n\r\nclass PropertyGridHelpers\r\n{\r\n    public static Number(table:HTMLTableElement, key:string, min:number, max:number)\r\n    {\r\n        let tr=Flowchart.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], key);\r\n        let inputContainer = Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"]);\r\n        Flowchart.Html(inputContainer, \"input\", [\"type\", \"number\", \"min\", \"\"+Math.round(min), \"max\", \"\"+Math.round(max)])\r\n    }\r\n}\r\n","//https://en.wikipedia.org/wiki/Topological_sorting\r\n\r\n\r\nenum MarkerState\r\n{\r\n    NONE,\r\n    TEMPORARY,\r\n    PERMANENT,\r\n}\r\n\r\nexport class  NodeWrapper<N> {\r\n    constructor(private payload:N) {\r\n        this.Mark=MarkerState.NONE;\r\n        this.DependendNodes=[];\r\n    }\r\n    public Mark:MarkerState\r\n    public DependendNodes:NodeWrapper<N>[];\r\n    get Payload() {return this.payload;}\r\n};\r\n\r\nexport class TopologicalSortDFS<N>{\r\n    private L:Array<NodeWrapper<N>>;\r\n    constructor()\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n    }\r\n\r\n    public sort(headNode:Array<NodeWrapper<N>>)\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n        headNode.forEach((n)=>this.visit(n));\r\n        return this.L;\r\n    }\r\n\r\n    private visit(n:NodeWrapper<N>){\r\n        if(n.Mark==MarkerState.PERMANENT) return;\r\n        if(n.Mark==MarkerState.TEMPORARY) throw new Error(\"not a DAG\");\r\n        n.Mark=MarkerState.TEMPORARY;\r\n        for (const d of n.DependendNodes) {\r\n            this.visit(d);\r\n        }\r\n        n.Mark=MarkerState.PERMANENT;\r\n        this.L.push(n);\r\n    }\r\n}","export class Utils\r\n{\r\n    public static EventCoordinatesInSVG(evt:MouseEvent, element:Element, positionRatio:number=1):Location2D {\r\n        let rect = element.getBoundingClientRect();\r\n        return {x: (evt.clientX - rect.left)/positionRatio, y:(evt.clientY - rect.top)/positionRatio}\r\n    }\r\n}\r\n\r\nexport interface Location2D {\r\n    x: number;\r\n    y: number;\r\n}"],"file":"bundle-min.js"}