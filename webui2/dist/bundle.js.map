{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/App.ts","src/Flowchart.ts","src/FlowchartConnector.ts","src/FlowchartExporter.ts","src/FlowchartLink.ts","src/FlowchartOperator.ts","src/FlowchartOperatorImpl.ts","src/TopologicalSorfDFS.ts","src/Utils.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\r\nimport {Flowchart, FlowchartData, FlowchartOptions} from \"./Flowchart\";\r\ndeclare let Chartist: any;\r\n\r\nexport abstract class ScreenController {\r\n    private state:ControllerState;\r\n    constructor(protected div: HTMLDivElement) {\r\n        this.hideDIV();\r\n        this.state=ControllerState.CREATED;\r\n    }\r\n    get ElementId() { return this.div.id; }\r\n    get State(){return this.state;}\r\n    set State(value:ControllerState){this.state=value;}\r\n    abstract onCreate():void;\r\n    abstract onFirstStart():void;\r\n    abstract onRestart():void;\r\n    abstract onStop():void;\r\n    public showDIV() {\r\n        this.div.style.display = \"block\";\r\n    }\r\n    public hideDIV() {\r\n        this.div.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport class DevelopCFCController extends ScreenController {\r\n    private fc:Flowchart;\r\n    onFirstStart(): void {\r\n       this.fc.onFirstStart();\r\n    }\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    public onCreate() {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n        let data: FlowchartData = {\r\n            operators: [\r\n                {\r\n                    caption: \"RedButton_1\",\r\n                    type: \"RedButton\",\r\n                    id: \"RedButton_1\",\r\n                    posX: 10,\r\n                    posY: 10,\r\n                },\r\n                {\r\n                    caption: \"GreenButton_1\",\r\n                    type: \"GreenButton\",\r\n                    id: \"GreenButton_1\",\r\n                    posX: 10,\r\n                    posY: 150,\r\n                },\r\n                {\r\n                    caption: \"AND_1\",\r\n                    type: \"AND\",\r\n                    id: \"AND_1\",\r\n                    posX: 250,\r\n                    posY: 10,\r\n                },\r\n                {\r\n                    caption: \"RedLed_1\",\r\n                    type: \"RedLed\",\r\n                    id: \"RedLed_1\",\r\n                    posX: 500,\r\n                    posY: 10,\r\n                },\r\n               \r\n            ],\r\n            links: [\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"RedButton_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"AND_1\",\r\n                    toInput: 0\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"GreenButton_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"AND_1\",\r\n                    toInput: 1\r\n                },\r\n                {\r\n                    color: \"black\",\r\n                    fromId: \"AND_1\",\r\n                    fromOutput: 0,\r\n                    toId: \"RedLed_1\",\r\n                    toInput: 0\r\n                },\r\n            ]\r\n        };\r\n        let options = new FlowchartOptions();\r\n        options.data = data;\r\n        this.fc = new Flowchart(this.div, options);\r\n    }\r\n    \r\n\r\n}\r\n\r\nclass DashboardController extends ScreenController {\r\n    public onFirstStart(): void {}\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    public onCreate() {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n    }\r\n\r\n}\r\n\r\ninterface ChartistData\r\n{\r\n    labels:string[];\r\n    series:number[][];\r\n    low:number;\r\n    high:number;\r\n}\r\n\r\nclass ReportsController extends ScreenController {\r\n    public onFirstStart(): void {}\r\n    public onRestart(): void {}\r\n    public onStop(): void {}\r\n    constructor(public div: HTMLDivElement) {\r\n        super(div);\r\n    }\r\n    public onCreate() {\r\n        return;\r\n        let data:ChartistData = {\r\n            // A labels array that can contain any sort of values\r\n            labels: [],\r\n            // Our series array that contains series objects or in this case series data arrays\r\n            series: [[]],\r\n            low: 0,\r\n            high: 40\r\n        };\r\n        let options = {\r\n            width: 600,\r\n            height: 400\r\n        };\r\n        let currVal = 20;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            data.labels.push(\"\"+ (10 - i));\r\n            data.series[0][i] = currVal;\r\n        }\r\n        // Create a new line chart object where as first parameter we pass in a selector\r\n        // that is resolving to our chart container element. The Second parameter\r\n        // is the actual data object.\r\n        let chart = new Chartist.Line('.ct-chart', data, options);\r\n        let timer = window.setInterval(() => {\r\n            let foo = data.series[0].slice(1);\r\n            foo.push(20 + 3 * Math.random())\r\n            data.series[0] = foo;\r\n            chart.update(data, options, false);\r\n\r\n        }, 500);\r\n        window.setTimeout(() => { window.clearInterval(timer) }, 10000);\r\n    }\r\n}\r\n\r\nenum ControllerState{\r\n    CREATED,\r\n    STARTED,\r\n    STOPPED,\r\n}\r\n\r\nclass AppController {\r\n\r\n    private stateDiv: HTMLDivElement;\r\n    private activeControllerIndex:number;\r\n    private screenControllers:ScreenController[];\r\n\r\n    \r\n\r\n    constructor() {\r\n        this.stateDiv = <HTMLDivElement>document.getElementById(\"spnConnectionState\")!;\r\n        this.screenControllers=[];\r\n        this.activeControllerIndex=0;\r\n    }\r\n\r\n    private SetApplicationState(state: string) {\r\n        this.stateDiv.innerHTML = state;\r\n\r\n    }\r\n\r\n    private setActiveScreen(newIndex:number)\r\n    {\r\n        this.screenControllers.forEach((controller,i)=>{\r\n            if(i==newIndex)\r\n            {\r\n                controller.showDIV();\r\n                if(controller.State==ControllerState.CREATED){\r\n                    controller.onFirstStart();\r\n                    controller.State=ControllerState.STARTED;\r\n                }\r\n                else{\r\n                    controller.onRestart();\r\n                    controller.State=ControllerState.STARTED;\r\n                }\r\n            }else{\r\n                controller.hideDIV();\r\n                if(controller.State==ControllerState.STARTED)\r\n                {\r\n                    controller.onStop();\r\n                    controller.State=ControllerState.STOPPED;\r\n                }\r\n            }\r\n        });\r\n        this.activeControllerIndex=newIndex;\r\n    }\r\n\r\n    public startup() {\r\n        this.screenControllers.push(new DashboardController(<HTMLDivElement>document.getElementById(\"screen_dashboard\")));\r\n        this.screenControllers.push(new DevelopCFCController(<HTMLDivElement>document.getElementById(\"screen_develop\")));\r\n        this.screenControllers.push(new ReportsController(<HTMLDivElement>document.getElementById(\"screen_reports\")));\r\n        this.screenControllers.forEach((sc)=>sc.onCreate());\r\n        \r\n        this.setActiveScreen(0);\r\n        let id2index = new Map<string, number>();\r\n        this.screenControllers.forEach((value, index)=>{id2index.set(\"show_\"+value.ElementId, index)})\r\n        document.querySelectorAll<HTMLAnchorElement>(\"nav a\").forEach((a: HTMLAnchorElement) => {\r\n            let id = a.id;\r\n            let index=id2index.get(a.id)||0;\r\n            a.onclick = (e) => this.setActiveScreen(index);\r\n        });\r\n\r\n\r\n        this.SetApplicationState(\"WebSocket is not connected\");\r\n        let websocket = new WebSocket('ws://' + location.hostname + '/w');\r\n        \r\n\r\n\r\n        websocket.onopen = e => {\r\n            this.SetApplicationState('WebSocket connection opened');\r\n            document.getElementById(\"test\")!.innerHTML = \"WebSocket is connected!\";\r\n        }\r\n\r\n        websocket.onmessage = (evt) => {\r\n            var msg = evt.data;\r\n            let value: string;\r\n            switch (msg.charAt(0)) {\r\n                case 'L':\r\n                    console.log(msg);\r\n                    value = msg.replace(/[^0-9\\.]/g, '');\r\n                    switch (value) {\r\n                        case \"0\": document.getElementById(\"led1\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"1\": document.getElementById(\"led1\")!.style.backgroundColor = \"green\"; break;\r\n                        case \"2\": document.getElementById(\"led2\")!.style.backgroundColor = \"black\"; break;\r\n                        case \"3\": document.getElementById(\"led2\")!.style.backgroundColor = \"green\"; break;\r\n                    }\r\n                    console.log(\"Led = \" + value);\r\n                    break;\r\n                default:\r\n                    let p = JSON.parse(evt.data);\r\n                    document.getElementById(\"td_myName\")!.innerText = p.d.myName;\r\n                    document.getElementById(\"td_temperature\")!.innerText = p.d.temperature;\r\n                    document.getElementById(\"td_humidity\")!.innerText = p.d.humidity;\r\n                    document.getElementById(\"td_heap\")!.innerText = p.info.heap;\r\n                    document.getElementById(\"td_time\")!.innerText = p.info.time;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        websocket.onclose = (e) => {\r\n            console.log('Websocket connection closed due to '+e.reason);\r\n            this.SetApplicationState('Websocket connection closed due to '+e.reason);\r\n        }\r\n\r\n        websocket.onerror = (evt) => {\r\n            console.log('Websocket error: ' + evt.returnValue);\r\n            this.SetApplicationState(\"WebSocket error!\" + evt.returnValue);\r\n        }\r\n\r\n        document.querySelectorAll<HTMLButtonElement>(\"#pButtons button\").forEach((b: HTMLButtonElement) => {\r\n            b.onclick = (e: MouseEvent) => {\r\n                websocket.send(\"L\" + b.dataset.rel);\r\n            };\r\n        });\r\n\r\n    }\r\n}\r\n\r\nlet app: AppController;\r\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\r\n    app = new AppController();\r\n    app.startup();\r\n});\r\n\r\n\r\n","import { ConnectorType, FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { FlowchartExporter } from \"./FlowchartExporter\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport { FlowchartOperator, PositionType, TypeInfo } from \"./FlowchartOperator\";\r\nimport * as operatorimpl from \"./FlowchartOperatorImpl\";\r\nimport { NodeWrapper, TopologicalSortDFS } from \"./TopologicalSorfDFS\";\r\nimport { Utils } from \"./Utils\";\r\n/*\r\nIn einem Ressources-Toolbar befinden sich alle Ressourcen (Input und Output), die ein Board anbietet. Diese können genau einmal auf das Board gezogen werden\r\nProblem: OneWire-Ressourcen!: \r\nOperator-Klassen haben ein Positionstyp: Default, Input, Output\r\nOperator-Klassen haben einen Singleton-Typ, nämlich Default, Singleton. Bei Singletons darf nur eine Instanz der KLasse erzeugt werden\r\nOperator-Instanzen können per Propery-Grid konfiguriert werden. Sie stellen eine Methode PopulateProperyGrid(HMTLDivElement) zur Verfügung, das ein editerbares HTML-Grid ins DIV hineinzeichnen. Außerhalb wurde dieses div zuvor geleert und im Anschluss wird von außerhalb ein Save-Button gerendert.\r\n  Ein null-Rückgabewert bedeutet, dass kein PropertyGrid benötigt wird.\r\n  Sie stellen weiterhin eine Methode SaveProperyGrid(HMTLDivElement) zur Verfügung, in der sie die Inhalte wieder einlesen und intern wie auch immer speichern\r\n  Sie stellen weiterhin eine Methode GetPropertyGridDataAsJSONString() zur Verfügung. Diese gibt die Daten als JSON-String zurück\r\n\r\n*/\r\n\r\nexport class FlowchartOptions {\r\n    canUserEditLinks: boolean = true;\r\n    canUserMoveOperators: boolean = true;\r\n    data?: FlowchartData = undefined;\r\n    distanceFromArrow: number = 3;\r\n    defaultOperatorClass: string = 'flowchart-default-operator';\r\n    defaultLinkColor: string = '#3366ff';\r\n    defaultSelectedLinkColor: string = 'black';\r\n    linkWidth: number = 10;\r\n    grid: number = 10;\r\n    multipleLinksOnOutput: boolean = true;\r\n    multipleLinksOnInput: boolean = false;\r\n    linkVerticalDecal: number = 0;\r\n    onOperatorSelect?: (operatorId: string)=>boolean ;\r\n    onOperatorUnselect?: () => boolean;\r\n    onOperatorMouseOver?: (operatorId: string) => boolean;\r\n    onOperatorMouseOut?: (operatorId: string) => boolean;\r\n    onLinkSelect?: (link: FlowchartLink) => boolean;\r\n    onLinkUnselect?: (link: FlowchartLink) => boolean;\r\n    onOperatorCreate?: (operatorId: string, operatorData: any, fullElement: boolean) => boolean;\r\n    onLinkCreate?: (linkId: string, linkData: any) => boolean;\r\n    onOperatorDelete?: (operatorId: string) => boolean;\r\n    onLinkDelete?: (linkId: string, forced: boolean) => boolean;\r\n    onOperatorMoved?: (operatorId: string, position: number) => void;\r\n    onAfterChange?: (changeType: any) => void;\r\n}\r\n\r\n    export interface FlowchartData {\r\n        operators: OperatorData[];\r\n        links: LinkData[];\r\n    }\r\n\r\n    export interface OperatorData {\r\n        type: string;\r\n        caption: string;\r\n        id: string;\r\n        posX: number;\r\n        posY: number;\r\n    }\r\n\r\n    export interface LinkData {\r\n        color: string;\r\n        fromId: string;\r\n        fromOutput: number;\r\n        toId: string;\r\n        toInput: number;\r\n    }\r\n\r\n    //Connector besteht aus \"wrapper\", dem Label, dem großen dreieck und einem kleinen Dreieck\r\n\r\n    export class Flowchart {\r\n        private operators = new Map<number, FlowchartOperator>();\r\n        private links = new Map<number, FlowchartLink>();\r\n        public static readonly SVGNS = \"http://www.w3.org/2000/svg\";\r\n        public static readonly XLINKNS = \"http://www.w3.org/1999/xlink\";\r\n        public static readonly HTMLNS = \"http://www.w3.org/1999/xhtml\";\r\n        public static readonly DATATYPE2COLOR = new Map([[ConnectorType.BOOLEAN, \"RED\"], [ConnectorType.COLOR, \"GREEN\"], [ConnectorType.FLOAT, \"BLUE\"], [ConnectorType.INTEGER, \"YELLOW\"], [ConnectorType.COLOR, \"PURPLE\"]]);\r\n\r\n  \r\n        private lastOutputConnectorClicked: FlowchartOutputConnector|null=null;\r\n        private selectedOperator: FlowchartOperator|null=null;\r\n        private selectedLink: FlowchartLink|null=null;\r\n        get SelectedLink() { return this.selectedLink };\r\n        \r\n        private positionRatio: number = 1;\r\n        get PositionRatio() { return this.positionRatio; }\r\n        \r\n        private flowchartContainerSvgSvg:SVGSVGElement\r\n        private linksLayer: SVGGElement;\r\n        get LinkLayer() { return this.linksLayer; }\r\n        private operatorsLayer: SVGGElement;\r\n        get OperatorsLayer() { return this.operatorsLayer; }\r\n        private toolsLayer:SVGGElement;\r\n        get ToolsLayer() { return this.toolsLayer; }\r\n        private tempLayer:SVGGElement;\r\n        private temporaryLink: SVGLineElement;\r\n        private temporaryLinkSnapped=false;\r\n        private propertyGridHtmlDiv:HTMLDivElement;\r\n\r\n        private markerArrow:SVGPathElement;\r\n        private markerCircle:SVGCircleElement;\r\n\r\n        private upcounter=0;\r\n\r\n        public _notifyGlobalMousemoveWithLink(e:MouseEvent)\r\n        {\r\n            if (this.lastOutputConnectorClicked != null && !this.temporaryLinkSnapped) {\r\n                let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n                this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n                this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n            }\r\n        }\r\n\r\n        public _notifyGlobalMouseupWithLink(e:MouseEvent)\r\n        {\r\n            this.unsetTemporaryLink();\r\n        }\r\n\r\n        \r\n\r\n        public _notifyOutputConnectorMousedown(c: FlowchartOutputConnector, e: MouseEvent) {\r\n            this.temporaryLinkSnapped=false;\r\n            let start = c.GetLinkpoint();\r\n            let end = Utils.EventCoordinatesInSVG(e, this.flowchartContainerSvgSvg, this.positionRatio);\r\n            this.temporaryLink.setAttribute('x1', \"\"+start.x);\r\n            this.temporaryLink.setAttribute('y1', \"\"+start.y);\r\n            this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n            this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n            this.setTemporaryLink(c);\r\n            document.onmouseup = (e) => {\r\n                document.onmouseup = null;\r\n                document.onmousemove = null;\r\n                this._notifyGlobalMouseupWithLink(e);\r\n            };\r\n            document.onmousemove = (e) => {\r\n                this._notifyGlobalMousemoveWithLink(e);\r\n            };\r\n        }\r\n\r\n        public _notifyInputConnectorMouseup(c: FlowchartInputConnector, e:MouseEvent) {\r\n            if (this.lastOutputConnectorClicked == null) return;\r\n            if(!this.options.multipleLinksOnInput && c.LinksLength>0) return;\r\n            if(this.lastOutputConnectorClicked.Type==c.Type)\r\n            {\r\n                this.createLink(null, this.lastOutputConnectorClicked, c);\r\n            }\r\n            this.unsetTemporaryLink();\r\n\r\n        }\r\n\r\n        public _notifyOperatorClicked(o: FlowchartOperator, e: MouseEvent) {\r\n            this.SelectOperator(o);\r\n        }\r\n\r\n        public _notifyLinkClicked(link: FlowchartLink, e: MouseEvent) {\r\n            this.selectLink(link);\r\n        }\r\n\r\n        public _notifyInputConnectorMouseenter(c:FlowchartInputConnector, e:MouseEvent){\r\n            if (this.lastOutputConnectorClicked == null || this.lastOutputConnectorClicked.Type!=c.Type) return;\r\n            if(!this.options.multipleLinksOnInput && c.LinksLength>0) return;\r\n\r\n            this.temporaryLinkSnapped=true;\r\n            let end= c.GetLinkpoint();\r\n            this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-circle)\");\r\n            this.temporaryLink.setAttribute('x2', \"\"+end.x);\r\n            this.temporaryLink.setAttribute('y2', \"\"+end.y);\r\n        }\r\n\r\n        public _notifyInputConnectorMouseleave(c:FlowchartInputConnector, e:MouseEvent){\r\n            this.temporaryLinkSnapped=false;\r\n            this.temporaryLink.setAttribute(\"marker-end\", \"url(#marker-arrow)\");\r\n        }\r\n\r\n        public unselectLink() {\r\n            if (this.selectedLink != null) {\r\n                if (this.options.onLinkUnselect && !this.options.onLinkUnselect(this.selectedLink)) {\r\n                    return;\r\n                }\r\n                this.selectedLink.UncolorizeLink();\r\n                this.selectedLink = null;\r\n            }\r\n        }\r\n\r\n        public selectLink(link: FlowchartLink) {\r\n            this.unselectLink();\r\n            if (this.options.onLinkSelect && !this.options.onLinkSelect(link)) {\r\n                return;\r\n            }\r\n            this.unselectOperator();\r\n            this.selectedLink = link;\r\n            link.ColorizeLink(this.options.defaultSelectedLinkColor);\r\n        }\r\n\r\n        private compile():void{\r\n            let index2wrappedOperator = new Map<number,NodeWrapper<FlowchartOperator>>();\r\n            this.operators.forEach((v,k,m)=>{\r\n                index2wrappedOperator.set(v.GlobalOperatorIndex, new NodeWrapper<FlowchartOperator>(v));\r\n            });\r\n            \r\n              \r\n            let wrappedOutputOperators:NodeWrapper<FlowchartOperator>[] =[];\r\n            for(let i of index2wrappedOperator.values()){\r\n                //Stelle für jede \"gewrapte Node\" fest, welche Operatoren von Ihr abhängig sind\r\n                let dependents = new Set<NodeWrapper<FlowchartOperator>>();\r\n                for (const inputkv of i.Payload.InputsKVIt) {\r\n                    for(const linkkv of inputkv[1].LinksKVIt)\r\n                    {\r\n                        let dependentOperator = linkkv[1].From.Parent;\r\n                        let dependentWrappedNode = index2wrappedOperator.get(dependentOperator.GlobalOperatorIndex);\r\n                        if(!dependentWrappedNode) \r\n                            throw new Error(\"Implementation Error: dependentWrappedNode is undefined\");\r\n                        dependents.add(dependentWrappedNode);\r\n                    }\r\n                }\r\n                dependents.forEach(e=>i.DependendNodes.push(e));\r\n                //füge alle mit Typ \"Output\" einer Liste hinzu\r\n                if(i.Payload.TypeInfo.Position==PositionType.Output) wrappedOutputOperators.push(i);\r\n            }\r\n            \r\n            let algorithm = new TopologicalSortDFS<FlowchartOperator>();\r\n            let sortedList = algorithm.sort(wrappedOutputOperators);\r\n            for (const key in sortedList) {\r\n                let value = sortedList[key];\r\n                value.Payload.SetDebugInfoText(\"Sequenznummer \"+key);\r\n            }\r\n            FlowchartExporter.Export(sortedList.map((e)=>e.Payload));\r\n        }\r\n\r\n        private deleteSelectedOperator():void{\r\n            if(!this.selectedOperator) return;\r\n            this.selectedOperator.RemoveFromDOM();\r\n            this.operators.delete(this.selectedOperator.GlobalOperatorIndex);\r\n            for (const outputKV of this.selectedOperator.OutputsKVIt) {\r\n                for (const linkKV of outputKV[1].LinksKVIt) {\r\n                    this.DeleteLink(linkKV[1].GlobalLinkIndex);\r\n                }\r\n            }\r\n            this.unselectOperator();\r\n        }\r\n\r\n        constructor(private container: HTMLDivElement, private options: FlowchartOptions) {\r\n            if(!this.container)\r\n            {\r\n                throw new Error(\"container is null\");\r\n            }\r\n            let subcontainer = <HTMLDivElement>Flowchart.Html(this.container, \"div\", [], [\"develop-ui\"]);\r\n            \r\n            subcontainer.onclick=(e)=>\r\n            {\r\n                if((<HTMLElement>e.target).classList.contains(\"dropbtn\")) return;\r\n                Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem:HTMLDivElement)=>{elem.classList.remove(\"show\");});\r\n            }\r\n\r\n            let toolbar = Flowchart.Html(subcontainer, \"div\", [], [\"develop-toolbar\"]);\r\n            let filebutton = Flowchart.Html(toolbar, \"a\", [\"href\", \"#\"], [\"develop-toolbar\"], \"File\");\r\n            let runbutton = Flowchart.Html(toolbar, \"a\", [\"href\", \"#\"], [\"develop-toolbar\"], \"Run\");\r\n            let menuDebug= Flowchart.Html(toolbar, \"div\", [], [\"dropdown\"]);\r\n            let menuDebugDropBtn = <HTMLButtonElement>Flowchart.Html(menuDebug, \"button\", [], [\"dropbtn\"], \"Debug ▼\");\r\n            \r\n            let menuDebugDropContent = Flowchart.Html(menuDebug, \"div\", [], [\"dropdown-content\"]);\r\n            menuDebugDropBtn.onclick=(e)=>{\r\n                menuDebugDropContent.classList.toggle(\"show\");\r\n            };\r\n            Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"☭ Compile\").onclick=(e)=>\r\n            {\r\n                Array.prototype.forEach.call(document.getElementsByClassName(\"dropdown-content\"), (elem:HTMLDivElement)=>{elem.classList.remove(\"show\");});\r\n                this.compile();\r\n            }\r\n            Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"👣 Run on device\").onclick=(e)=>\r\n            {\r\n\r\n            }\r\n            let menuDebugLink2 = Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◉ Stop\");\r\n            let menuDebugLink3 = Flowchart.Html(menuDebugDropContent, \"a\", [\"href\", \"#\"], [], \"◯ Erase\");\r\n            \r\n            \r\n            let workspace = <HTMLDivElement>Flowchart.Html(subcontainer, \"div\", [\"tabindex\", \"0\"], [\"develop-workspace\"]);//tabindex, damit keypress-Events abgefangen werden können\r\n            this.propertyGridHtmlDiv = <HTMLDivElement>Flowchart.Html(subcontainer, \"div\", [], [\"develop-properties\"]);\r\n\r\n            \r\n\r\n            this.flowchartContainerSvgSvg = <SVGSVGElement>Flowchart.Svg(workspace, \"svg\", [\"width\", \"100%\", \"height\", \"100%\"], [\"flowchart-container\"]);\r\n            \r\n            \r\n            this.linksLayer = <SVGGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-links-layer\"]);\r\n            this.operatorsLayer=<SVGGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-operators-layer\", \"unselectable\"]);\r\n            this.tempLayer = <SVGSVGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-temporary-link-layer\"]);\r\n            this.tempLayer.style.visibility=\"hidden\";//visible\r\n            let defs = Flowchart.Svg(this.tempLayer, \"defs\", []);\r\n            let markerArrow = Flowchart.Svg(defs, \"marker\", [\"id\", \"marker-arrow\",\"markerWidth\",\"4\", \"markerHeight\", \"4\", \"refX\", \"1\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n            this.markerArrow=<SVGPathElement>Flowchart.Svg(markerArrow, \"path\", [\"d\", \"M0,0 L0,4 L2,2 z\", \"fill\", \"red\", \"stroke\", \"black\", \"stroke-width\", \"0.5\"]);\r\n            let markerCircle = Flowchart.Svg(defs, \"marker\", [\"id\", \"marker-circle\",\"markerWidth\",\"4\", \"markerHeight\", \"4\", \"refX\", \"2\", \"refY\", \"2\", \"orient\", \"0\"]);\r\n            this.markerCircle=<SVGCircleElement>Flowchart.Svg(markerCircle, \"circle\", [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\", \"fill\", \"red\", \"stroke-width\", \"1px\",\"stroke\", \"black\"]);\r\n            this.temporaryLink = <SVGLineElement>Flowchart.Svg(this.tempLayer, \"line\", [\"x1\", \"0\",\"y1\", \"0\",\"x2\", \"0\",\"y2\", \"0\",\"stroke-dasharray\", \"6,6\",\"stroke-width\", \"4\",\"stroke\", \"black\",\"fill\", \"none\", \"marker-end\", \"url(#marker-arrow)\"]);\r\n            \r\n            let toolsActivator = <SVGRectElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"rect\", [\"width\",\"40\", \"height\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"0\"]);\r\n\r\n            this.toolsLayer  = <SVGSVGElement>Flowchart.Svg(this.flowchartContainerSvgSvg, \"g\", [], [\"flowchart-tools-layer\", \"unselectable\"]);\r\n            this.toolsLayer.style.display=\"none\";//visible\r\n            \r\n            let toolsRect= <SVGRectElement>Flowchart.Svg(this.toolsLayer, \"rect\", [\"width\",\"140\", \"height\", \"100%\", \"rx\", \"10\", \"ry\", \"10\"], [\"tools-container\"]);\r\n            \r\n            //The onmousemove event occurs every time the mouse pointer is moved over the div element.\r\n            //The mouseenter event only occurs when the mouse pointer enters the div element.\r\n            //The onmouseover event occurs when the mouse pointer enters the div element, and its child elements (p and span).\r\n\r\n            //The mouseout event triggers when the mouse pointer leaves any child elements as well the selected element.\r\n            //The mouseleave event is only triggered when the mouse pointer leaves the selected element.\r\n            toolsActivator.onmouseenter= (e)=>\r\n            {\r\n                this.toolsLayer.style.display=\"initial\";\r\n            }\r\n            this.toolsLayer.onmouseleave = (e)=>\r\n            {\r\n                this.toolsLayer.style.display=\"none\";\r\n            }\r\n\r\n            this.flowchartContainerSvgSvg.onclick = (e) => {\r\n                if (e.target == this.Element)//if the click is in a \"free\" area, then the target is the uppermost layer; the linkLayer!\r\n                {\r\n                    this.unselectOperator();\r\n                    this.unselectLink();\r\n                }\r\n            }\r\n            this.flowchartContainerSvgSvg.onmouseup=(e)=>\r\n            {\r\n                console.log(\"Flowchart this.element.onmouseup with e.target=\"+e.target);\r\n            }\r\n\r\n            workspace.onkeyup=(e)=>\r\n            {\r\n                if(e.key==\"Delete\")\r\n                {\r\n                    console.log(\"Flowchart workspace.onkeyup with e.target=\"+e.target+\" und Delete-Key\");\r\n                    this.deleteSelectedOperator();\r\n                }\r\n                else{\r\n                    console.log(\"Flowchart workspace.onkeyup with e.target=\"+e.target+\" und key \"+e.key);\r\n                }\r\n            }\r\n\r\n            this.populateToolsLayer();\r\n\r\n        }\r\n        get Options() { return this.options; }\r\n        get Element(){return this.flowchartContainerSvgSvg;}\r\n\r\n        public onFirstStart()\r\n        {\r\n            if (typeof this.options.data !== undefined && this.options.data!=null) {\r\n                this.setData(this.options.data);\r\n            }\r\n        }\r\n\r\n        private populateToolsLayer()\r\n        {\r\n            let y=10;\r\n            for(let clazz in operatorimpl)\r\n            {\r\n                if((<any>operatorimpl)[clazz].GetTypeInfo){\r\n                    let info:TypeInfo = (<any>operatorimpl)[clazz].GetTypeInfo();\r\n                    //if(info.Position!=PositionType.Default || info.Singleton!=SingletonType.Default) continue;\r\n                }\r\n                let toolGroup = <SVGGElement>Flowchart.Svg(this.toolsLayer, \"g\", [\"transform\", `translate(5 ${y})`]);\r\n                let box = <SVGRectElement>Flowchart.Svg(toolGroup, \"rect\", [\"width\",\"130\", \"height\", \"30\", \"rx\", \"10\", \"ry\", \"10\"], [\"tool-box\"]);\r\n                let title = Flowchart.Svg(toolGroup,\"text\", [\"x\", \"5\", \"y\", \"25\"],[\"tool-caption\"]);\r\n            \r\n                toolGroup.onmousedown=(e)=>\r\n                {\r\n                    \r\n                    let cnt = this.upcounter;\r\n                    let name = clazz.substring(0, clazz.length-\"Operator\".length)+\"_\"+this.upcounter\r\n                    if (this.options.onOperatorCreate && !this.options.onOperatorCreate(name, null, false)) {\r\n                        return null;\r\n                    }\r\n                    console.log(\"Creating \"+name);\r\n                    this.upcounter++;\r\n                    let o: FlowchartOperator = new (<any>operatorimpl)[clazz](this, name);\r\n                    let coords = Utils.EventCoordinatesInSVG(e, this.Element);\r\n                    o.MoveTo(coords.x-10, coords.y-10);\r\n                    o.RegisterDragging(e);\r\n                    this.operators.set(o.GlobalOperatorIndex, o);\r\n                }\r\n                title.textContent = clazz;\r\n                y+=40;\r\n            }\r\n        }\r\n\r\n        public setData(data: FlowchartData) {\r\n\r\n            this.links.forEach((e)=>e.RemoveFromDOM());\r\n            this.links.clear();\r\n            this.operators.forEach((e)=>e.RemoveFromDOM());\r\n            this.operators.clear();\r\n            let opId2op: { [id: string]: FlowchartOperator } = {};\r\n\r\n            for (const d of data.operators) {\r\n                let o = this.createOperator(d);\r\n                opId2op[d.id] = o;\r\n            }\r\n            for (const d of data.links) {\r\n                let fromOp = opId2op[d.fromId];\r\n                let toOp = opId2op[d.toId];\r\n                if(fromOp==null || toOp==null) continue;\r\n                let fromConn = fromOp.GetOutputConnectorByIndex(d.fromOutput);\r\n                let toConn = toOp.GetInputConnectorByIndex(d.toInput);\r\n                if(fromConn==null || toConn==null) continue;\r\n                this.createLink(d, fromConn, toConn);\r\n            }\r\n        }\r\n        public DeleteLink(globalLinkIndex: number) {\r\n            let l = this.links.get(globalLinkIndex);\r\n            if(l==null)\r\n            {\r\n                throw Error(\"Link to delete is null\")\r\n            }\r\n            l.RemoveFromDOM();\r\n            this.links.delete(globalLinkIndex);\r\n            l.To.RemoveLink(l);\r\n            l.From.RemoveLink(l);\r\n        }\r\n\r\n        public createLink(data: LinkData|null, from: FlowchartOutputConnector, to: FlowchartInputConnector): FlowchartLink|null {\r\n            if (this.options.onLinkCreate && !this.options.onLinkCreate(from.Caption, data)) return null;\r\n            if (!this.options.multipleLinksOnOutput && from.LinksLength > 0) return null;\r\n            if (!this.options.multipleLinksOnInput && to.LinksLength > 0)  return null;\r\n\r\n            let l: FlowchartLink = new FlowchartLink(this, \"\", this.Options.defaultLinkColor, from, to);\r\n            from.AddLink(l);\r\n            to.AddLink(l);\r\n            this.links.set(l.GlobalLinkIndex, l);\r\n            return l;\r\n        }\r\n       \r\n        public createOperator(data: OperatorData): FlowchartOperator {\r\n\r\n            let name = data.type+\"Operator\";\r\n            if (!(<any>operatorimpl)[name]) {\r\n                throw new Error(`Unknown type ${data.type}`);\r\n            }\r\n            if (this.options.onOperatorCreate && !this.options.onOperatorCreate(data.caption, null, false)) {\r\n                throw new Error(`Creation of operator ${data.type} prevented by onOperatorCreate plugin`);\r\n            }\r\n            let o: FlowchartOperator = new (<any>operatorimpl)[name](this, data.caption);\r\n            o.MoveTo(data.posX, data.posY);\r\n            this.operators.set(o.GlobalOperatorIndex,o);\r\n            return o;\r\n        }\r\n\r\n        private unsetTemporaryLink() {\r\n            this.lastOutputConnectorClicked = null;\r\n            this.tempLayer.style.visibility = \"hidden\";\r\n        }\r\n\r\n        private setTemporaryLink(c:FlowchartOutputConnector) {\r\n            this.lastOutputConnectorClicked = c;\r\n            let color = Flowchart.DATATYPE2COLOR.get(c.Type)\r\n            if(!color) color=\"BLACK\";\r\n            this.markerArrow.style.fill=color;\r\n            this.markerCircle.style.fill=color;\r\n            this.tempLayer.style.visibility = \"visible\";\r\n        }\r\n\r\n        private unselectOperator() {\r\n            if (this.options.onOperatorUnselect && !this.options.onOperatorUnselect()) return;\r\n            this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n            if (this.selectedOperator == null) return;\r\n            this.selectedOperator.ShowAsSelected(false);\r\n            this.selectedOperator = null;\r\n        }\r\n\r\n\r\n        public SelectOperator(operator: FlowchartOperator):void {\r\n            if (this.options.onOperatorSelect && !this.options.onOperatorSelect(operator.Caption)) return;\r\n            this.unselectLink();\r\n            if(this.selectedOperator!=null) this.selectedOperator.ShowAsSelected(false);\r\n            operator.ShowAsSelected(true);\r\n            this.selectedOperator = operator;\r\n            this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n            Flowchart.Html(this.propertyGridHtmlDiv, \"p\", [],[\"develop-propertygrid-head\"], `Properties for ${this.selectedOperator.Caption}`);\r\n            let table=<HTMLTableElement>Flowchart.Html(this.propertyGridHtmlDiv, \"table\", [],[\"develop-propertygrid-table\"]);\r\n            let tr=Flowchart.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n            Flowchart.Html(tr, \"th\", [],[\"develop-propertygrid-th\"], \"Key\");\r\n            Flowchart.Html(tr, \"th\", [],[\"develop-propertygrid-th\"], \"Value\");\r\n            if(this.selectedOperator!.PopulateProperyGrid(table))\r\n            {\r\n                Flowchart.Html(this.propertyGridHtmlDiv, \"button\", [],[\"develop-propertygrid-button\"], `Save`);\r\n            }\r\n            else{\r\n                this.propertyGridHtmlDiv.innerText=\"\"; //clear\r\n                Flowchart.Html(this.propertyGridHtmlDiv, \"p\", [],[\"develop-propertygrid-head\"], `No Properties for ${this.selectedOperator.Caption}`);\r\n            } \r\n        }\r\n\r\n        // Found here : http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n        public static _shadeColor(color: string, percent: number) {\r\n            var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\r\n            return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\r\n        }\r\n\r\n        public static Svg(parent: Element, type:string,  attributes:string[], classes?: string[]):SVGElement {\r\n            return <SVGElement>Flowchart.Elem(Flowchart.SVGNS, parent, type, attributes, classes);\r\n        }\r\n\r\n        public static Html(parent: Element, type:string,  attributes:string[], classes?: string[], textContent?:string):HTMLElement {\r\n            return <HTMLElement>Flowchart.Elem(Flowchart.HTMLNS, parent, type, attributes, classes, textContent);\r\n        }\r\n\r\n        private static Elem(ns:string, parent:Element, type:string, attributes:string[], classes?: string[], textContent?:string)\r\n        {\r\n            let element = document.createElementNS(ns, type);\r\n            if(classes)\r\n            {\r\n                for (const clazz of classes) {\r\n                    element.classList.add(clazz);\r\n                }\r\n            }\r\n            let i:number;\r\n            for(i=0;i<attributes.length;i+=2)\r\n            {\r\n                element.setAttribute(attributes[i], attributes[i+1]);\r\n            }\r\n            if(textContent)\r\n            {\r\n                element.textContent=textContent;\r\n            }\r\n            parent.appendChild(element);\r\n            return element;\r\n        }\r\n    }\r\n","import { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport {Location2D} from \"./Utils\"\r\n\r\nconst TRANSLATEY = 20;\r\n\r\nexport enum ConnectorType{\r\n    UNDEFINED =0,\r\n    BOOLEAN=1,\r\n    INTEGER=2,\r\n    FLOAT=3,\r\n    COLOR=4,\r\n}\r\n\r\nexport abstract class FlowchartConnector {\r\n    private static INDEX: number = 0;\r\n    private index: number;\r\n    get GlobalConnectorIndex() { return this.index; }\r\n\r\n    protected element: SVGGElement;\r\n    get Element() { return this.element; }\r\n\r\n    protected snapper:SVGCircleElement;\r\n    protected connector:SVGElement;\r\n    protected connectorGroup:SVGGElement;\r\n\r\n    private links = new Map<number, FlowchartLink>();\r\n    public HasLink = (globalLinkIndex: number) => this.links.has(globalLinkIndex);\r\n    public AddLink = (link: FlowchartLink) => this.links.set(link.GlobalLinkIndex, link);\r\n    public RemoveLink = (link: FlowchartLink) => this.links.delete(link.GlobalLinkIndex);\r\n    get LinksLength() { return this.links.size};\r\n    public GetLinksCopy(): FlowchartLink[] {\r\n        return Array.from(this.links.values());\r\n    }\r\n\r\n    get LinksKVIt(){return this.links.entries()}\r\n    protected abstract GetLinkpointXOffset(width:number): number;\r\n    protected abstract getIOSpecifics():{inputOrOutput:string, parent:SVGGElement, translateY:number, dx:number};\r\n\r\n    public RefreshLinkPositions() {\r\n        this.links.forEach(l=>{\r\n            l.RefreshPosition();\r\n        });\r\n        \r\n    }\r\n\r\n    constructor(private parent: FlowchartOperator, private caption: string, private type:ConnectorType) {\r\n\r\n        this.index = FlowchartConnector.INDEX++;\r\n        let spec = this.getIOSpecifics();\r\n        let translateY = TRANSLATEY*spec.parent.childElementCount;\r\n        this.element = <SVGGElement>Flowchart.Svg(spec.parent, \"g\", [\"transform\", `translate(0 ${translateY})`], [`operator-${spec.inputOrOutput}`]);\r\n        this.element.setAttribute(\"data-connector-datatype\", ConnectorType[type]);\r\n\r\n        let text =  <SVGTextElement>Flowchart.Svg(this.element, \"text\", [\"dx\",\"\"+spec.dx, \"dy\", \"4\"], [`operator-${spec.inputOrOutput}-caption`]);\r\n        text.textContent=caption;\r\n        this.connectorGroup = <SVGGElement>Flowchart.Svg(this.element, \"g\", []);\r\n        this.connector = <SVGCircleElement>Flowchart.Svg(this.connectorGroup, \"circle\", [\"r\",\"4\"], [`operator-${spec.inputOrOutput}-connector`, ConnectorType[type]]);\r\n        this.snapper= <SVGCircleElement>Flowchart.Svg(this.connectorGroup, \"circle\", [\"r\",\"10\"], [`operator-${spec.inputOrOutput}-snapper`]);\r\n        \r\n        this.element.onmouseover = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.ColorizeLink(Flowchart._shadeColor(this.parent.Parent.Options.defaultLinkColor, -0.4));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.element.onmouseout = (e) => {\r\n            for (const link of this.links.values()) {\r\n                if (link && link != this.parent.Parent.SelectedLink) {\r\n                    link.UncolorizeLink();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get Parent() { return this.parent; }\r\n    get Caption() { return this.caption; }\r\n    get Type() { return this.type; }\r\n\r\n\r\n    public GetLinkpoint(): Location2D {\r\n        let flowchart = this.Parent.Parent;\r\n        let posrat = flowchart.PositionRatio;\r\n        let flowchartRect = flowchart.Element.getBoundingClientRect();\r\n        let connectorRect = this.connector.getBoundingClientRect();\r\n        var x = (connectorRect.left - flowchartRect.left) / posrat + connectorRect.width/2;\r\n        var y = (connectorRect.top - flowchartRect.top) / posrat + connectorRect.height/2;\r\n        return { x: x, y: y };\r\n    }\r\n}\r\n\r\nexport class FlowchartInputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, type:ConnectorType) {\r\n        super(parent, caption, type);\r\n        \r\n        this.connectorGroup.onmouseup = (e) => {\r\n           parent.Parent._notifyInputConnectorMouseup(this, e);\r\n        }\r\n        this.connectorGroup.onmouseenter=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseenter(this, e);\r\n        }\r\n        this.connectorGroup.onmouseleave=(e)=>\r\n        {\r\n            parent.Parent._notifyInputConnectorMouseleave(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return 0;}  \r\n    protected  getIOSpecifics(){return {inputOrOutput:\"input\", parent:this.Parent.InputSvgG, translateY:0, dx:8};}\r\n}\r\nexport class FlowchartOutputConnector extends FlowchartConnector {\r\n    constructor (parent: FlowchartOperator, caption: string, type:ConnectorType) {\r\n        super(parent, caption, type)\r\n        this.element.onmousedown = (e) => {\r\n            parent.Parent._notifyOutputConnectorMousedown(this, e);\r\n        }\r\n    }\r\n    protected GetLinkpointXOffset(width:number): number{return width;}\r\n    protected  getIOSpecifics(){return {inputOrOutput:\"output\", parent:this.Parent.OutputSvgG, translateY:140, dx:-8};}\r\n}\r\n","import { FlowchartOperator } from \"./FlowchartOperator\";\r\nimport { FlowchartLink } from \"./FlowchartLink\";\r\nimport { FlowchartInputConnector, FlowchartOutputConnector, ConnectorType } from \"./FlowchartConnector\";\r\nimport * as operatorimpl from \"./FlowchartOperatorImpl\";\r\nimport { Location2D, Utils } from \"./Utils\"\r\n\r\nexport interface SerializeContext {\r\n    typeIndex2globalConnectorIndex2adressOffset: Map<number, Map<number, number>>;\r\n    buffer: DataView;\r\n    bufferOffset: number;\r\n\r\n}\r\n\r\ndeclare const msCrypto: Crypto;\r\n\r\n\r\n\r\nexport class FlowchartExporter {\r\n\r\n    private static getRandomValuesWithMathRandom(bytes: Uint8Array): void {\r\n        const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\r\n        for (let i = 0, r; i < bytes.length; i++) {\r\n            bytes[i] = Math.random() * max;\r\n        }\r\n    }\r\n\r\n\r\n    private static getRandomBytes(length: number): Uint8Array {\r\n        const bytes = new Uint8Array(length);\r\n        if (typeof crypto !== 'undefined') {\r\n            crypto.getRandomValues(bytes);\r\n        } else if (typeof msCrypto !== 'undefined') {\r\n            msCrypto.getRandomValues(bytes);\r\n        } else {\r\n            FlowchartExporter.getRandomValuesWithMathRandom(bytes);\r\n        }\r\n        return bytes;\r\n    };\r\n\r\n    public static Export(operators: FlowchartOperator[]) {\r\n        let typeIndex2globalConnectorIndex2adressOffset = new Map<number, Map<number, number>>(); //globalConnectorIndex_Outputs 2 variableAdress\r\n        let typeIndex2maxOffset = new Map<number, number>()\r\n        for (let type in ConnectorType) {\r\n            if (!isNaN(Number(type))) {\r\n                typeIndex2globalConnectorIndex2adressOffset.set(Number(type), new Map<number, number>());\r\n                typeIndex2maxOffset.set(Number(type), 2);\r\n            }\r\n        }\r\n\r\n\r\n        //Iteriere über alle Output-Connectoren aller Operatoren\r\n        //Ein Output, der beschaltet ist, entspricht einer Speicheradresse.\r\n        //Unbeschaltete Outputs schreiben in die Speicheradresse 0. \r\n        //Unbeschaltete Inputs lesen von der Speicheradresse 1\r\n        //Echte Speicheradressen gibt es dann ab Index 2\r\n        //In den Maps stehen die Zuordnung Globaler Connector Index --> Index der Speicheraddresse\r\n        //Außerdem bekannt: Wie viele Speicheradressen von jedem Typ benötigen wir\r\n        for (const operator of operators) {\r\n            for (const outputKV of operator.OutputsKVIt) {\r\n                if (outputKV[1].LinksLength == 0) {\r\n                    //unconnected output -->writes to memory adress zero of the respective data type\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, 0);\r\n                }\r\n                else {\r\n                    //connected output --> create new memory address and set it\r\n                    let index = typeIndex2maxOffset.get(outputKV[1].Type)!;\r\n                    typeIndex2globalConnectorIndex2adressOffset.get(outputKV[1].Type)!.set(outputKV[1].GlobalConnectorIndex, index);\r\n                    index++;\r\n                    typeIndex2maxOffset.set(outputKV[1].Type, index);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        Lege nun die Operatoren in der durch das Array vorgegebenen Struktur in ein Array ab\r\n        */\r\n        let buffer = new ArrayBuffer(Math.pow(2, 16));\r\n        let ctx: SerializeContext = { typeIndex2globalConnectorIndex2adressOffset: typeIndex2globalConnectorIndex2adressOffset, buffer: new DataView(buffer), bufferOffset: 0 };\r\n        //Version of Data Structure\r\n        ctx.buffer.setUint32(ctx.bufferOffset, 0xAFFECAFE, true); //Version 0xAFFECAFE means: Development\r\n        ctx.bufferOffset += 4;\r\n        //GUID\r\n        let guid=FlowchartExporter.getRandomBytes(16)\r\n        guid.forEach((v,i)=>{ctx.buffer.setUint8(ctx.bufferOffset+i, v)}); //guid of the model\r\n        ctx.bufferOffset += 16;\r\n\r\n        for (const operator of operators) {\r\n            operator.SerializeToBinary(ctx);\r\n        }\r\n        let code: String = \"const uint8_t code[] = {\"\r\n        for (let i = 0; i < ctx.bufferOffset; i++) {\r\n            code += \"0x\" + ctx.buffer.getUint8(i).toString(16) + \", \";\r\n        }\r\n        code += \"};\";\r\n        window.alert(code);\r\n        //var file = new Blob([buffer.slice(0,ctx.bufferOffset)], {type: \"application/octet-stream\"});\r\n        //URL.createObjectURL(file)\r\n        return guid;\r\n    }\r\n\r\n}","import { FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport { Flowchart } from \"./Flowchart\";\r\nexport class FlowchartLink {\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    private element: SVGPathElement;\r\n    private captionElement: SVGTextElement;\r\n    constructor(private parent: Flowchart, private caption: string, private color: string, private from: FlowchartOutputConnector, private to: FlowchartInputConnector) {\r\n        this.index = FlowchartLink.MAX_INDEX++;\r\n        this.element = <SVGPathElement>Flowchart.Svg(parent.LinkLayer, \"path\", [\"stroke-width\", \"\" + this.parent.Options.linkWidth, \"fill\", \"none\", \"id\", \"LINK\" + this.index]);\r\n        this.RefreshPosition();\r\n        this.UncolorizeLink();\r\n        this.parent.LinkLayer.appendChild(this.element);\r\n        this.captionElement =<SVGTextElement>Flowchart.Svg(parent.LinkLayer, \"text\",[]);\r\n        let captionPath = <SVGTextPathElement>Flowchart.Svg(this.captionElement, \"textPath\",[\"startOffset\", \"50%\",\"text-anchor\", \"middle\"]);\r\n        captionPath.setAttributeNS(Flowchart.XLINKNS, \"href\", '#' + \"LINK\" + this.index);\r\n        captionPath.innerHTML = caption;\r\n        this.element.onclick = (e) => {\r\n            this.parent._notifyLinkClicked(this, e);\r\n        }\r\n    }\r\n    get GlobalLinkIndex() { return this.index; }\r\n    get From() { return this.from; }\r\n    get To() { return this.to; }\r\n    set Color(color: string) { this.color = color; }\r\n\r\n    public RemoveFromDOM() {\r\n        this.element.remove();\r\n        this.captionElement.remove();\r\n    }\r\n\r\n\r\n    public ColorizeLink(color: string) {\r\n        this.element.setAttribute('stroke', color);\r\n        //this.element.setAttribute('fill', color);\r\n        //TODO: colorize the small triangle in the connector\r\n        //linkData.internal.els.fromSmallConnector.css('border-left-color', color);\r\n        //linkData.internal.els.toSmallConnector.css('border-left-color', color);\r\n    }\r\n\r\n    public UncolorizeLink() {\r\n        this.ColorizeLink(this.parent.Options.defaultLinkColor);\r\n    }\r\n\r\n    public RefreshPosition() {\r\n        let fromPosition = this.from.GetLinkpoint();\r\n        let toPosition = this.to.GetLinkpoint();\r\n        let fromX = fromPosition.x;\r\n        let fromY = fromPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let toX = toPosition.x;\r\n        let toY = toPosition.y + this.parent.Options.linkVerticalDecal;\r\n        let distanceFromArrow = this.parent.Options.distanceFromArrow;\r\n        let bezierFromX = (fromX + distanceFromArrow);\r\n        let bezierToX = toX + 1;\r\n        let bezierIntensity = Math.min(100, Math.max(Math.abs(bezierFromX - bezierToX) / 2, Math.abs(fromY - toY)));\r\n        this.element.setAttribute(\"d\", 'M' + bezierFromX + ',' + (fromY) + ' C' + (fromX + distanceFromArrow + bezierIntensity) + ',' + fromY + ' ' + (toX - bezierIntensity) + ',' + toY + ' ' + bezierToX + ',' + toY);\r\n    }\r\n}\r\n","import {ConnectorType, FlowchartInputConnector, FlowchartOutputConnector } from \"./FlowchartConnector\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport {Utils} from \"./Utils\"\r\nimport { SerializeContext } from \"./FlowchartExporter\";\r\n\r\nexport enum PositionType{\r\n    Default,\r\n    Input,\r\n    Output,\r\n};\r\nexport enum SingletonType{\r\n    Default,\r\n    Singleton,\r\n};\r\nexport class TypeInfo\r\n{\r\n    constructor(public GlobalTypeIndex:number, public Position:PositionType, public Singleton:SingletonType){}\r\n}\r\n\r\nexport abstract class FlowchartOperator {\r\n\r\n    //der Index der Inputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Inputs: FlowchartInputConnector[]=[];\r\n    //der Index der Outputs ist rein lokal und beginnt bei 0 fortlaufend\r\n    private Outputs: FlowchartOutputConnector[]= [];\r\n\r\n\r\n    private static MAX_INDEX: number = 0;\r\n    private index: number;\r\n    get GlobalOperatorIndex(){return this.index;}\r\n\r\n    private elementSvgG: SVGGElement;\r\n    get ElementSvgG() { return this.elementSvgG; }\r\n    private inputSvgG:SVGGElement;\r\n    get InputSvgG(): SVGGElement { return this.inputSvgG; }\r\n    private outputSvgG:SVGGElement;\r\n    get OutputSvgG(): SVGGElement { return this.outputSvgG;}\r\n    private debugInfoSvgText:SVGTextElement;\r\n\r\n    get TypeInfo(){return this.typeInfo;}\r\n\r\n    private x=0;\r\n    private y=0;\r\n\r\n    private box:SVGRectElement;\r\n\r\n    public ShowAsSelected(state:boolean)\r\n    {\r\n        if(state)\r\n        {\r\n            this.box.classList.add('selected');\r\n        }\r\n        else{\r\n            this.box.classList.remove('selected');\r\n        }\r\n    }\r\n\r\n    public SetDebugInfoText(text:string):void{\r\n        this.debugInfoSvgText.textContent=text;\r\n    }\r\n\r\n    constructor(private parent: Flowchart, private caption: string, private typeInfo: TypeInfo) {\r\n        this.index = FlowchartOperator.MAX_INDEX++;\r\n        this.elementSvgG = <SVGGElement>Flowchart.Svg(parent.OperatorsLayer, \"g\", [], [\"operator\"]);\r\n\r\n        this.elementSvgG.setAttribute('data-operator-index', \"\" + this.index);\r\n        this.box = <SVGRectElement>Flowchart.Svg(this.elementSvgG, \"rect\", [\"width\",\"140\", \"height\", \"100\", \"rx\", \"10\", \"ry\", \"10\"], [\"operator-box\"]);\r\n        let title = <SVGTextElement>Flowchart.Svg(this.elementSvgG,\"text\", [\"x\", \"5\", \"y\", \"21\"],[\"operator-title\"]);\r\n        title.textContent = caption;\r\n        this.inputSvgG= <SVGGElement>Flowchart.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(0 50)\"], [\"operator-inputs\"]);\r\n        this.outputSvgG= <SVGGElement>Flowchart.Svg(this.elementSvgG,\"g\", [\"transform\", \"translate(140 50)\"], [\"operator-outputs\"]);\r\n        this.debugInfoSvgText = <SVGTextElement>Flowchart.Svg(this.elementSvgG, \"text\", [\"x\", \"0\", \"y\", \"100\"],[\"operator-debuginfo\"]);\r\n        this.debugInfoSvgText.textContent=\"No debug info\";\r\n\r\n        this.box.onclick = (e) => {\r\n            console.log(\"FlowchartOperator this.box.onclick\");\r\n            parent._notifyOperatorClicked(this, e);\r\n        };\r\n        \r\n        if (this.parent.Options.canUserMoveOperators) {\r\n            title.onmousedown = (e) => {\r\n                this.RegisterDragging(e);\r\n            }\r\n        }\r\n    }\r\n    public RegisterDragging(e:MouseEvent)\r\n    {\r\n        let offsetInOperator = Utils.EventCoordinatesInSVG(e, this.ElementSvgG); //offset innerhalb des Operators\r\n        //Wir benötigen den Offset zwischen der aktuellen Position des Objektes und \r\n        let offsetX= e.clientX-this.x;\r\n        let offsetY = e.clientY-this.y;\r\n\r\n\r\n        document.onmouseup = (e) => {\r\n            document.onmouseup = null;\r\n            document.onmousemove = null;\r\n        };\r\n        document.onmousemove = e => {\r\n            //TODO: neue Position nur setzen, wenn this.element.clientRect innerhalb von parent.clientRectangle ist\r\n            this.MoveTo(e.clientX - offsetX, e.clientY - offsetY);\r\n        };\r\n    }\r\n    get Parent() { return this.parent };\r\n    get Caption() { return this.caption; }\r\n\r\n    get InputsKVIt(){return this.Inputs.entries()}\r\n    get OutputsKVIt(){return this.Outputs.entries()}\r\n    public GetOutputConnectorByIndex=(i:number)=>this.Outputs[i];\r\n    public GetInputConnectorByIndex=(i:number)=>this.Inputs[i];\r\n\r\n    public RemoveFromDOM(): void {\r\n        this.elementSvgG.remove();\r\n    }\r\n\r\n    protected AppendConnectors(inputs: FlowchartInputConnector[], outputs: FlowchartOutputConnector[]) {\r\n        if(this.Inputs.length!=0 || this.Outputs.length !=0) throw new Error(\"AppendConnectors may only be called once!\");\r\n        for (const i of inputs) {\r\n            if (i.Parent != this) continue;\r\n            this.Inputs.push(i);\r\n        }\r\n        for (const o of outputs) {\r\n            if (o.Parent != this) continue;\r\n            this.Outputs.push(o);\r\n        }\r\n        let num = Math.max(this.Inputs.length, this.Outputs.length);\r\n        let height = 50+num*20+10;\r\n        this.box.setAttribute(\"height\", \"\"+height);\r\n        this.debugInfoSvgText.setAttribute(\"y\", \"\"+height);\r\n        //TODO RedrawConnectors; Connectors zeichnen sich nicht im Construktur, sondern erst nach dem Appenden, um die Reihenfolgen in derser Liste und im DOM gleich zu haben\r\n    }\r\n\r\n    public MoveTo(x: number, y: number) {\r\n        let g = this.parent.Options.grid;\r\n        this.x = Math.round(x / g) * g;\r\n        this.y = Math.round(y / g) * g;\r\n        this.elementSvgG.setAttribute(\"transform\", `translate(${this.x} ${this.y})`);\r\n        for (const c of this.Inputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n        for (const c of this.Outputs) {\r\n            c.RefreshLinkPositions();\r\n        }\r\n    }\r\n\r\n    public PopulateProperyGrid(parent:HTMLTableElement):boolean\r\n    {\r\n        //let tr=Flowchart.Html(parent, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        //Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], \"AKey\");\r\n        //Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], \"AValue\");\r\n        return false;\r\n    }\r\n    \r\n    protected SerializeInputsAndOutputs(ctx:SerializeContext)\r\n    {\r\n        for (const input of this.Inputs) {\r\n            let variableAdress = 0;\r\n            let links = input.GetLinksCopy();\r\n            if(links.length==0){\r\n                variableAdress=1; //because unconnected inputs read from adress 1 (which is \"false\", 0, 0.0, black...)\r\n            }\r\n            else{\r\n                let out = links[0].From;\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(out.Type)!.get(out.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.buffer.setUint32(ctx.bufferOffset, variableAdress, true);\r\n            ctx.bufferOffset+=4;\r\n        }\r\n        for(const output of this.Outputs)\r\n        {\r\n            let variableAdress = 0;\r\n            if(output.LinksLength==0){\r\n                variableAdress=0; //because unconnected outputs write to adress 0 (which is never read!)\r\n            }\r\n            else{\r\n                variableAdress=ctx.typeIndex2globalConnectorIndex2adressOffset.get(output.Type)!.get(output.GlobalConnectorIndex)||1;\r\n            }\r\n            ctx.buffer.setUint32(ctx.bufferOffset, variableAdress, true);\r\n            ctx.bufferOffset+=4;\r\n        }\r\n    }\r\n\r\n    public SerializeToBinary(ctx:SerializeContext)\r\n    {\r\n        //serialize Type\r\n        ctx.buffer.setUint32(ctx.bufferOffset, this.TypeInfo.GlobalTypeIndex, true);\r\n        ctx.bufferOffset+=4;\r\n        //Index of instance\r\n        ctx.buffer.setUint32(ctx.bufferOffset, this.GlobalOperatorIndex, true);\r\n        ctx.bufferOffset+=4;\r\n        this.SerializeInputsAndOutputs(ctx);\r\n        this.SerializeFurtherProperties(ctx);\r\n        //ctx.buffer.setUint32(ctx.bufferOffset, 0xAFFECAFE, true);\r\n        //ctx.bufferOffset+=4;\r\n    }\r\n    \r\n    protected SerializeFurtherProperties(mapper:SerializeContext):void{\r\n        return;\r\n    }\r\n}\r\n","import {FlowchartOperator, TypeInfo, PositionType, SingletonType} from \"./FlowchartOperator\";\r\nimport {Flowchart} from \"./Flowchart\";\r\nimport {FlowchartInputConnector, FlowchartOutputConnector, ConnectorType} from \"./FlowchartConnector\";\r\nimport { SerializeContext } from \"./FlowchartExporter\";\r\n\r\nconst ANDOperator_TypeIndex = 1;\r\n\r\n\r\nexport class ANDOperator extends FlowchartOperator {\r\n  \r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(1, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class OROperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(2, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class ADDOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(3, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MULTOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(4, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MAXOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(5, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class MINOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(6, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.INTEGER);\r\n        let B = new FlowchartInputConnector(this, \"B\", ConnectorType.INTEGER);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.INTEGER);\r\n        this.AppendConnectors([A, B], [C]);\r\n    }\r\n}\r\n\r\nexport class RSOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(7, PositionType.Default, SingletonType.Default));\r\n        let R = new FlowchartInputConnector(this, \"R\", ConnectorType.BOOLEAN);\r\n        let S = new FlowchartInputConnector(this, \"S\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([R, S], [C]);\r\n    }\r\n}\r\n\r\nexport class NotOperator extends FlowchartOperator {\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(8, PositionType.Default, SingletonType.Default));\r\n        let A = new FlowchartInputConnector(this, \"A\", ConnectorType.BOOLEAN);\r\n        let C = new FlowchartOutputConnector(this, \"C\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([A], [C]);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class GreenButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(9, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class EncoderButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(10, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RedButtonOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(11, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"IsPressed\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class MoveSensorOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(12, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"Movement\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class TempSensorOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(13, PositionType.Input, SingletonType.Singleton));\r\n        let O = new FlowchartOutputConnector(this, \"Temperatur\", ConnectorType.FLOAT);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RelayOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(14, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"Relay\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class RedLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(15, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class YellowLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(16, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class GreenLedOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(17, PositionType.Output, SingletonType.Singleton));\r\n        let conn = new FlowchartInputConnector(this, \"LED\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([conn], []);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class ConstTRUEOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(18, PositionType.Input, SingletonType.Default));\r\n        let O = new FlowchartOutputConnector(this, \"TRUE\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n}\r\n\r\nexport class ConstINTOperator extends FlowchartOperator {\r\n    public StorageId:string;\r\n    constructor(parent: Flowchart, caption: string) {\r\n        super(parent, caption, new TypeInfo(19, PositionType.Input, SingletonType.Default));\r\n        let O = new FlowchartOutputConnector(this, \"Out\", ConnectorType.BOOLEAN);\r\n        this.AppendConnectors([], [O]);\r\n        this.StorageId=\"4711\";\r\n    }\r\n\r\n    public PopulateProperyGrid(parent:HTMLTableElement):boolean\r\n    {\r\n        PropertyGridHelpers.Number(parent, \"Constant\", -32768, 32767);\r\n        return true;\r\n    }\r\n}\r\n\r\nclass PropertyGridHelpers\r\n{\r\n    public static Number(table:HTMLTableElement, key:string, min:number, max:number)\r\n    {\r\n        let tr=Flowchart.Html(table, \"tr\", [],[\"develop-propertygrid-tr\"]);\r\n        Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"], key);\r\n        let inputContainer = Flowchart.Html(tr, \"td\", [],[\"develop-propertygrid-td\"]);\r\n        Flowchart.Html(inputContainer, \"input\", [\"type\", \"number\", \"min\", \"\"+Math.round(min), \"max\", \"\"+Math.round(max)])\r\n    }\r\n}\r\n","//https://en.wikipedia.org/wiki/Topological_sorting\r\n\r\n\r\nenum MarkerState\r\n{\r\n    NONE,\r\n    TEMPORARY,\r\n    PERMANENT,\r\n}\r\n\r\nexport class  NodeWrapper<N> {\r\n    constructor(private payload:N) {\r\n        this.Mark=MarkerState.NONE;\r\n        this.DependendNodes=[];\r\n    }\r\n    public Mark:MarkerState\r\n    public DependendNodes:NodeWrapper<N>[];\r\n    get Payload() {return this.payload;}\r\n};\r\n\r\nexport class TopologicalSortDFS<N>{\r\n    private L:Array<NodeWrapper<N>>;\r\n    constructor()\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n    }\r\n\r\n    public sort(headNode:Array<NodeWrapper<N>>)\r\n    {\r\n        this.L=new Array<NodeWrapper<N>>();\r\n        headNode.forEach((n)=>this.visit(n));\r\n        return this.L;\r\n    }\r\n\r\n    private visit(n:NodeWrapper<N>){\r\n        if(n.Mark==MarkerState.PERMANENT) return;\r\n        if(n.Mark==MarkerState.TEMPORARY) throw new Error(\"not a DAG\");\r\n        n.Mark=MarkerState.TEMPORARY;\r\n        for (const d of n.DependendNodes) {\r\n            this.visit(d);\r\n        }\r\n        n.Mark=MarkerState.PERMANENT;\r\n        this.L.push(n);\r\n    }\r\n}","export class Utils\r\n{\r\n    public static EventCoordinatesInSVG(evt:MouseEvent, element:Element, positionRatio:number=1):Location2D {\r\n        let rect = element.getBoundingClientRect();\r\n        return {x: (evt.clientX - rect.left)/positionRatio, y:(evt.clientY - rect.top)/positionRatio}\r\n    }\r\n}\r\n\r\nexport interface Location2D {\r\n    x: number;\r\n    y: number;\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}